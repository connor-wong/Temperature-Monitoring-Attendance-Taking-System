{"version":3,"sources":["UserPool.js","components/Authentication/Account.js","components/Authentication/NewPassword.js","components/Authentication/ForgetPassword.js","components/Authentication/Login.js","components/Authentication/ChangePassword.js","components/Dashboard/NavBar.js","components/Dashboard/LatestAttendance/SelectedAttendance.js","components/Dashboard/StudentList.js","components/Dashboard/LatestAttendance/LatestAttendance.js","components/Dashboard/StudentMatters/StudentMatters.js","components/Dashboard/Classes/AttendanceList.js","components/Dashboard/Classes/Classes.js","components/Dashboard/Dashboard.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["CognitoUserPool","UserPoolId","ClientId","AccountContext","createContext","Account","props","useState","isFirstLogin","setIsFirstLogin","login","setLogin","user","setUser","userAttr","setUserAttr","userEmail","setUserEmail","getSession","a","Promise","resolve","reject","Pool","getCurrentUser","err","session","getUserAttributes","attributes","results","attribute","Name","Value","email","axios","post","authenticate","Username","Password","CognitoUser","authDetails","AuthenticationDetails","authenticateUser","onSuccess","data","console","log","onFailure","error","newPasswordRequired","Provider","value","logout","signOut","window","location","reload","children","NewPassword","useContext","password","setPassword","confirmPassword","setConfirmPassword","message","setMessage","Container","className","fluid","Row","Col","style","fontSize","fontWeight","color","Form","onSubmit","event","preventDefault","email_verified","completeNewPasswordChallenge","result","Group","controlId","Control","type","placeholder","onChange","target","Button","width","backgroundColor","marginBottom","onClick","textAlign","ForgetPassword","stage","setStage","setEmail","code","setCode","getUser","toLowerCase","forgotPassword","inputVerificationCode","Login","isLoading","setIsLoading","height","xl","lg","md","sm","xs","textDecoration","then","catch","variant","Spinner","as","animation","size","role","aria-hidden","ChangePassword","newPassword","setNewPassword","changePassword","NavBar","setChangePassword","setTimeout","Navbar","collapseOnSelect","expand","Brand","display","marginLeft","Toggle","aria-controls","Collapse","id","Nav","Text","marginRight","Modal","onHide","show","centered","Header","Title","Body","Footer","SelectedAttendance","selectedDate","date","setUpdateData","isSave","setIsSave","attendanceList","setAttendanceList","studentList","setstudentList","selectedClass","setSelectedClass","absentList","setAbsentList","editStatus","setEditStatus","removeStudents","setRemoveStudents","addStudents","setAddStudents","AWS","config","update","region","accessKeyId","secretAccessKey","dynamodbClient","DynamoDB","DocumentClient","TABLE_NAME","useEffect","mounted","fetch","res","json","response","forEach","push","ID","sort","b","Date","attendance","filter","includes","id1","some","Class","getData","afterSaveHandler","ListGroup","map","student","Item","Temperature","Check","defaultChecked","e","checked","removeList","item","removeStudentHandler","marginTop","addList","addStudentHandler","borderColor","filename","borderRadius","padding","disabled","length","saveParams","TableName","put","JSON","stringify","deleteParams","Key","delete","StudentList","setStudentList","LatestAttendance","attendanceArray","showModal","setShowModal","classTitle","setClassTitle","setDate","option","setOption","highlightColor","count","Toast","viewBox","standalone","padAngle","innerRadius","key","y","Present","Total_Students","colorScale","labels","textAnchor","fill","x","text","currentTarget","selectHandler","closeButton","StudentMatters","temperatureMatterArray","temperatureMatter","lowAttendanceMatterArray","lowAttendanceMatter","selectedList","setSelectedList","classArray","absentArray","Set","Student","clickHandler","popover","Popover","Content","index","OverlayTrigger","trigger","placement","overlay","ButtonGroup","AttendanceList","setAttendanceArray","dates","setDates","showAttendance","setShowAttendance","setSelectedDate","dateArray","split","action","getAttendanceList","Classes","classes","block","properties","title","Dashboard","setClasses","setAttendance","setTemperatureMatter","setlowAttendanceMatter","updateData","studentArray","dataArray","sheets","latestAttendanceData","undefined","totalStudents","presentCount","absentChecker","reduce","acc","el","i","arr","indexOf","App","loggedIn","setLoggedIn","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.6507affc.chunk.js","sourcesContent":["import { CognitoUserPool } from \"amazon-cognito-identity-js\";\r\n\r\nconst poolData = {\r\n  UserPoolId: \"ap-southeast-1_LW7VL5TAI\",\r\n  ClientId: \"n4hbcid1kla9n4mktonhu7fmk\",\r\n};\r\n\r\nexport default new CognitoUserPool(poolData);\r\n","import React, { createContext, useState } from \"react\";\r\nimport { CognitoUser, AuthenticationDetails } from \"amazon-cognito-identity-js\";\r\nimport Pool from \"../../UserPool\";\r\nimport axios from \"axios\";\r\n\r\nconst AccountContext = createContext();\r\n\r\nconst Account = (props) => {\r\n  const [isFirstLogin, setIsFirstLogin] = useState(false);\r\n  const [login, setLogin] = useState(false);\r\n  const [user, setUser] = useState(\"\");\r\n  const [userAttr, setUserAttr] = useState(\"\");\r\n  const [userEmail, setUserEmail] = useState(\"\");\r\n\r\n  const getSession = async () =>\r\n    await new Promise((resolve, reject) => {\r\n      const user = Pool.getCurrentUser();\r\n      if (user) {\r\n        user.getSession(async (err, session) => {\r\n          if (err) {\r\n            reject();\r\n          } else {\r\n            const attributes = await new Promise((resolve, reject) => {\r\n              user.getUserAttributes((err, attributes) => {\r\n                if (err) {\r\n                  reject(err);\r\n                } else {\r\n                  const results = {};\r\n\r\n                  for (let attribute of attributes) {\r\n                    const { Name, Value } = attribute;\r\n                    results[Name] = Value;\r\n                  }\r\n                  setUserEmail(results.email);\r\n                  axios.post(\"/drive/email\", results.email);\r\n                  resolve(results);\r\n                }\r\n              });\r\n            });\r\n\r\n            resolve({\r\n              user,\r\n              ...session,\r\n              ...attributes,\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        reject();\r\n      }\r\n    });\r\n\r\n  const authenticate = async (Username, Password) =>\r\n    await new Promise((resolve, reject) => {\r\n      const user = new CognitoUser({ Username, Pool });\r\n      const authDetails = new AuthenticationDetails({ Username, Password });\r\n\r\n      user.authenticateUser(authDetails, {\r\n        onSuccess: (data) => {\r\n          console.log(\"onSuccess:\", data);\r\n          setLogin(true);\r\n          resolve(data);\r\n        },\r\n\r\n        onFailure: (err) => {\r\n          console.error(\"onFailure:\", err);\r\n          setLogin(false);\r\n          reject(err);\r\n        },\r\n\r\n        newPasswordRequired: (data) => {\r\n          console.log(\"newPasswordRequired:\", data);\r\n          setIsFirstLogin(true);\r\n          setUser(user);\r\n          setUserAttr(data);\r\n\r\n          resolve(data);\r\n        },\r\n      });\r\n    });\r\n\r\n  const logout = () => {\r\n    const user = Pool.getCurrentUser();\r\n    if (user) {\r\n      user.signOut();\r\n      window.location.reload(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AccountContext.Provider\r\n      value={{\r\n        authenticate,\r\n        getSession,\r\n        logout,\r\n        login,\r\n        isFirstLogin,\r\n        user,\r\n        userAttr,\r\n        userEmail,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AccountContext.Provider>\r\n  );\r\n};\r\n\r\nexport { Account, AccountContext };\r\n","import React, { useState, useContext } from \"react\";\r\nimport { AccountContext } from \"./Account\";\r\n\r\nimport { Row, Col, Container, Form, Button } from \"react-bootstrap\";\r\n\r\nconst NewPassword = () => {\r\n  const { user, userAttr } = useContext(AccountContext);\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const changePassword = (event) => {\r\n    event.preventDefault();\r\n\r\n    delete userAttr.email_verified;\r\n\r\n    if (password !== confirmPassword) {\r\n      setMessage(\"Passwords does not match.\");\r\n      //console.error(\"Passwords are not the same\");\r\n      return;\r\n    } else {\r\n      user.completeNewPasswordChallenge(password, userAttr, {\r\n        onSuccess: (result) => {\r\n          setMessage(\"New password created successfully.\");\r\n          console.log(result);\r\n          window.location.reload(false);\r\n        },\r\n        onFailure: (err) => {\r\n          setMessage(\"Error, please contact administrator.\");\r\n          console.log(err);\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Container className=\"newpassword\" fluid>\r\n        <Row>\r\n          <Col>\r\n            <h3\r\n              style={{\r\n                fontSize: \"calc(1rem + 2vw)\",\r\n                fontWeight: \"bold\",\r\n              }}\r\n            >\r\n              Logging in for the first time?\r\n            </h3>\r\n            <h3\r\n              style={{\r\n                fontSize: \"calc(1rem + 1vw)\",\r\n                fontWeight: \"normal\",\r\n                color: \"#848484\",\r\n              }}\r\n            >\r\n              Set your new password\r\n            </h3>\r\n            <Form onSubmit={changePassword}>\r\n              <Form.Group controlId=\"formBasicNewPassword\">\r\n                <Form.Control\r\n                  type=\"password\"\r\n                  value={password}\r\n                  placeholder=\"New Password\"\r\n                  onChange={(event) => setPassword(event.target.value)}\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"formBasicConfirmPassword\">\r\n                <Form.Control\r\n                  type=\"password\"\r\n                  value={confirmPassword}\r\n                  placeholder=\"Confirm Password\"\r\n                  onChange={(event) => setConfirmPassword(event.target.value)}\r\n                />\r\n              </Form.Group>\r\n              <Button\r\n                type=\"submit\"\r\n                style={{\r\n                  width: \"100%\",\r\n                  backgroundColor: \"#3241c9\",\r\n                  fontSize: \"22px\",\r\n                  marginBottom: \"10px\",\r\n                }}\r\n              >\r\n                Reset Password\r\n              </Button>\r\n            </Form>\r\n            <Button\r\n              style={{\r\n                width: \"100%\",\r\n                backgroundColor: \"#3241c9\",\r\n                fontSize: \"22px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n              onClick={() => {\r\n                window.location.reload(false);\r\n              }}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <h3\r\n              style={{\r\n                fontSize: \"18px\",\r\n                color: \"red\",\r\n                textAlign: \"center\",\r\n              }}\r\n            >\r\n              {message}\r\n            </h3>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewPassword;\r\n","import React, { useState } from \"react\";\r\nimport { CognitoUser } from \"amazon-cognito-identity-js\";\r\nimport Pool from \"../../UserPool\";\r\n\r\nimport { Form, Button } from \"react-bootstrap\";\r\n\r\nconst ForgetPassword = () => {\r\n  const [stage, setStage] = useState(1);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [code, setCode] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const getUser = () => {\r\n    return new CognitoUser({\r\n      Username: email.toLowerCase(),\r\n      Pool,\r\n    });\r\n  };\r\n\r\n  const sendCode = (event) => {\r\n    event.preventDefault();\r\n\r\n    getUser().forgotPassword({\r\n      onSuccess: (data) => {\r\n        console.log(\"onSuccess:\", data);\r\n      },\r\n      onFailure: (err) => {\r\n        console.error(\"onFailure:\", err);\r\n      },\r\n      inputVerificationCode: (data) => {\r\n        console.log(\"Input code:\", data);\r\n        setStage(2);\r\n      },\r\n    });\r\n  };\r\n\r\n  const resetPassword = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (password !== confirmPassword) {\r\n      setMessage(\"Passwords does not match.\");\r\n      //console.error(\"Passwords are not the same.\");\r\n      return;\r\n    }\r\n\r\n    getUser().confirmPassword(code, password, {\r\n      onSuccess: (data) => {\r\n        setMessage(\"Password reset successfully.\");\r\n        console.log(\"onSuccess:\", data);\r\n        window.location.reload(false);\r\n      },\r\n      onFailure: (err) => {\r\n        setMessage(\"Incorrect verification code.\");\r\n        console.error(\"onFailure:\", err);\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {stage === 1 && (\r\n        <>\r\n          <h3\r\n            style={{\r\n              fontSize: \"calc(2rem + 2vw)\",\r\n              fontWeight: \"bold\",\r\n              marginBottom: \"20px\",\r\n            }}\r\n          >\r\n            Forget Password?\r\n          </h3>\r\n          <Form onSubmit={sendCode}>\r\n            <Form.Group controlId=\"formBasicEmail\">\r\n              <Form.Control\r\n                type=\"email\"\r\n                value={email}\r\n                placeholder=\"Email\"\r\n                onChange={(event) => setEmail(event.target.value)}\r\n              />\r\n            </Form.Group>\r\n            <Button\r\n              type=\"submit\"\r\n              style={{\r\n                width: \"100%\",\r\n                backgroundColor: \"#3241c9\",\r\n                fontSize: \"22px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Send verification code\r\n            </Button>\r\n          </Form>\r\n          <Button\r\n            style={{\r\n              width: \"100%\",\r\n              backgroundColor: \"#3241c9\",\r\n              fontSize: \"22px\",\r\n            }}\r\n            onClick={() => {\r\n              window.location.reload(false);\r\n            }}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </>\r\n      )}\r\n\r\n      {stage === 2 && (\r\n        <>\r\n          <h3\r\n            style={{\r\n              fontSize: \"calc(2rem + 2vw)\",\r\n              fontWeight: \"bold\",\r\n              marginBottom: \"20px\",\r\n            }}\r\n          >\r\n            Set New Password\r\n          </h3>\r\n          <Form onSubmit={resetPassword}>\r\n            <Form.Group controlId=\"formBasicEmail\">\r\n              <Form.Control\r\n                value={code}\r\n                placeholder=\"Verification Code\"\r\n                onChange={(event) => setCode(event.target.value)}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formBasicNewPassword\">\r\n              <Form.Control\r\n                type=\"password\"\r\n                value={password}\r\n                placeholder=\"New Password\"\r\n                onChange={(event) => setPassword(event.target.value)}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formBasicConfirmPassword\">\r\n              <Form.Control\r\n                type=\"password\"\r\n                value={confirmPassword}\r\n                placeholder=\"Confirm Password\"\r\n                onChange={(event) => setConfirmPassword(event.target.value)}\r\n              />\r\n            </Form.Group>\r\n            <Button\r\n              type=\"submit\"\r\n              style={{\r\n                width: \"100%\",\r\n                backgroundColor: \"#3241c9\",\r\n                fontSize: \"22px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Reset Password\r\n            </Button>\r\n          </Form>\r\n          <h3\r\n            style={{\r\n              fontSize: \"18px\",\r\n              color: \"red\",\r\n              textAlign: \"center\",\r\n            }}\r\n          >\r\n            {message}\r\n          </h3>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForgetPassword;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { AccountContext } from \"./Account\";\r\nimport { Row, Col, Container, Form, Button, Spinner } from \"react-bootstrap\";\r\n\r\nimport NewPassword from \"./NewPassword\";\r\nimport ForgetPassword from \"./ForgetPassword\";\r\n\r\nconst Login = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [stage, setStage] = useState(1);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const { authenticate, isFirstLogin } = useContext(AccountContext);\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    authenticate(email, password)\r\n      .then((data) => {\r\n        console.log(\"Logged in!\", data);\r\n        setIsLoading(true);\r\n      })\r\n\r\n      .catch((err) => {\r\n        console.error(\"Failed to login!\", err);\r\n        setMessage(\"Incorrect username or password.\");\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Container className=\"login text-center\" fluid>\r\n        <Row style={{ height: \"100vh\" }}>\r\n          <Col className=\"login-left\" xl={6} lg={12} md={12} sm={12} xs={12}>\r\n            <div className=\"login-title\">\r\n              <h3>RASPITAR</h3>\r\n              <h3 style={{ textDecoration: \"underline\" }}>WEB</h3>\r\n            </div>\r\n          </Col>\r\n\r\n          <Col className=\"login-right\" xl={6} lg={12} md={12} sm={12} xs={12}>\r\n            <Row>\r\n              <Col className=\"login-area\">\r\n                {isFirstLogin ? (\r\n                  <NewPassword />\r\n                ) : (\r\n                  <>\r\n                    {stage === 1 ? (\r\n                      <>\r\n                        <h3\r\n                          style={{\r\n                            fontSize: \"calc(2rem + 2vw)\",\r\n                            fontWeight: \"bold\",\r\n                            textAlign: \"left\",\r\n                          }}\r\n                        >\r\n                          Hello there,\r\n                        </h3>\r\n                        <h3\r\n                          style={{\r\n                            fontSize: \"calc(1rem + 1vw)\",\r\n                            fontWeight: \"normal\",\r\n                            color: \"#848484\",\r\n                            textAlign: \"left\",\r\n                          }}\r\n                        >\r\n                          Login to your account\r\n                        </h3>\r\n                        <Form onSubmit={onSubmit}>\r\n                          <Form.Group controlId=\"formBasicEmail\">\r\n                            <Form.Control\r\n                              type=\"email\"\r\n                              placeholder=\"Email\"\r\n                              onChange={(event) => setEmail(event.target.value)}\r\n                            />\r\n                          </Form.Group>\r\n\r\n                          <Form.Group controlId=\"formBasicPassword\">\r\n                            <Form.Control\r\n                              type=\"password\"\r\n                              placeholder=\"Password\"\r\n                              onChange={(event) =>\r\n                                setPassword(event.target.value)\r\n                              }\r\n                            />\r\n                          </Form.Group>\r\n\r\n                          <Button\r\n                            variant=\"primary\"\r\n                            type=\"submit\"\r\n                            style={{\r\n                              width: \"100%\",\r\n                              backgroundColor: \"#3241c9\",\r\n                              fontSize: \"22px\",\r\n                              marginBottom: \"10px\",\r\n                            }}\r\n                          >\r\n                            {isLoading ? (\r\n                              <Spinner\r\n                                as=\"span\"\r\n                                animation=\"border\"\r\n                                size=\"sm\"\r\n                                role=\"status\"\r\n                                aria-hidden=\"true\"\r\n                              />\r\n                            ) : (\r\n                              <span>Log in</span>\r\n                            )}\r\n                          </Button>\r\n                        </Form>\r\n                        <Button\r\n                          variant=\"primary\"\r\n                          type=\"submit\"\r\n                          style={{\r\n                            width: \"100%\",\r\n                            backgroundColor: \"#3241c9\",\r\n                            fontSize: \"22px\",\r\n                            marginBottom: \"10px\",\r\n                          }}\r\n                          onClick={() => {\r\n                            setStage(2);\r\n                          }}\r\n                        >\r\n                          Forget Password\r\n                        </Button>\r\n                        <h3\r\n                          style={{\r\n                            fontSize: \"18px\",\r\n                            color: \"red\",\r\n                            textAlign: \"center\",\r\n                          }}\r\n                        >\r\n                          {message}\r\n                        </h3>\r\n                      </>\r\n                    ) : (\r\n                      <ForgetPassword />\r\n                    )}\r\n                  </>\r\n                )}\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { AccountContext } from \"./Account\";\r\nimport { Form, Button, Spinner } from \"react-bootstrap\";\r\n\r\nconst ChangePassword = () => {\r\n  const [password, setPassword] = useState(\"\");\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const { getSession, authenticate } = useContext(AccountContext);\r\n\r\n  const onSubmit = (event) => {\r\n    setIsLoading(true);\r\n    event.preventDefault();\r\n\r\n    getSession().then(({ user, email }) => {\r\n      authenticate(email, password).then(() => {\r\n        user.changePassword(password, newPassword, (err, result) => {\r\n          if (err) {\r\n            setMessage(\"Wrong Password\");\r\n            console.error(err);\r\n          } else {\r\n            console.log(result);\r\n          }\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={onSubmit}>\r\n        <Form.Group controlId=\"formBasicEmail\">\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder=\"Old Password\"\r\n            value={password}\r\n            onChange={(event) => setPassword(event.target.value)}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicPassword\">\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder=\"New Password\"\r\n            onChange={(event) => setNewPassword(event.target.value)}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Button\r\n          variant=\"primary\"\r\n          type=\"submit\"\r\n          style={{\r\n            width: \"100%\",\r\n            backgroundColor: \"#3241c9\",\r\n            fontSize: \"22px\",\r\n            marginBottom: \"10px\",\r\n          }}\r\n        >\r\n          {isLoading ? (\r\n            <Spinner\r\n              as=\"span\"\r\n              animation=\"border\"\r\n              size=\"sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n            />\r\n          ) : (\r\n            <span>Change Password</span>\r\n          )}\r\n        </Button>\r\n        <h3\r\n          style={{\r\n            fontSize: \"18px\",\r\n            color: \"red\",\r\n            textAlign: \"center\",\r\n          }}\r\n        >\r\n          {message}\r\n        </h3>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChangePassword;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Button, Navbar, Nav, Spinner, Modal } from \"react-bootstrap\";\r\nimport { AccountContext } from \"../Authentication/Account\";\r\nimport ChangePassword from \"../Authentication/ChangePassword\";\r\n\r\nconst NavBar = () => {\r\n  const { logout, userEmail } = useContext(AccountContext);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [changePassword, setChangePassword] = useState(false);\r\n\r\n  if (isLoading) {\r\n    setTimeout(() => {\r\n      logout();\r\n    }, 1500);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Navbar className=\"navbar\" collapseOnSelect expand=\"lg\">\r\n        <Navbar.Brand style={{ display: \"flex\" }}>\r\n          <h3\r\n            style={{\r\n              fontSize: \"32px\",\r\n              fontWeight: \"bold\",\r\n              color: \"white\",\r\n            }}\r\n          >\r\n            RASPITAR\r\n          </h3>\r\n          <h3\r\n            style={{\r\n              textDecoration: \"underline\",\r\n              marginLeft: \"10px\",\r\n              fontSize: \"32px\",\r\n              fontWeight: \"bold\",\r\n              color: \"white\",\r\n            }}\r\n          >\r\n            WEB\r\n          </h3>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle\r\n          aria-controls=\"responsive-navbar-nav\"\r\n          style={{ backgroundColor: \"white\" }}\r\n        />\r\n        <Navbar.Collapse\r\n          className=\"justify-content-end\"\r\n          id=\"responsive-navbar-nav\"\r\n        >\r\n          <Nav>\r\n            <Navbar.Text\r\n              style={{\r\n                marginRight: \"10px\",\r\n                marginBottom: \"10px\",\r\n                color: \"white\",\r\n                fontSize: \"18px\",\r\n              }}\r\n            >\r\n              Signed in as: {userEmail}\r\n            </Navbar.Text>\r\n            <Button\r\n              style={{\r\n                marginRight: \"10px\",\r\n                marginBottom: \"10px\",\r\n                backgroundColor: \"white\",\r\n                color: \"black\",\r\n                fontWeight: \"bold\",\r\n                fontSize: \"18px\",\r\n              }}\r\n              onClick={() => setChangePassword(true)}\r\n            >\r\n              Change Password\r\n            </Button>\r\n\r\n            <Button\r\n              style={{\r\n                marginRight: \"10px\",\r\n                marginBottom: \"10px\",\r\n                backgroundColor: \"white\",\r\n                color: \"black\",\r\n                fontWeight: \"bold\",\r\n                fontSize: \"18px\",\r\n              }}\r\n              onClick={() => {\r\n                setIsLoading(true);\r\n              }}\r\n            >\r\n              {isLoading ? (\r\n                <Spinner\r\n                  as=\"span\"\r\n                  animation=\"border\"\r\n                  size=\"sm\"\r\n                  role=\"status\"\r\n                  aria-hidden=\"true\"\r\n                />\r\n              ) : (\r\n                <span>Log Out</span>\r\n              )}\r\n            </Button>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n\r\n      <Modal\r\n        onHide={() => setChangePassword(false)}\r\n        show={changePassword}\r\n        size=\"lg\"\r\n        centered\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title>Change Password</Modal.Title>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>\r\n          <ChangePassword />\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n          <Button onClick={() => setChangePassword(false)}>Cancel</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Container,\r\n  Spinner,\r\n  ListGroup,\r\n  Button,\r\n  Form,\r\n} from \"react-bootstrap\";\r\nimport CsvDownload from \"react-json-to-csv\";\r\nimport AWS from \"aws-sdk\";\r\n\r\nconst SelectedAttendance = (props) => {\r\n  const selectedDate = props.date;\r\n  const setUpdateData = props.setUpdateData;\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isSave, setIsSave] = useState(false);\r\n  const [attendanceList, setAttendanceList] = useState([]);\r\n  const [studentList, setstudentList] = useState([]);\r\n  const [selectedClass, setSelectedClass] = useState(\"\");\r\n  const [absentList, setAbsentList] = useState([]);\r\n  const [editStatus, setEditStatus] = useState(false);\r\n  const [removeStudents, setRemoveStudents] = useState([]);\r\n  const [addStudents, setAddStudents] = useState([]);\r\n\r\n  // AWS DynamoDB Config\r\n  AWS.config.update({\r\n    region: \"ap-southeast-1\",\r\n    accessKeyId: \"AKIAVT4QMHKTJR6VFAEN\",\r\n    secretAccessKey: \"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\",\r\n  });\r\n\r\n  const dynamodbClient = new AWS.DynamoDB.DocumentClient();\r\n  const TABLE_NAME = \"March\";\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    let studentList = [];\r\n    let absentList;\r\n\r\n    const getData = async () => {\r\n      const response = await fetch(\"/aws/api\").then((res) => res.json()); // Get Student Attendance\r\n      const studentArray = await fetch(\"/sheet/student\").then((res) =>\r\n        res.json()\r\n      ); // Get Student List\r\n\r\n      // Convert array to object\r\n      studentArray.forEach((res) => {\r\n        studentList.push({\r\n          Name: res[0],\r\n          ID: res[1],\r\n        });\r\n      });\r\n\r\n      response.sort((a, b) => {\r\n        // Sort to latest datex\r\n        return new Date(b.Date) - new Date(a.Date);\r\n      });\r\n\r\n      const attendance = response.filter(\r\n        (\r\n          res // Filter Attendance By Selected Date\r\n        ) => res.Date.includes(selectedDate)\r\n      );\r\n\r\n      // Filter absent students\r\n      absentList = studentList.filter(\r\n        ({ Name: id1 }) => !attendance.some(({ Name: id2 }) => id2 === id1)\r\n      );\r\n\r\n      if (mounted) {\r\n        setSelectedClass(attendance[0].Class);\r\n        setAttendanceList(attendance);\r\n        setAbsentList(absentList);\r\n        setstudentList(studentList);\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    getData();\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  }, [selectedDate]);\r\n\r\n  const afterSaveHandler = async () => {\r\n    const response = await fetch(\"/aws/api\").then((res) => res.json()); // Get Student Attendance\r\n\r\n    response.sort((a, b) => {\r\n      // Sort to latest datex\r\n      return new Date(b.Date) - new Date(a.Date);\r\n    });\r\n\r\n    const attendance = response.filter(\r\n      (\r\n        res // Filter Attendance By Selected Date\r\n      ) => res.Date.includes(selectedDate)\r\n    );\r\n\r\n    // Filter absent students\r\n    const absentList = studentList.filter(\r\n      ({ Name: id1 }) => !attendance.some(({ Name: id2 }) => id2 === id1)\r\n    );\r\n\r\n    setAttendanceList(attendance);\r\n    setAbsentList(absentList);\r\n    setUpdateData(true);\r\n  };\r\n\r\n  const removeStudentHandler = (e, student) => {\r\n    let checked = e.target.checked;\r\n    let removeList = [...removeStudents];\r\n\r\n    if (checked) {\r\n      removeList = removeList.filter((item) => item.Name !== student.Name);\r\n      setRemoveStudents(removeList);\r\n    } else {\r\n      removeList = [...removeStudents, student];\r\n      setRemoveStudents(removeList);\r\n    }\r\n  };\r\n\r\n  const addStudentHandler = (e, student) => {\r\n    let checked = e.target.checked;\r\n    let addList = [...addStudents];\r\n\r\n    if (checked) {\r\n      addList = [...addStudents, student];\r\n      setAddStudents(addList);\r\n    } else {\r\n      addList = addList.filter((item) => item.Name !== student.Name);\r\n      setAddStudents(addList);\r\n    }\r\n  };\r\n\r\n  const saveHandler = () => {\r\n    // Add Student\r\n    addStudents.forEach((student) => {\r\n      const saveParams = {\r\n        TableName: TABLE_NAME,\r\n        Item: {\r\n          Date: selectedDate,\r\n          Name: student.Name,\r\n          Class: selectedClass,\r\n          \"Student ID\": student.ID,\r\n        },\r\n      };\r\n\r\n      dynamodbClient.put(saveParams, function (err, data) {\r\n        if (err) {\r\n          console.error(\r\n            \"Unable to add item. Error JSON:\",\r\n            JSON.stringify(err, null, 2)\r\n          );\r\n        } else {\r\n          console.log(\"Added item:\", JSON.stringify(data, null, 2));\r\n        }\r\n      });\r\n    });\r\n\r\n    //Remove Student\r\n    removeStudents.forEach((student) => {\r\n      const deleteParams = {\r\n        TableName: TABLE_NAME,\r\n        Key: {\r\n          Date: student.Date,\r\n          Name: student.Name,\r\n        },\r\n      };\r\n\r\n      dynamodbClient.delete(deleteParams, function (err, data) {\r\n        if (err) {\r\n          console.error(\r\n            \"Unable to delete item. Error JSON:\",\r\n            JSON.stringify(err, null, 2)\r\n          );\r\n        } else {\r\n          console.log(\"DeleteItem succeeded:\", JSON.stringify(data, null, 2));\r\n        }\r\n      });\r\n    });\r\n\r\n    setTimeout(() => {\r\n      setIsSave(false);\r\n      setEditStatus(false);\r\n      setAddStudents([]);\r\n      setRemoveStudents([]);\r\n      afterSaveHandler();\r\n    }, 1500);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container className=\"selected-attendance text-center\" fluid>\r\n        <Row>\r\n          <Col>\r\n            <h3\r\n              style={{ fontWeight: \"bold\", color: \"white\", textAlign: \"left\" }}\r\n            >\r\n              {selectedDate}\r\n            </h3>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            {isLoading ? (\r\n              <Spinner animation=\"border\" style={{ color: \"white\" }} />\r\n            ) : (\r\n              <ListGroup>\r\n                <h3 style={{ color: \"white\" }}>Attended</h3>\r\n                {attendanceList.map((student) => {\r\n                  return (\r\n                    <ListGroup.Item key={student.Name}>\r\n                      <Row>\r\n                        <Col\r\n                          xl={6}\r\n                          lg={6}\r\n                          md={6}\r\n                          sm={6}\r\n                          xs={6}\r\n                          style={{\r\n                            fontWeight: \"bold\",\r\n                            fontSize: \"calc(0.5rem + 0.6vw)\",\r\n                            color: \"#535353\",\r\n                            textAlign: \"left\",\r\n                          }}\r\n                        >\r\n                          {student.Name}\r\n                        </Col>\r\n                        <Col\r\n                          xl={3}\r\n                          lg={3}\r\n                          md={3}\r\n                          sm={3}\r\n                          xs={3}\r\n                          style={{\r\n                            fontWeight: \"bold\",\r\n                            fontSize: \"calc(0.5rem + 0.6vw)\",\r\n                            color: \"#535353\",\r\n                            textAlign: \"right\",\r\n                          }}\r\n                        >\r\n                          {student.Temperature} °C\r\n                        </Col>\r\n                        {editStatus === true && (\r\n                          <Col xl={3} lg={3} md={3} sm={3} xs={3}>\r\n                            <Form.Check\r\n                              type=\"checkbox\"\r\n                              defaultChecked\r\n                              onChange={(e) => {\r\n                                removeStudentHandler(e, student);\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                        )}\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  );\r\n                })}\r\n                <h3 style={{ color: \"white\", marginTop: \"5px\" }}>Absent</h3>\r\n                {absentList.map((student) => {\r\n                  return (\r\n                    <ListGroup.Item key={student.Name}>\r\n                      <Row>\r\n                        <Col\r\n                          xl={6}\r\n                          lg={6}\r\n                          md={6}\r\n                          sm={6}\r\n                          xs={6}\r\n                          style={{\r\n                            fontWeight: \"bold\",\r\n                            fontSize: \"calc(0.5rem + 0.6vw)\",\r\n                            color: \"#535353\",\r\n                            textAlign: \"left\",\r\n                          }}\r\n                        >\r\n                          {student.Name}\r\n                        </Col>\r\n                        <Col\r\n                          xl={3}\r\n                          lg={3}\r\n                          md={3}\r\n                          sm={3}\r\n                          xs={3}\r\n                          style={{\r\n                            fontWeight: \"bold\",\r\n                            fontSize: \"calc(0.5rem + 0.6vw)\",\r\n                            color: \"#535353\",\r\n                            textAlign: \"right\",\r\n                          }}\r\n                        >\r\n                          {student.ID}\r\n                        </Col>\r\n                        {editStatus === true && (\r\n                          <Col xl={3} lg={3} md={3} sm={3} xs={3}>\r\n                            <Form.Check\r\n                              type=\"checkbox\"\r\n                              onChange={(e) => {\r\n                                addStudentHandler(e, student);\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                        )}\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  );\r\n                })}\r\n              </ListGroup>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n\r\n        {editStatus === false && (\r\n          <>\r\n            <Row>\r\n              <Col>\r\n                <Button\r\n                  style={{\r\n                    width: \"100%\",\r\n                    backgroundColor: \"white\",\r\n                    color: \"#535353\",\r\n                    fontWeight: \"bold\",\r\n                    marginTop: \"10px\",\r\n                    borderColor: \"#007bff\",\r\n                  }}\r\n                  onClick={() => setEditStatus(true)}\r\n                >\r\n                  Edit\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <CsvDownload\r\n                  data={attendanceList}\r\n                  filename={selectedDate + \" \" + selectedClass + \".csv\"}\r\n                  style={{\r\n                    width: \"100%\",\r\n                    backgroundColor: \"white\",\r\n                    color: \"#535353\",\r\n                    fontWeight: \"bold\",\r\n                    marginTop: \"10px\",\r\n                    borderRadius: \"5px\",\r\n                    borderColor: \"#007bff\",\r\n                    padding: \".375rem .75rem\",\r\n                  }}\r\n                >\r\n                  Download\r\n                </CsvDownload>\r\n              </Col>\r\n            </Row>\r\n          </>\r\n        )}\r\n\r\n        {editStatus === true && (\r\n          <>\r\n            <Row>\r\n              <Col>\r\n                <Button\r\n                  disabled={\r\n                    removeStudents.length === 0 && addStudents.length === 0\r\n                  }\r\n                  style={{\r\n                    width: \"100%\",\r\n                    backgroundColor: \"white\",\r\n                    color: \"#535353\",\r\n                    fontWeight: \"bold\",\r\n                    marginTop: \"10px\",\r\n                    borderColor: \"#007bff\",\r\n                  }}\r\n                  onClick={() => {\r\n                    setIsSave(true);\r\n                    saveHandler();\r\n                  }}\r\n                >\r\n                  {isSave ? (\r\n                    <Spinner\r\n                      as=\"span\"\r\n                      animation=\"border\"\r\n                      size=\"sm\"\r\n                      role=\"status\"\r\n                      aria-hidden=\"true\"\r\n                    />\r\n                  ) : (\r\n                    <span>Save</span>\r\n                  )}\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Button\r\n                  style={{\r\n                    width: \"100%\",\r\n                    backgroundColor: \"white\",\r\n                    color: \"#535353\",\r\n                    fontWeight: \"bold\",\r\n                    marginTop: \"10px\",\r\n                    borderColor: \"#007bff\",\r\n                  }}\r\n                  onClick={() => {\r\n                    setAddStudents([]);\r\n                    setRemoveStudents([]);\r\n                    setEditStatus(false);\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </>\r\n        )}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SelectedAttendance;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Row, Col, Container, ListGroup, Spinner } from \"react-bootstrap\";\r\n\r\nconst StudentList = () => {\r\n  const [studentList, setStudentList] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n\r\n    const getData = async () => {\r\n      const response = await fetch(\"/sheet/student\").then((res) => res.json()); // Get Student List\r\n      if (mounted) {\r\n        setStudentList(response);\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    getData();\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Container className=\"text-center studentlist\">\r\n        <Row>\r\n          <Col>\r\n            <h3\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"white\",\r\n                textAlign: \"left\",\r\n                marginTop: \"10px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Student List\r\n            </h3>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            {isLoading ? (\r\n              <Spinner animation=\"border\" style={{ color: \"white\" }} />\r\n            ) : (\r\n              <ListGroup>\r\n                {studentList.map((student) => {\r\n                  return (\r\n                    <ListGroup.Item key={student[1]}>\r\n                      <Row>\r\n                        <Col\r\n                          xl={9}\r\n                          lg={9}\r\n                          md={9}\r\n                          sm={9}\r\n                          xs={9}\r\n                          style={{\r\n                            textAlign: \"left\",\r\n                            fontSize: \"calc(0.5rem + 0.6vw)\",\r\n                            fontWeight: \"bold\",\r\n                            color: \"#535353\",\r\n                          }}\r\n                        >\r\n                          {student[0]}\r\n                        </Col>\r\n                        <Col\r\n                          xl={3}\r\n                          lg={3}\r\n                          md={3}\r\n                          sm={3}\r\n                          xs={3}\r\n                          style={{\r\n                            textAlign: \"right\",\r\n                            fontSize: \"calc(0.5rem + 0.6vw)\",\r\n                            fontWeight: \"bold\",\r\n                            color: \"#535353\",\r\n                          }}\r\n                        >\r\n                          {student[1]}\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  );\r\n                })}\r\n              </ListGroup>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StudentList;\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Row, Col, Container, Button, Modal, Toast } from \"react-bootstrap\";\r\nimport { VictoryPie, VictoryLabel } from \"victory\";\r\nimport Skeleton, { SkeletonTheme } from \"react-loading-skeleton\";\r\nimport SelectedAttendance from \"./SelectedAttendance\";\r\nimport StudentList from \"../StudentList\";\r\n\r\nconst LatestAttendance = (props) => {\r\n  const attendanceArray = props.attendance;\r\n  const isLoading = props.isLoading;\r\n  const setUpdateData = props.setUpdateData;\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [classTitle, setClassTitle] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n  const [option, setOption] = useState(\"\");\r\n\r\n  const selectHandler = (e) => {\r\n    axios.post(\"/sheet/class\", e.target.id);\r\n\r\n    setShowModal(true);\r\n    setDate(e.currentTarget.value);\r\n    setClassTitle(e.target.id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container className=\"latest-attendance text-center\" fluid>\r\n        <h3 style={{ color: \"white\", textAlign: \"left\" }}>Latest Attendance</h3>\r\n\r\n        {isLoading ? (\r\n          <Row style={{ marginBottom: \"10px\", textAlign: \"left\" }}>\r\n            <Col>\r\n              <SkeletonTheme color=\"#2e3896\" highlightColor=\"#1f276e\">\r\n                <Skeleton\r\n                  count={1}\r\n                  height={30}\r\n                  width={`60%`}\r\n                  style={{ marginBottom: \"10px\" }}\r\n                />\r\n                <Skeleton\r\n                  count={3}\r\n                  height={30}\r\n                  width={`100%`}\r\n                  style={{ marginBottom: \"10px\" }}\r\n                />\r\n                <Skeleton count={1} height={30} width={`80%`} />\r\n              </SkeletonTheme>\r\n            </Col>\r\n          </Row>\r\n        ) : (\r\n          <Row>\r\n            {attendanceArray.map((result) => {\r\n              return (\r\n                <Col xl={4} lg={4} md={4} sm={12} xs={12} key={result.Class}>\r\n                  <Toast\r\n                    style={{\r\n                      backgroundColor: \"white\",\r\n                      borderRadius: \"10px\",\r\n                      marginBottom: \"10px\",\r\n                    }}\r\n                  >\r\n                    <Toast.Header>\r\n                      <strong className=\"mr-auto\">{result.Date} </strong>\r\n                      <strong>{result.Class}</strong>\r\n                    </Toast.Header>\r\n                    <Toast.Body>\r\n                      <svg viewBox=\"0 0 400 400\">\r\n                        <VictoryPie\r\n                          standalone={false}\r\n                          padAngle={0}\r\n                          innerRadius={110}\r\n                          width={400}\r\n                          height={400}\r\n                          data={[\r\n                            { key: \"\", y: result.Present },\r\n                            {\r\n                              key: \"\",\r\n                              y: result.Total_Students - result.Present,\r\n                            },\r\n                          ]}\r\n                          colorScale={[\"#3e4ccd\", \"#EEEEEE\"]}\r\n                          style={{ labels: { display: \"none\" } }}\r\n                        />\r\n                        <VictoryLabel\r\n                          textAnchor=\"middle\"\r\n                          style={{\r\n                            fontSize: \"50px\",\r\n                            fontWeight: \"bold\",\r\n                            fill: \"#535353\",\r\n                          }}\r\n                          x={200}\r\n                          y={200}\r\n                          text={result.Present + \" / \" + result.Total_Students}\r\n                        />\r\n                      </svg>\r\n\r\n                      <Button\r\n                        id={result.Class}\r\n                        value={result.Date}\r\n                        onClick={(e) => {\r\n                          selectHandler(e);\r\n                        }}\r\n                        style={{\r\n                          backgroundColor: \"#3e4ccd\",\r\n                          width: \"90%\",\r\n                          fontWeight: \"bold\",\r\n                        }}\r\n                      >\r\n                        Explore\r\n                      </Button>\r\n                    </Toast.Body>\r\n                  </Toast>\r\n                </Col>\r\n              );\r\n            })}\r\n          </Row>\r\n        )}\r\n      </Container>\r\n      <Modal\r\n        className=\"text-center\"\r\n        size=\"lg\"\r\n        show={showModal}\r\n        onHide={() => {\r\n          setShowModal(false);\r\n          setOption(\"\");\r\n        }}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>\r\n            <h3 style={{ fontWeight: \"bold\", color: \"#535353\" }}>\r\n              {classTitle}\r\n            </h3>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Row>\r\n            <Col>\r\n              <Button\r\n                xl={6}\r\n                lg={6}\r\n                md={6}\r\n                sm={6}\r\n                xs={6}\r\n                style={{\r\n                  width: \"100%\",\r\n                  backgroundColor: \"#3e4ccd\",\r\n                  fontWeight: \"bold\",\r\n                }}\r\n                onClick={() => setOption(\"View\")}\r\n              >\r\n                View\r\n              </Button>\r\n            </Col>\r\n            <Col xl={6} lg={6} md={6} sm={6} xs={6}>\r\n              <Button\r\n                style={{\r\n                  width: \"100%\",\r\n                  backgroundColor: \"#3e4ccd\",\r\n                  fontWeight: \"bold\",\r\n                }}\r\n                onClick={() => setOption(\"Student\")}\r\n              >\r\n                Students\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              {option === \"View\" && (\r\n                <SelectedAttendance date={date} setUpdateData={setUpdateData} />\r\n              )}\r\n              {option === \"Student\" && <StudentList />}\r\n            </Col>\r\n          </Row>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LatestAttendance;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Container,\r\n  Toast,\r\n  Button,\r\n  OverlayTrigger,\r\n  Popover,\r\n  ListGroup,\r\n  ButtonGroup,\r\n} from \"react-bootstrap\";\r\nimport Skeleton, { SkeletonTheme } from \"react-loading-skeleton\";\r\n\r\nconst StudentMatters = (props) => {\r\n  const temperatureMatterArray = props.temperatureMatter;\r\n  const lowAttendanceMatterArray = props.lowAttendanceMatter;\r\n  const isLoading = props.isLoading;\r\n\r\n  const [absentList, setAbsentList] = useState([]);\r\n  const [selectedList, setSelectedList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    let classArray = [];\r\n    let absentArray = [];\r\n    let absentList = [];\r\n\r\n    const processData = () => {\r\n      lowAttendanceMatterArray.forEach((student) => {\r\n        classArray.push(student.Class);\r\n      });\r\n\r\n      classArray = [...new Set(classArray)];\r\n\r\n      classArray.forEach((classTitle) => {\r\n        absentArray = lowAttendanceMatterArray.filter((res) =>\r\n          res.Class.includes(classTitle)\r\n        );\r\n        absentList.push({\r\n          Class: classTitle,\r\n          Student: absentArray,\r\n        });\r\n      });\r\n\r\n      if (mounted) {\r\n        setAbsentList(absentList);\r\n      }\r\n    };\r\n\r\n    processData();\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  }, [lowAttendanceMatterArray]);\r\n\r\n  const clickHandler = (e) => {\r\n    let selectedList = [];\r\n\r\n    selectedList = lowAttendanceMatterArray.filter((res) =>\r\n      res.Class.includes(e.target.value)\r\n    );\r\n\r\n    setSelectedList(selectedList);\r\n  };\r\n\r\n  const popover = (\r\n    <Popover style={{ width: \"100%\" }}>\r\n      <Popover.Title as=\"h3\" style={{ fontWeight: \"bold\", color: \"#535353\" }}>\r\n        Students\r\n      </Popover.Title>\r\n      <Popover.Content style={{ backgroundColor: \"#3e4ccd\" }}>\r\n        <ListGroup>\r\n          {selectedList.map((result, index) => {\r\n            return (\r\n              <ListGroup.Item key={index}>\r\n                <Row>\r\n                  <Col\r\n                    xl={8}\r\n                    lg={8}\r\n                    md={8}\r\n                    sm={8}\r\n                    xs={8}\r\n                    style={{\r\n                      textAlign: \"left\",\r\n                      fontWeight: \"bold\",\r\n                      color: \"#535353\",\r\n                    }}\r\n                  >\r\n                    {result.Name}\r\n                  </Col>\r\n                  <Col\r\n                    xl={4}\r\n                    lg={4}\r\n                    md={4}\r\n                    sm={4}\r\n                    xs={4}\r\n                    style={{\r\n                      textAlign: \"right\",\r\n                      fontWeight: \"bold\",\r\n                      color: \"#535353\",\r\n                    }}\r\n                  >\r\n                    {result.ID}\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n            );\r\n          })}\r\n        </ListGroup>\r\n      </Popover.Content>\r\n    </Popover>\r\n  );\r\n\r\n  return (\r\n    <Container className=\"student-matters text-center\" fluid>\r\n      <h3 style={{ color: \"white\", textAlign: \"left\" }}>Student Matters</h3>\r\n      <Row style={{ marginBottom: \"10px\" }}>\r\n        <Col xl={6} lg={6} md={6} sm={12} xs={12}>\r\n          <h3 style={{ color: \"white\", fontSize: \"22px\", textAlign: \"left\" }}>\r\n            High Temperature\r\n          </h3>\r\n\r\n          {isLoading ? (\r\n            <Row style={{ marginBottom: \"10px\", textAlign: \"left\" }}>\r\n              <Col>\r\n                <SkeletonTheme color=\"#2e3896\" highlightColor=\"#1f276e\">\r\n                  <Skeleton\r\n                    count={1}\r\n                    height={30}\r\n                    width={`60%`}\r\n                    style={{ marginBottom: \"10px\" }}\r\n                  />\r\n                  <Skeleton\r\n                    count={3}\r\n                    height={30}\r\n                    width={`100%`}\r\n                    style={{ marginBottom: \"10px\" }}\r\n                  />\r\n                  <Skeleton count={1} height={30} width={`80%`} />\r\n                </SkeletonTheme>\r\n              </Col>\r\n            </Row>\r\n          ) : (\r\n            <>\r\n              {temperatureMatterArray.length === 0 && (\r\n                <h3 style={{ color: \"white\" }}>No Data</h3>\r\n              )}\r\n              {temperatureMatterArray.length > 0 && (\r\n                <Row style={{ marginBottom: \"10px\" }}>\r\n                  {temperatureMatterArray.map((result, index) => {\r\n                    return (\r\n                      <Col xl={12} lg={12} md={12} sm={12} xs={12} key={index}>\r\n                        <Toast style={{ marginBottom: \"5px\" }}>\r\n                          <Toast.Header>\r\n                            <strong className=\"mr-auto\">{result.Name}</strong>\r\n                            <strong>{result.Class}</strong>\r\n                          </Toast.Header>\r\n                          <Toast.Body\r\n                            style={{\r\n                              color: \"#535353\",\r\n                              fontWeight: \"bold\",\r\n                              textAlign: \"left\",\r\n                            }}\r\n                          >\r\n                            {result.Temperature} °C &emsp; {result.Date}\r\n                          </Toast.Body>\r\n                        </Toast>\r\n                      </Col>\r\n                    );\r\n                  })}\r\n                </Row>\r\n              )}\r\n            </>\r\n          )}\r\n        </Col>\r\n\r\n        <Col xl={6} lg={6} md={6} sm={12} xs={12}>\r\n          <h3 style={{ color: \"white\", fontSize: \"22px\", textAlign: \"left\" }}>\r\n            Low Attendance\r\n          </h3>\r\n          {isLoading ? (\r\n            <Row style={{ marginBottom: \"10px\", textAlign: \"left\" }}>\r\n              <Col>\r\n                <SkeletonTheme color=\"#2e3896\" highlightColor=\"#1f276e\">\r\n                  <Skeleton\r\n                    count={1}\r\n                    height={30}\r\n                    width={`60%`}\r\n                    style={{ marginBottom: \"10px\" }}\r\n                  />\r\n                  <Skeleton\r\n                    count={3}\r\n                    height={30}\r\n                    width={`100%`}\r\n                    style={{ marginBottom: \"10px\" }}\r\n                  />\r\n                  <Skeleton count={1} height={30} width={`80%`} />\r\n                </SkeletonTheme>\r\n              </Col>\r\n            </Row>\r\n          ) : (\r\n            <>\r\n              {absentList.length === 0 && (\r\n                <h3 style={{ color: \"white\" }}>No Data</h3>\r\n              )}\r\n              {absentList.length > 0 && (\r\n                <Row>\r\n                  {absentList.map((result, index) => {\r\n                    return (\r\n                      <Col xl={12} lg={12} md={12} sm={12} xs={12} key={index}>\r\n                        <OverlayTrigger\r\n                          trigger=\"click\"\r\n                          placement=\"bottom\"\r\n                          overlay={popover}\r\n                        >\r\n                          <ButtonGroup\r\n                            className=\"mb-2\"\r\n                            style={{ width: \"100%\" }}\r\n                          >\r\n                            <Button\r\n                              style={{\r\n                                color: \"#535353\",\r\n                                backgroundColor: \"white\",\r\n                                fontWeight: \"bold\",\r\n                                borderColor: \"white\",\r\n                              }}\r\n                              value={result.Class}\r\n                              onClick={(e) => clickHandler(e)}\r\n                            >\r\n                              {result.Class}\r\n                            </Button>\r\n                            <Button\r\n                              style={{\r\n                                color: \"white\",\r\n                                backgroundColor: \"#CDBF3E\",\r\n                                fontWeight: \"bold\",\r\n                                borderColor: \"#CDBF3E\",\r\n                              }}\r\n                              value={result.Class}\r\n                              onClick={(e) => clickHandler(e)}\r\n                            >\r\n                              {result.Student.length} ALERTS\r\n                            </Button>\r\n                          </ButtonGroup>\r\n                        </OverlayTrigger>\r\n                      </Col>\r\n                    );\r\n                  })}\r\n                </Row>\r\n              )}\r\n            </>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default StudentMatters;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Container,\r\n  ListGroup,\r\n  Spinner,\r\n  Button,\r\n  Form,\r\n} from \"react-bootstrap\";\r\nimport CsvDownload from \"react-json-to-csv\";\r\nimport AWS from \"aws-sdk\";\r\n\r\nconst AttendanceList = (props) => {\r\n  const [attendanceArray, setAttendanceArray] = useState([]);\r\n  const [attendanceList, setAttendanceList] = useState([]);\r\n  const [dates, setDates] = useState([]);\r\n  const [showAttendance, setShowAttendance] = useState(false);\r\n  const [selectedDate, setSelectedDate] = useState(\"\");\r\n  const [selectedClass, setSelectedClass] = useState(\"\");\r\n  const [studentList, setstudentList] = useState([]);\r\n  const [absentList, setAbsentList] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isSave, setIsSave] = useState(false);\r\n  const [editStatus, setEditStatus] = useState(false);\r\n  const [removeStudents, setRemoveStudents] = useState([]);\r\n  const [addStudents, setAddStudents] = useState([]);\r\n\r\n  const setUpdateData = props.setUpdateData;\r\n\r\n  // AWS DynamoDB Config\r\n  AWS.config.update({\r\n    region: \"ap-southeast-1\",\r\n    accessKeyId: \"AKIAVT4QMHKTJR6VFAEN\",\r\n    secretAccessKey: \"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\",\r\n  });\r\n\r\n  const dynamodbClient = new AWS.DynamoDB.DocumentClient();\r\n  const TABLE_NAME = \"March\";\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    let dateArray = [];\r\n    let studentList = [];\r\n\r\n    const getData = async () => {\r\n      const response = await fetch(\"/aws/api\").then((res) => res.json()); // Get Student Attendance\r\n      const studentArray = await fetch(\"/sheet/student\").then((res) =>\r\n        res.json()\r\n      ); // Get Student List\r\n\r\n      // Convert array to object\r\n      studentArray.forEach((res) => {\r\n        studentList.push({\r\n          Name: res[0],\r\n          ID: res[1],\r\n        });\r\n      });\r\n\r\n      response.sort((a, b) => {\r\n        // Sort to latest date\r\n        return new Date(b.Date) - new Date(a.Date);\r\n      });\r\n\r\n      response.forEach((data) => {\r\n        dateArray.push(data.Date.split(\" \")[0]);\r\n      });\r\n\r\n      dateArray = [...new Set(dateArray)]; // Remove Duplicates\r\n\r\n      if (mounted) {\r\n        setAttendanceArray(response);\r\n        setDates(dateArray);\r\n        setstudentList(studentList);\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    getData();\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const afterSaveHandler = async () => {\r\n    const response = await fetch(\"/aws/api\").then((res) => res.json()); // Get Student Attendance\r\n\r\n    response.sort((a, b) => {\r\n      // Sort to latest date\r\n      return new Date(b.Date) - new Date(a.Date);\r\n    });\r\n\r\n    const attendance = response.filter(\r\n      (\r\n        res // Filter Attendance By Selected Date\r\n      ) => res.Date.includes(selectedDate)\r\n    );\r\n\r\n    // Filter absent students\r\n    const absentList = studentList.filter(\r\n      ({ Name: id1 }) => !attendance.some(({ Name: id2 }) => id2 === id1)\r\n    );\r\n\r\n    setAttendanceList(attendance);\r\n    setAbsentList(absentList);\r\n    setUpdateData(true);\r\n  };\r\n\r\n  const getAttendanceList = (date) => {\r\n    let absentList;\r\n    const selectedDate = date;\r\n    const attendance = attendanceArray.filter(\r\n      (\r\n        res // Filter Attendance By Selected Date\r\n      ) => res.Date.includes(selectedDate)\r\n    );\r\n\r\n    // Filter absent students\r\n    absentList = studentList.filter(\r\n      ({ Name: id1 }) => !attendance.some(({ Name: id2 }) => id2 === id1)\r\n    );\r\n\r\n    setSelectedClass(attendance[0].Class);\r\n    setSelectedDate(date);\r\n    setAttendanceList(attendance);\r\n    setAbsentList(absentList);\r\n    setShowAttendance(true);\r\n  };\r\n\r\n  const removeStudentHandler = (e, student) => {\r\n    let checked = e.target.checked;\r\n    let removeList = [...removeStudents];\r\n\r\n    if (checked) {\r\n      removeList = removeList.filter((item) => item.Name !== student.Name);\r\n      setRemoveStudents(removeList);\r\n    } else {\r\n      removeList = [...removeStudents, student];\r\n      setRemoveStudents(removeList);\r\n    }\r\n  };\r\n\r\n  const addStudentHandler = (e, student) => {\r\n    let checked = e.target.checked;\r\n    let addList = [...addStudents];\r\n\r\n    if (checked) {\r\n      addList = [...addStudents, student];\r\n      setAddStudents(addList);\r\n    } else {\r\n      addList = addList.filter((item) => item.Name !== student.Name);\r\n      setAddStudents(addList);\r\n    }\r\n  };\r\n\r\n  const saveHandler = () => {\r\n    // Add Student\r\n    addStudents.forEach((student) => {\r\n      const saveParams = {\r\n        TableName: TABLE_NAME,\r\n        Item: {\r\n          Date: selectedDate,\r\n          Name: student.Name,\r\n          Class: selectedClass,\r\n          \"Student ID\": student.ID,\r\n        },\r\n      };\r\n\r\n      dynamodbClient.put(saveParams, function (err, data) {\r\n        if (err) {\r\n          console.error(\r\n            \"Unable to add item. Error JSON:\",\r\n            JSON.stringify(err, null, 2)\r\n          );\r\n        } else {\r\n          console.log(\"Added item:\", JSON.stringify(data, null, 2));\r\n        }\r\n      });\r\n    });\r\n\r\n    //Remove Student\r\n    removeStudents.forEach((student) => {\r\n      const deleteParams = {\r\n        TableName: TABLE_NAME,\r\n        Key: {\r\n          Date: student.Date,\r\n          Name: student.Name,\r\n        },\r\n      };\r\n\r\n      dynamodbClient.delete(deleteParams, function (err, data) {\r\n        if (err) {\r\n          console.error(\r\n            \"Unable to delete item. Error JSON:\",\r\n            JSON.stringify(err, null, 2)\r\n          );\r\n        } else {\r\n          console.log(\"DeleteItem succeeded:\", JSON.stringify(data, null, 2));\r\n        }\r\n      });\r\n    });\r\n\r\n    setTimeout(() => {\r\n      setIsSave(false);\r\n      setEditStatus(false);\r\n      setAddStudents([]);\r\n      setRemoveStudents([]);\r\n      afterSaveHandler();\r\n    }, 1500);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container className=\"text-center attendancelist\">\r\n        {showAttendance ? (\r\n          <>\r\n            <Row>\r\n              <Col>\r\n                <h3\r\n                  style={{\r\n                    fontWeight: \"bold\",\r\n                    color: \"white\",\r\n                    textAlign: \"left\",\r\n                    marginTop: \"10px\",\r\n                    marginBottom: \"10px\",\r\n                  }}\r\n                >\r\n                  {selectedDate}\r\n                </h3>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <ListGroup>\r\n                  <h3 style={{ color: \"white\" }}>Attended</h3>\r\n                  {attendanceList.map((student) => {\r\n                    return (\r\n                      <ListGroup.Item key={student.Name}>\r\n                        <Row>\r\n                          <Col\r\n                            xl={6}\r\n                            lg={6}\r\n                            md={6}\r\n                            sm={6}\r\n                            xs={6}\r\n                            style={{\r\n                              fontWeight: \"bold\",\r\n                              fontSize: \"calc(0.5rem + 0.6vw)\",\r\n                              color: \"#535353\",\r\n                              textAlign: \"left\",\r\n                            }}\r\n                          >\r\n                            {student.Name}\r\n                          </Col>\r\n                          <Col\r\n                            xl={3}\r\n                            lg={3}\r\n                            md={3}\r\n                            sm={3}\r\n                            xs={3}\r\n                            style={{\r\n                              fontWeight: \"bold\",\r\n                              fontSize: \"calc(0.5rem + 0.6vw)\",\r\n                              color: \"#535353\",\r\n                              textAlign: \"right\",\r\n                            }}\r\n                          >\r\n                            {student.Temperature} °C\r\n                          </Col>\r\n                          {editStatus === true && (\r\n                            <Col xl={3} lg={3} md={3} sm={3} xs={3}>\r\n                              <Form.Check\r\n                                type=\"checkbox\"\r\n                                defaultChecked\r\n                                onChange={(e) => {\r\n                                  removeStudentHandler(e, student);\r\n                                }}\r\n                              />\r\n                            </Col>\r\n                          )}\r\n                        </Row>\r\n                      </ListGroup.Item>\r\n                    );\r\n                  })}\r\n                  <h3 style={{ color: \"white\", marginTop: \"5px\" }}>Absent</h3>\r\n                  {absentList.map((student) => {\r\n                    return (\r\n                      <ListGroup.Item key={student.Name}>\r\n                        <Row>\r\n                          <Col\r\n                            xl={6}\r\n                            lg={6}\r\n                            md={6}\r\n                            sm={6}\r\n                            xs={6}\r\n                            style={{\r\n                              fontWeight: \"bold\",\r\n                              fontSize: \"calc(0.5rem + 0.6vw)\",\r\n                              color: \"#535353\",\r\n                              textAlign: \"left\",\r\n                            }}\r\n                          >\r\n                            {student.Name}\r\n                          </Col>\r\n                          <Col\r\n                            xl={3}\r\n                            lg={3}\r\n                            md={3}\r\n                            sm={3}\r\n                            xs={3}\r\n                            style={{\r\n                              fontWeight: \"bold\",\r\n                              fontSize: \"calc(0.5rem + 0.6vw)\",\r\n                              color: \"#535353\",\r\n                              textAlign: \"right\",\r\n                            }}\r\n                          >\r\n                            {student.ID}\r\n                          </Col>\r\n                          {editStatus === true && (\r\n                            <Col xl={3} lg={3} md={3} sm={3} xs={3}>\r\n                              <Form.Check\r\n                                type=\"checkbox\"\r\n                                onChange={(e) => {\r\n                                  addStudentHandler(e, student);\r\n                                }}\r\n                              />\r\n                            </Col>\r\n                          )}\r\n                        </Row>\r\n                      </ListGroup.Item>\r\n                    );\r\n                  })}\r\n                </ListGroup>\r\n              </Col>\r\n            </Row>\r\n\r\n            {editStatus === false && (\r\n              <>\r\n                <Row>\r\n                  <Col>\r\n                    <Button\r\n                      style={{\r\n                        width: \"100%\",\r\n                        backgroundColor: \"white\",\r\n                        color: \"#535353\",\r\n                        fontWeight: \"bold\",\r\n                        marginTop: \"10px\",\r\n                      }}\r\n                      onClick={() => setEditStatus(true)}\r\n                    >\r\n                      Edit\r\n                    </Button>\r\n                  </Col>\r\n                  <Col>\r\n                    <CsvDownload\r\n                      data={attendanceList}\r\n                      filename={selectedDate + \" \" + selectedClass + \".csv\"}\r\n                      style={{\r\n                        width: \"100%\",\r\n                        backgroundColor: \"white\",\r\n                        color: \"#535353\",\r\n                        fontWeight: \"bold\",\r\n                        marginTop: \"10px\",\r\n                        borderRadius: \"5px\",\r\n                        borderColor: \"#007bff\",\r\n                        padding: \".375rem .75rem\",\r\n                      }}\r\n                    >\r\n                      Download\r\n                    </CsvDownload>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <Button\r\n                      style={{\r\n                        width: \"100%\",\r\n                        backgroundColor: \"white\",\r\n                        color: \"#535353\",\r\n                        fontWeight: \"bold\",\r\n                        marginTop: \"10px\",\r\n                      }}\r\n                      onClick={() => setShowAttendance(false)}\r\n                    >\r\n                      Back\r\n                    </Button>\r\n                  </Col>\r\n                </Row>\r\n              </>\r\n            )}\r\n            {editStatus === true && (\r\n              <>\r\n                <Row>\r\n                  <Col>\r\n                    <Button\r\n                      disabled={\r\n                        removeStudents.length === 0 && addStudents.length === 0\r\n                      }\r\n                      style={{\r\n                        width: \"100%\",\r\n                        backgroundColor: \"white\",\r\n                        color: \"#535353\",\r\n                        fontWeight: \"bold\",\r\n                        marginTop: \"10px\",\r\n                        borderColor: \"#007bff\",\r\n                      }}\r\n                      onClick={() => {\r\n                        setIsSave(true);\r\n                        saveHandler();\r\n                      }}\r\n                    >\r\n                      {isSave ? (\r\n                        <Spinner\r\n                          as=\"span\"\r\n                          animation=\"border\"\r\n                          size=\"sm\"\r\n                          role=\"status\"\r\n                          aria-hidden=\"true\"\r\n                        />\r\n                      ) : (\r\n                        <span>Save</span>\r\n                      )}\r\n                    </Button>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <Button\r\n                      style={{\r\n                        width: \"100%\",\r\n                        backgroundColor: \"white\",\r\n                        color: \"#535353\",\r\n                        fontWeight: \"bold\",\r\n                        marginTop: \"10px\",\r\n                        borderColor: \"#007bff\",\r\n                      }}\r\n                      onClick={() => {\r\n                        setAddStudents([]);\r\n                        setRemoveStudents([]);\r\n                        setEditStatus(false);\r\n                      }}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                  </Col>\r\n                </Row>\r\n              </>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Row>\r\n              <Col>\r\n                <h3\r\n                  style={{\r\n                    fontWeight: \"bold\",\r\n                    color: \"white\",\r\n                    textAlign: \"left\",\r\n                    marginTop: \"10px\",\r\n                    marginBottom: \"10px\",\r\n                  }}\r\n                >\r\n                  Attendance List\r\n                </h3>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                {isLoading ? (\r\n                  <Spinner animation=\"border\" style={{ color: \"white\" }} />\r\n                ) : (\r\n                  <>\r\n                    {dates.length === 0 && (\r\n                      <h3 style={{ color: \"white\" }}>No Data</h3>\r\n                    )}\r\n                    {dates.length > 0 && (\r\n                      <ListGroup>\r\n                        {dates.map((date) => {\r\n                          return (\r\n                            <ListGroup.Item\r\n                              key={date}\r\n                              id={date}\r\n                              action\r\n                              onClick={(e) => getAttendanceList(e.target.id)}\r\n                              style={{ fontWeight: \"bold\", color: \"#535353\" }}\r\n                            >\r\n                              {date}\r\n                            </ListGroup.Item>\r\n                          );\r\n                        })}\r\n                      </ListGroup>\r\n                    )}\r\n                  </>\r\n                )}\r\n              </Col>\r\n            </Row>\r\n          </>\r\n        )}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AttendanceList;\r\n","import React, { useState } from \"react\";\r\nimport { Row, Col, Container, Button, Modal } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport Skeleton, { SkeletonTheme } from \"react-loading-skeleton\";\r\nimport AttendanceList from \"./AttendanceList\";\r\nimport StudentList from \"../StudentList\";\r\n\r\nconst Classes = (props) => {\r\n  const classArray = props.classes;\r\n  const isLoading = props.isLoading;\r\n  const setUpdateData = props.setUpdateData;\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [classTitle, setClassTitle] = useState(\"\");\r\n  const [option, setOption] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n      <Container className=\"classes text-center\" fluid>\r\n        <Row>\r\n          <Col>\r\n            <h3 style={{ color: \"white\", textAlign: \"left\" }}>Your Classes</h3>\r\n          </Col>\r\n        </Row>\r\n        {isLoading ? (\r\n          <Row style={{ marginBottom: \"10px\", textAlign: \"left\" }}>\r\n            <Col>\r\n              <SkeletonTheme color=\"#2e3896\" highlightColor=\"#1f276e\">\r\n                <Skeleton\r\n                  count={1}\r\n                  height={30}\r\n                  width={`60%`}\r\n                  style={{ marginBottom: \"10px\" }}\r\n                />\r\n                <Skeleton\r\n                  count={3}\r\n                  height={30}\r\n                  width={`100%`}\r\n                  style={{ marginBottom: \"10px\" }}\r\n                />\r\n                <Skeleton count={1} height={30} width={`80%`} />\r\n                <Skeleton\r\n                  count={1}\r\n                  height={30}\r\n                  width={`60%`}\r\n                  style={{ marginBottom: \"10px\" }}\r\n                />\r\n                <Skeleton\r\n                  count={3}\r\n                  height={30}\r\n                  width={`100%`}\r\n                  style={{ marginBottom: \"10px\" }}\r\n                />\r\n                <Skeleton count={1} height={30} width={`80%`} />\r\n              </SkeletonTheme>\r\n            </Col>\r\n          </Row>\r\n        ) : (\r\n          <Row>\r\n            {classArray.map((result) => {\r\n              return (\r\n                <Col\r\n                  xl={4}\r\n                  lg={4}\r\n                  md={4}\r\n                  sm={6}\r\n                  xs={6}\r\n                  key={result.properties.title}\r\n                >\r\n                  <Button\r\n                    size=\"lg\"\r\n                    block={true}\r\n                    style={{\r\n                      backgroundColor: \"white\",\r\n                      color: \"#535353\",\r\n                      marginBottom: \"20px\",\r\n                      width: \"100%\",\r\n                      height: \"10vh\",\r\n                      fontSize: \"calc(10px + 1.2vw)\",\r\n                      fontWeight: \"bold\",\r\n                      borderRadius: \"10px\",\r\n                    }}\r\n                    id={result.properties.title}\r\n                    onClick={(e) => {\r\n                      setShowModal(true);\r\n                      setClassTitle(e.target.id);\r\n                      axios.post(\"/sheet/class\", e.target.id);\r\n                    }}\r\n                  >\r\n                    {result.properties.title}\r\n                  </Button>\r\n                </Col>\r\n              );\r\n            })}\r\n          </Row>\r\n        )}\r\n      </Container>\r\n      <Modal\r\n        className=\"text-center\"\r\n        size=\"lg\"\r\n        show={showModal}\r\n        onHide={() => {\r\n          setShowModal(false);\r\n          setOption(\"\");\r\n        }}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>\r\n            <h3 style={{ fontWeight: \"bold\", color: \"#535353\" }}>\r\n              {classTitle}\r\n            </h3>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Row>\r\n            <Col>\r\n              <Button\r\n                xl={6}\r\n                lg={6}\r\n                md={6}\r\n                sm={6}\r\n                xs={6}\r\n                style={{\r\n                  width: \"100%\",\r\n                  backgroundColor: \"#3e4ccd\",\r\n                  fontWeight: \"bold\",\r\n                }}\r\n                onClick={() => setOption(\"Attendance\")}\r\n              >\r\n                Attendance\r\n              </Button>\r\n            </Col>\r\n            <Col xl={6} lg={6} md={6} sm={6} xs={6}>\r\n              <Button\r\n                style={{\r\n                  width: \"100%\",\r\n                  backgroundColor: \"#3e4ccd\",\r\n                  fontWeight: \"bold\",\r\n                }}\r\n                onClick={() => setOption(\"Student\")}\r\n              >\r\n                Students\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Col>\r\n              {option === \"Attendance\" && (\r\n                <AttendanceList setUpdateData={setUpdateData} />\r\n              )}\r\n              {option === \"Student\" && <StudentList />}\r\n            </Col>\r\n          </Row>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Classes;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Row, Col, Container } from \"react-bootstrap\";\r\n\r\nimport NavBar from \"./NavBar\";\r\nimport LatestAttendance from \"./LatestAttendance/LatestAttendance\";\r\nimport StudentMatters from \"./StudentMatters/StudentMatters\";\r\nimport Classes from \"./Classes/Classes\";\r\n\r\nconst Dashboard = () => {\r\n  const [classes, setClasses] = useState([]);\r\n  const [attendance, setAttendance] = useState([]);\r\n  const [temperatureMatter, setTemperatureMatter] = useState([]);\r\n  const [lowAttendanceMatter, setlowAttendanceMatter] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [updateData, setUpdateData] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (updateData) {\r\n      getData();\r\n    }\r\n  }, [updateData]);\r\n\r\n  const getData = async () => {\r\n    let classes = [];\r\n    let classArray = [];\r\n    let studentArray = [];\r\n    let dataArray = [];\r\n    let dateArray = [];\r\n    let attendance = [];\r\n    let temperatureMatter = [];\r\n    let lowAttendanceMatter = [];\r\n    let absentArray = [];\r\n\r\n    await fetch(\"/drive/api\");\r\n\r\n    await fetch(\"/sheet/api\")\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        classes = res.sheets;\r\n        res.sheets.forEach((result) => {\r\n          classArray.push(result.properties.title);\r\n        });\r\n      });\r\n\r\n    for (const classTitle of classArray) {\r\n      let studentList = [];\r\n      await axios.post(\"/sheet/class\", classTitle);\r\n\r\n      await fetch(\"/sheet/student\") // Get Student List\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          studentArray = res;\r\n        });\r\n\r\n      await fetch(\"/aws/api\") // Get Student Attendance\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          dataArray = res;\r\n        });\r\n\r\n      // Sort to latest date\r\n      dataArray.sort((a, b) => {\r\n        return new Date(b.Date) - new Date(a.Date);\r\n      });\r\n\r\n      // Data formation\r\n      const latestAttendanceData = dataArray.filter((res) =>\r\n        res.Date.includes(dataArray[0].Date.split(\" \")[0])\r\n      );\r\n\r\n      if (dataArray.length < 1 || dataArray === undefined) {\r\n        // do nothing\r\n      } else {\r\n        const date = dataArray[0].Date.split(\" \")[0];\r\n        const totalStudents = studentArray.length;\r\n        let presentCount = 0;\r\n\r\n        studentArray.forEach((res) => {\r\n          latestAttendanceData.forEach((student) => {\r\n            if (res[0].includes(student.Name)) {\r\n              presentCount = presentCount + 1;\r\n            }\r\n          });\r\n          // Convert array to object\r\n          studentList.push({\r\n            Name: res[0],\r\n            ID: res[1],\r\n            Class: classTitle,\r\n          });\r\n        });\r\n\r\n        // Class, Date, Present, Total Students\r\n        attendance.push({\r\n          Class: classTitle,\r\n          Date: date,\r\n          Present: presentCount,\r\n          Total_Students: totalStudents,\r\n        });\r\n\r\n        // Student Matters (High Temperature)\r\n        latestAttendanceData.forEach((student) => {\r\n          if (student.Temperature >= 37.5) {\r\n            temperatureMatter.push(student);\r\n          }\r\n        });\r\n\r\n        // Student Matters (Low Attendance)\r\n        dataArray.forEach((data) => {\r\n          dateArray.push(data.Date.split(\" \")[0]);\r\n        });\r\n\r\n        dateArray = [...new Set(dateArray)]; // Remove Duplicates\r\n\r\n        dateArray.forEach((date) => {\r\n          let attendance = [];\r\n          let absentList = [];\r\n\r\n          attendance = dataArray.filter((res) => res.Date.includes(date));\r\n\r\n          if (attendance.length !== 0) {\r\n            absentList = studentList.filter(\r\n              ({ Name: id1 }) =>\r\n                !attendance.some(({ Name: id2 }) => id2 === id1)\r\n            );\r\n            absentArray = [...absentArray, ...absentList];\r\n          }\r\n        });\r\n\r\n        let absentChecker = [];\r\n        absentChecker = absentArray.filter((res) =>\r\n          res.Class.includes(classTitle)\r\n        );\r\n\r\n        lowAttendanceMatter = [\r\n          ...lowAttendanceMatter,\r\n          ...absentChecker.reduce(function (acc, el, i, arr) {\r\n            if (arr.indexOf(el) !== i && acc.indexOf(el) < 0) acc.push(el);\r\n            return acc;\r\n          }, []),\r\n        ];\r\n      }\r\n    }\r\n\r\n    setClasses(classes); // Class Component\r\n    setAttendance(attendance); // LatestAttendance Component\r\n    setTemperatureMatter(temperatureMatter); // Student Matter Component\r\n    setlowAttendanceMatter(lowAttendanceMatter); // Student Matter Component\r\n    setIsLoading(false);\r\n    setUpdateData(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <NavBar />\r\n      <Container className=\"text-center dashboard\" fluid>\r\n        <Row>\r\n          <Col>\r\n            <h3\r\n              style={{\r\n                fontSize: \"calc(22px + 2vw)\",\r\n                fontWeight: \"bold\",\r\n                color: \"#535353\",\r\n                textAlign: \"left\",\r\n              }}\r\n            >\r\n              Your Dashboard\r\n            </h3>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col xl={6} lg={12} md={12} sm={12} xs={12}>\r\n            <Row style={{ marginBottom: \"10px\" }}>\r\n              <Col xl={12} lg={12} md={12} sm={12} xs={12}>\r\n                <LatestAttendance\r\n                  attendance={attendance}\r\n                  isLoading={isLoading}\r\n                  setUpdateData={setUpdateData}\r\n                />\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row style={{ marginBottom: \"10px\" }}>\r\n              <Col xl={12} lg={12} md={12} sm={12} xs={12}>\r\n                <StudentMatters\r\n                  temperatureMatter={temperatureMatter}\r\n                  lowAttendanceMatter={lowAttendanceMatter}\r\n                  isLoading={isLoading}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n\r\n          <Col\r\n            xl={6}\r\n            lg={12}\r\n            md={12}\r\n            sm={12}\r\n            xs={12}\r\n            style={{ marginBottom: \"10px\" }}\r\n          >\r\n            <Classes\r\n              classes={classes}\r\n              isLoading={isLoading}\r\n              setUpdateData={setUpdateData}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { AccountContext } from \"./components/Authentication/Account\";\n\nimport Login from \"./components/Authentication/Login\";\nimport Dashboard from \"./components/Dashboard/Dashboard\";\n\nconst App = () => {\n  const [loggedIn, setLoggedIn] = useState(false);\n\n  const { getSession } = useContext(AccountContext);\n\n  useEffect(() => {\n    getSession().then(() => {\n      setTimeout(() => {\n        setLoggedIn(true);\n      }, 1500);\n    });\n  });\n\n  return <>{loggedIn ? <Dashboard /> : <Login />}</>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Account } from \"./components/Authentication/Account\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <Account>\n    <App />\n  </Account>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}