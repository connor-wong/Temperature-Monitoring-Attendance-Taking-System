{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport BellIcon from \"@patternfly/react-icons/dist/esm/icons/bell-icon\";\nimport CheckCircleIcon from \"@patternfly/react-icons/dist/esm/icons/check-circle-icon\";\nimport ExclamationCircleIcon from \"@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon\";\nimport ExclamationTriangleIcon from \"@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon\";\nimport InfoCircleIcon from \"@patternfly/react-icons/dist/esm/icons/info-circle-icon\";\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport a11yStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport maxLines from \"@patternfly/react-tokens/dist/esm/c_notification_drawer__list_item_header_title_max_lines\";\nimport { Tooltip } from '../Tooltip';\nexport const variantIcons = {\n  success: CheckCircleIcon,\n  danger: ExclamationCircleIcon,\n  warning: ExclamationTriangleIcon,\n  info: InfoCircleIcon,\n  default: BellIcon\n};\nexport const NotificationDrawerListItemHeader = _a => {\n  var {\n    children,\n    className = '',\n    icon = null,\n    srTitle,\n    title,\n    variant = 'default',\n    truncateTitle = 0,\n    tooltipPosition\n  } = _a,\n      props = __rest(_a, [\"children\", \"className\", \"icon\", \"srTitle\", \"title\", \"variant\", \"truncateTitle\", \"tooltipPosition\"]);\n\n  const titleRef = React.useRef(null);\n  const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n  React.useEffect(() => {\n    if (!titleRef.current || !truncateTitle) {\n      return;\n    }\n\n    titleRef.current.style.setProperty(maxLines.name, truncateTitle.toString());\n    const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;\n\n    if (isTooltipVisible !== showTooltip) {\n      setIsTooltipVisible(showTooltip);\n    }\n  }, [titleRef, truncateTitle, isTooltipVisible]);\n  const Icon = variantIcons[variant];\n  const Title = React.createElement(\"h2\", Object.assign({}, isTooltipVisible && {\n    tabIndex: 0\n  }, {\n    ref: titleRef,\n    className: css(styles.notificationDrawerListItemHeaderTitle, truncateTitle && styles.modifiers.truncate)\n  }), srTitle && React.createElement(\"span\", {\n    className: css(a11yStyles.screenReader)\n  }, srTitle), title);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", Object.assign({}, props, {\n    className: css(styles.notificationDrawerListItemHeader, className)\n  }), React.createElement(\"span\", {\n    className: css(styles.notificationDrawerListItemHeaderIcon)\n  }, icon ? icon : React.createElement(Icon, null)), isTooltipVisible ? React.createElement(Tooltip, {\n    content: title,\n    position: tooltipPosition\n  }, Title) : Title), children && React.createElement(\"div\", {\n    className: css(styles.notificationDrawerListItemAction)\n  }, children));\n};\nNotificationDrawerListItemHeader.displayName = 'NotificationDrawerListItemHeader';","map":{"version":3,"sources":["../../../../src/components/NotificationDrawer/NotificationDrawerListItemHeader.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport BellIcon from \"@patternfly/react-icons/dist/esm/icons/bell-icon\";\nimport CheckCircleIcon from \"@patternfly/react-icons/dist/esm/icons/check-circle-icon\";\nimport ExclamationCircleIcon from \"@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon\";\nimport ExclamationTriangleIcon from \"@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon\";\nimport InfoCircleIcon from \"@patternfly/react-icons/dist/esm/icons/info-circle-icon\";\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport a11yStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport maxLines from \"@patternfly/react-tokens/dist/esm/c_notification_drawer__list_item_header_title_max_lines\";\nimport { Tooltip } from '../Tooltip';\nexport const variantIcons = {\n    success: CheckCircleIcon,\n    danger: ExclamationCircleIcon,\n    warning: ExclamationTriangleIcon,\n    info: InfoCircleIcon,\n    default: BellIcon\n};\nexport const NotificationDrawerListItemHeader = (_a) => {\n    var { children, className = '', icon = null, srTitle, title, variant = 'default', truncateTitle = 0, tooltipPosition } = _a, props = __rest(_a, [\"children\", \"className\", \"icon\", \"srTitle\", \"title\", \"variant\", \"truncateTitle\", \"tooltipPosition\"]);\n    const titleRef = React.useRef(null);\n    const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n    React.useEffect(() => {\n        if (!titleRef.current || !truncateTitle) {\n            return;\n        }\n        titleRef.current.style.setProperty(maxLines.name, truncateTitle.toString());\n        const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;\n        if (isTooltipVisible !== showTooltip) {\n            setIsTooltipVisible(showTooltip);\n        }\n    }, [titleRef, truncateTitle, isTooltipVisible]);\n    const Icon = variantIcons[variant];\n    const Title = (React.createElement(\"h2\", Object.assign({}, (isTooltipVisible && { tabIndex: 0 }), { ref: titleRef, className: css(styles.notificationDrawerListItemHeaderTitle, truncateTitle && styles.modifiers.truncate) }),\n        srTitle && React.createElement(\"span\", { className: css(a11yStyles.screenReader) }, srTitle),\n        title));\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", Object.assign({}, props, { className: css(styles.notificationDrawerListItemHeader, className) }),\n            React.createElement(\"span\", { className: css(styles.notificationDrawerListItemHeaderIcon) }, icon ? icon : React.createElement(Icon, null)),\n            isTooltipVisible ? (React.createElement(Tooltip, { content: title, position: tooltipPosition }, Title)) : (Title)),\n        children && React.createElement(\"div\", { className: css(styles.notificationDrawerListItemAction) }, children)));\n};\nNotificationDrawerListItemHeader.displayName = 'NotificationDrawerListItemHeader';\n//# sourceMappingURL=NotificationDrawerListItemHeader.js.map"]},"metadata":{},"sourceType":"module"}