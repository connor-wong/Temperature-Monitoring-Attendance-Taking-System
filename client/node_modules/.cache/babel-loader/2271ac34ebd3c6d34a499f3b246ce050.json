{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport CaretDownIcon from \"@patternfly/react-icons/dist/esm/icons/caret-down-icon\";\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\nimport { KEY_CODES } from '../../helpers/constants';\nexport class ContextSelectorToggle extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.toggle = React.createRef();\n\n    this.componentDidMount = () => {\n      document.addEventListener('mousedown', this.onDocClick);\n      document.addEventListener('touchstart', this.onDocClick);\n      document.addEventListener('keydown', this.onEscPress);\n    };\n\n    this.componentWillUnmount = () => {\n      document.removeEventListener('mousedown', this.onDocClick);\n      document.removeEventListener('touchstart', this.onDocClick);\n      document.removeEventListener('keydown', this.onEscPress);\n    };\n\n    this.onDocClick = event => {\n      const {\n        isOpen,\n        parentRef,\n        onToggle\n      } = this.props;\n\n      if (isOpen && parentRef && !parentRef.contains(event.target)) {\n        onToggle(null, false);\n        this.toggle.current.focus();\n      }\n    };\n\n    this.onEscPress = event => {\n      const {\n        isOpen,\n        parentRef,\n        onToggle\n      } = this.props;\n      const keyCode = event.keyCode || event.which;\n\n      if (isOpen && keyCode === KEY_CODES.ESCAPE_KEY && parentRef && parentRef.contains(event.target)) {\n        onToggle(null, false);\n        this.toggle.current.focus();\n      }\n    };\n\n    this.onKeyDown = event => {\n      const {\n        isOpen,\n        onToggle,\n        onEnter\n      } = this.props;\n\n      if (event.keyCode === KEY_CODES.TAB && !isOpen || event.key !== KEY_CODES.ENTER) {\n        return;\n      }\n\n      event.preventDefault();\n\n      if ((event.keyCode === KEY_CODES.TAB || event.keyCode === KEY_CODES.ENTER || event.key !== KEY_CODES.SPACE) && isOpen) {\n        onToggle(null, !isOpen);\n      } else if ((event.keyCode === KEY_CODES.ENTER || event.key === ' ') && !isOpen) {\n        onToggle(null, !isOpen);\n        onEnter();\n      }\n    };\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      className,\n      toggleText,\n      isOpen,\n      onToggle,\n      id,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      isActive,\n      onEnter,\n      parentRef\n    } = _a,\n\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    props = __rest(_a, [\"className\", \"toggleText\", \"isOpen\", \"onToggle\", \"id\", \"isActive\", \"onEnter\", \"parentRef\"]);\n\n    return React.createElement(\"button\", Object.assign({}, props, {\n      id: id,\n      ref: this.toggle,\n      className: css(styles.contextSelectorToggle, isActive && styles.modifiers.active, className),\n      type: \"button\",\n      onClick: event => onToggle(event, !isOpen),\n      \"aria-expanded\": isOpen,\n      onKeyDown: this.onKeyDown\n    }), React.createElement(\"span\", {\n      className: css(styles.contextSelectorToggleText)\n    }, toggleText), React.createElement(\"span\", {\n      className: css(styles.contextSelectorToggleIcon)\n    }, React.createElement(CaretDownIcon, {\n      \"aria-hidden\": true\n    })));\n  }\n\n}\nContextSelectorToggle.displayName = 'ContextSelectorToggle';\nContextSelectorToggle.defaultProps = {\n  className: '',\n  toggleText: '',\n  isOpen: false,\n  onEnter: () => undefined,\n  parentRef: null,\n  isActive: false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onToggle: (event, value) => undefined\n};","map":{"version":3,"sources":["../../../../src/components/ContextSelector/ContextSelectorToggle.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport CaretDownIcon from \"@patternfly/react-icons/dist/esm/icons/caret-down-icon\";\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\nimport { KEY_CODES } from '../../helpers/constants';\nexport class ContextSelectorToggle extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.toggle = React.createRef();\n        this.componentDidMount = () => {\n            document.addEventListener('mousedown', this.onDocClick);\n            document.addEventListener('touchstart', this.onDocClick);\n            document.addEventListener('keydown', this.onEscPress);\n        };\n        this.componentWillUnmount = () => {\n            document.removeEventListener('mousedown', this.onDocClick);\n            document.removeEventListener('touchstart', this.onDocClick);\n            document.removeEventListener('keydown', this.onEscPress);\n        };\n        this.onDocClick = (event) => {\n            const { isOpen, parentRef, onToggle } = this.props;\n            if (isOpen && parentRef && !parentRef.contains(event.target)) {\n                onToggle(null, false);\n                this.toggle.current.focus();\n            }\n        };\n        this.onEscPress = (event) => {\n            const { isOpen, parentRef, onToggle } = this.props;\n            const keyCode = event.keyCode || event.which;\n            if (isOpen && keyCode === KEY_CODES.ESCAPE_KEY && parentRef && parentRef.contains(event.target)) {\n                onToggle(null, false);\n                this.toggle.current.focus();\n            }\n        };\n        this.onKeyDown = (event) => {\n            const { isOpen, onToggle, onEnter } = this.props;\n            if ((event.keyCode === KEY_CODES.TAB && !isOpen) || event.key !== KEY_CODES.ENTER) {\n                return;\n            }\n            event.preventDefault();\n            if ((event.keyCode === KEY_CODES.TAB || event.keyCode === KEY_CODES.ENTER || event.key !== KEY_CODES.SPACE) &&\n                isOpen) {\n                onToggle(null, !isOpen);\n            }\n            else if ((event.keyCode === KEY_CODES.ENTER || event.key === ' ') && !isOpen) {\n                onToggle(null, !isOpen);\n                onEnter();\n            }\n        };\n    }\n    render() {\n        const _a = this.props, { className, toggleText, isOpen, onToggle, id, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        isActive, onEnter, parentRef } = _a, \n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        props = __rest(_a, [\"className\", \"toggleText\", \"isOpen\", \"onToggle\", \"id\", \"isActive\", \"onEnter\", \"parentRef\"]);\n        return (React.createElement(\"button\", Object.assign({}, props, { id: id, ref: this.toggle, className: css(styles.contextSelectorToggle, isActive && styles.modifiers.active, className), type: \"button\", onClick: event => onToggle(event, !isOpen), \"aria-expanded\": isOpen, onKeyDown: this.onKeyDown }),\n            React.createElement(\"span\", { className: css(styles.contextSelectorToggleText) }, toggleText),\n            React.createElement(\"span\", { className: css(styles.contextSelectorToggleIcon) },\n                React.createElement(CaretDownIcon, { \"aria-hidden\": true }))));\n    }\n}\nContextSelectorToggle.displayName = 'ContextSelectorToggle';\nContextSelectorToggle.defaultProps = {\n    className: '',\n    toggleText: '',\n    isOpen: false,\n    onEnter: () => undefined,\n    parentRef: null,\n    isActive: false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onToggle: (event, value) => undefined\n};\n//# sourceMappingURL=ContextSelectorToggle.js.map"]},"metadata":{},"sourceType":"module"}