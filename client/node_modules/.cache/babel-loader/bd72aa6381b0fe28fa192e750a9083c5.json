{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { ToolbarExpandableContent } from './ToolbarExpandableContent';\nexport class ToolbarContent extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.expandableContentRef = React.createRef();\n    this.chipContainerRef = React.createRef();\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      className,\n      children,\n      isExpanded,\n      toolbarId,\n      visibility,\n      visiblity,\n      alignment,\n      clearAllFilters,\n      showClearFiltersButton,\n      clearFiltersButtonText\n    } = _a,\n          props = __rest(_a, [\"className\", \"children\", \"isExpanded\", \"toolbarId\", \"visibility\", \"visiblity\", \"alignment\", \"clearAllFilters\", \"showClearFiltersButton\", \"clearFiltersButtonText\"]);\n\n    if (visiblity !== undefined) {\n      // eslint-disable-next-line no-console\n      console.warn('The ToolbarContent visiblity prop has been deprecated. ' + 'Please use the correctly spelled visibility prop instead.');\n    }\n\n    return React.createElement(\"div\", Object.assign({\n      className: css(styles.toolbarContent, formatBreakpointMods(visibility || visiblity, styles), formatBreakpointMods(alignment, styles), className)\n    }, props), React.createElement(ToolbarContext.Consumer, null, ({\n      clearAllFilters: clearAllFiltersContext,\n      clearFiltersButtonText: clearFiltersButtonContext,\n      showClearFiltersButton: showClearFiltersButtonContext,\n      toolbarId: toolbarIdContext\n    }) => {\n      const expandableContentId = `${toolbarId || toolbarIdContext}-expandable-content-${ToolbarContent.currentId++}`;\n      return React.createElement(ToolbarContentContext.Provider, {\n        value: {\n          expandableContentRef: this.expandableContentRef,\n          expandableContentId,\n          chipContainerRef: this.chipContainerRef\n        }\n      }, React.createElement(\"div\", {\n        className: css(styles.toolbarContentSection)\n      }, children), React.createElement(ToolbarExpandableContent, {\n        id: expandableContentId,\n        isExpanded: isExpanded,\n        expandableContentRef: this.expandableContentRef,\n        chipContainerRef: this.chipContainerRef,\n        clearAllFilters: clearAllFilters || clearAllFiltersContext,\n        showClearFiltersButton: showClearFiltersButton || showClearFiltersButtonContext,\n        clearFiltersButtonText: clearFiltersButtonText || clearFiltersButtonContext\n      }));\n    }));\n  }\n\n}\nToolbarContent.displayName = 'ToolbarContent';\nToolbarContent.currentId = 0;\nToolbarContent.defaultProps = {\n  isExpanded: false,\n  showClearFiltersButton: false\n};","map":{"version":3,"sources":["../../../../src/components/Toolbar/ToolbarContent.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { ToolbarExpandableContent } from './ToolbarExpandableContent';\nexport class ToolbarContent extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.expandableContentRef = React.createRef();\n        this.chipContainerRef = React.createRef();\n    }\n    render() {\n        const _a = this.props, { className, children, isExpanded, toolbarId, visibility, visiblity, alignment, clearAllFilters, showClearFiltersButton, clearFiltersButtonText } = _a, props = __rest(_a, [\"className\", \"children\", \"isExpanded\", \"toolbarId\", \"visibility\", \"visiblity\", \"alignment\", \"clearAllFilters\", \"showClearFiltersButton\", \"clearFiltersButtonText\"]);\n        if (visiblity !== undefined) {\n            // eslint-disable-next-line no-console\n            console.warn('The ToolbarContent visiblity prop has been deprecated. ' +\n                'Please use the correctly spelled visibility prop instead.');\n        }\n        return (React.createElement(\"div\", Object.assign({ className: css(styles.toolbarContent, formatBreakpointMods(visibility || visiblity, styles), formatBreakpointMods(alignment, styles), className) }, props),\n            React.createElement(ToolbarContext.Consumer, null, ({ clearAllFilters: clearAllFiltersContext, clearFiltersButtonText: clearFiltersButtonContext, showClearFiltersButton: showClearFiltersButtonContext, toolbarId: toolbarIdContext }) => {\n                const expandableContentId = `${toolbarId ||\n                    toolbarIdContext}-expandable-content-${ToolbarContent.currentId++}`;\n                return (React.createElement(ToolbarContentContext.Provider, { value: {\n                        expandableContentRef: this.expandableContentRef,\n                        expandableContentId,\n                        chipContainerRef: this.chipContainerRef\n                    } },\n                    React.createElement(\"div\", { className: css(styles.toolbarContentSection) }, children),\n                    React.createElement(ToolbarExpandableContent, { id: expandableContentId, isExpanded: isExpanded, expandableContentRef: this.expandableContentRef, chipContainerRef: this.chipContainerRef, clearAllFilters: clearAllFilters || clearAllFiltersContext, showClearFiltersButton: showClearFiltersButton || showClearFiltersButtonContext, clearFiltersButtonText: clearFiltersButtonText || clearFiltersButtonContext })));\n            })));\n    }\n}\nToolbarContent.displayName = 'ToolbarContent';\nToolbarContent.currentId = 0;\nToolbarContent.defaultProps = {\n    isExpanded: false,\n    showClearFiltersButton: false\n};\n//# sourceMappingURL=ToolbarContent.js.map"]},"metadata":{},"sourceType":"module"}