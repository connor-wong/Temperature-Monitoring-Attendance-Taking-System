{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\nimport SearchIcon from \"@patternfly/react-icons/dist/esm/icons/search-icon\";\nimport { ContextSelectorToggle } from './ContextSelectorToggle';\nimport { ContextSelectorMenuList } from './ContextSelectorMenuList';\nimport { ContextSelectorContext } from './contextSelectorConstants';\nimport { Button, ButtonVariant } from '../Button';\nimport { TextInput } from '../TextInput';\nimport { InputGroup } from '../InputGroup';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { FocusTrap } from '../../helpers';\nimport { Popper } from '../../helpers/Popper/Popper';\nimport { getOUIAProps, getDefaultOUIAId } from '../../helpers'; // seed for the aria-labelledby ID\n\nlet currentId = 0;\nconst newId = currentId++;\nexport class ContextSelector extends React.Component {\n  constructor(props) {\n    super(props);\n    this.parentRef = React.createRef();\n\n    this.onEnterPressed = event => {\n      if (event.charCode === KEY_CODES.ENTER) {\n        this.props.onSearchButtonClick();\n      }\n    };\n\n    this.state = {\n      ouiaStateId: getDefaultOUIAId(ContextSelector.displayName)\n    };\n  }\n\n  render() {\n    const toggleId = `pf-context-selector-toggle-id-${newId}`;\n    const screenReaderLabelId = `pf-context-selector-label-id-${newId}`;\n    const searchButtonId = `pf-context-selector-search-button-id-${newId}`;\n\n    const _a = this.props,\n          {\n      children,\n      className,\n      isOpen,\n      onToggle,\n      onSelect,\n      screenReaderLabel,\n      toggleText,\n      searchButtonAriaLabel,\n      searchInputValue,\n      onSearchInputChange,\n      searchInputPlaceholder,\n      onSearchButtonClick,\n      menuAppendTo,\n      ouiaId,\n      ouiaSafe,\n      footer\n    } = _a,\n          props = __rest(_a, [\"children\", \"className\", \"isOpen\", \"onToggle\", \"onSelect\", \"screenReaderLabel\", \"toggleText\", \"searchButtonAriaLabel\", \"searchInputValue\", \"onSearchInputChange\", \"searchInputPlaceholder\", \"onSearchButtonClick\", \"menuAppendTo\", \"ouiaId\", \"ouiaSafe\", \"footer\"]);\n\n    const menuContainer = React.createElement(\"div\", {\n      className: css(styles.contextSelectorMenu)\n    }, isOpen && React.createElement(FocusTrap, {\n      focusTrapOptions: {\n        clickOutsideDeactivates: true\n      }\n    }, React.createElement(\"div\", {\n      className: css(styles.contextSelectorMenuSearch)\n    }, React.createElement(InputGroup, null, React.createElement(TextInput, {\n      value: searchInputValue,\n      type: \"search\",\n      placeholder: searchInputPlaceholder,\n      onChange: onSearchInputChange,\n      onKeyPress: this.onEnterPressed,\n      \"aria-labelledby\": searchButtonId\n    }), React.createElement(Button, {\n      variant: ButtonVariant.control,\n      \"aria-label\": searchButtonAriaLabel,\n      id: searchButtonId,\n      onClick: onSearchButtonClick\n    }, React.createElement(SearchIcon, {\n      \"aria-hidden\": \"true\"\n    })))), React.createElement(ContextSelectorContext.Provider, {\n      value: {\n        onSelect\n      }\n    }, React.createElement(ContextSelectorMenuList, {\n      isOpen: isOpen\n    }, children)), footer));\n    const popperContainer = React.createElement(\"div\", Object.assign({\n      className: css(styles.contextSelector, isOpen && styles.modifiers.expanded, className),\n      ref: this.parentRef\n    }, props), isOpen && menuContainer);\n    const mainContainer = React.createElement(\"div\", Object.assign({\n      className: css(styles.contextSelector, isOpen && styles.modifiers.expanded, className),\n      ref: this.parentRef\n    }, getOUIAProps(ContextSelector.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe), props), screenReaderLabel && React.createElement(\"span\", {\n      id: screenReaderLabelId,\n      hidden: true\n    }, screenReaderLabel), React.createElement(ContextSelectorToggle, {\n      onToggle: onToggle,\n      isOpen: isOpen,\n      toggleText: toggleText,\n      id: toggleId,\n      parentRef: this.parentRef.current,\n      \"aria-labelledby\": `${screenReaderLabelId} ${toggleId}`\n    }), isOpen && menuAppendTo === 'inline' && menuContainer);\n\n    const getParentElement = () => {\n      if (this.parentRef && this.parentRef.current) {\n        return this.parentRef.current.parentElement;\n      }\n\n      return null;\n    };\n\n    return menuAppendTo === 'inline' ? mainContainer : React.createElement(Popper, {\n      trigger: mainContainer,\n      popper: popperContainer,\n      appendTo: menuAppendTo === 'parent' ? getParentElement() : menuAppendTo,\n      isVisible: isOpen\n    });\n  }\n\n}\nContextSelector.displayName = 'ContextSelector';\nContextSelector.defaultProps = {\n  children: null,\n  className: '',\n  isOpen: false,\n  onToggle: () => undefined,\n  onSelect: () => undefined,\n  screenReaderLabel: '',\n  toggleText: '',\n  searchButtonAriaLabel: 'Search menu items',\n  searchInputValue: '',\n  onSearchInputChange: () => undefined,\n  searchInputPlaceholder: 'Search',\n  onSearchButtonClick: () => undefined,\n  menuAppendTo: 'inline',\n  ouiaSafe: true,\n  footer: null\n};","map":{"version":3,"sources":["../../../../src/components/ContextSelector/ContextSelector.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\nimport SearchIcon from \"@patternfly/react-icons/dist/esm/icons/search-icon\";\nimport { ContextSelectorToggle } from './ContextSelectorToggle';\nimport { ContextSelectorMenuList } from './ContextSelectorMenuList';\nimport { ContextSelectorContext } from './contextSelectorConstants';\nimport { Button, ButtonVariant } from '../Button';\nimport { TextInput } from '../TextInput';\nimport { InputGroup } from '../InputGroup';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { FocusTrap } from '../../helpers';\nimport { Popper } from '../../helpers/Popper/Popper';\nimport { getOUIAProps, getDefaultOUIAId } from '../../helpers';\n// seed for the aria-labelledby ID\nlet currentId = 0;\nconst newId = currentId++;\nexport class ContextSelector extends React.Component {\n    constructor(props) {\n        super(props);\n        this.parentRef = React.createRef();\n        this.onEnterPressed = (event) => {\n            if (event.charCode === KEY_CODES.ENTER) {\n                this.props.onSearchButtonClick();\n            }\n        };\n        this.state = {\n            ouiaStateId: getDefaultOUIAId(ContextSelector.displayName)\n        };\n    }\n    render() {\n        const toggleId = `pf-context-selector-toggle-id-${newId}`;\n        const screenReaderLabelId = `pf-context-selector-label-id-${newId}`;\n        const searchButtonId = `pf-context-selector-search-button-id-${newId}`;\n        const _a = this.props, { children, className, isOpen, onToggle, onSelect, screenReaderLabel, toggleText, searchButtonAriaLabel, searchInputValue, onSearchInputChange, searchInputPlaceholder, onSearchButtonClick, menuAppendTo, ouiaId, ouiaSafe, footer } = _a, props = __rest(_a, [\"children\", \"className\", \"isOpen\", \"onToggle\", \"onSelect\", \"screenReaderLabel\", \"toggleText\", \"searchButtonAriaLabel\", \"searchInputValue\", \"onSearchInputChange\", \"searchInputPlaceholder\", \"onSearchButtonClick\", \"menuAppendTo\", \"ouiaId\", \"ouiaSafe\", \"footer\"]);\n        const menuContainer = (React.createElement(\"div\", { className: css(styles.contextSelectorMenu) }, isOpen && (React.createElement(FocusTrap, { focusTrapOptions: { clickOutsideDeactivates: true } },\n            React.createElement(\"div\", { className: css(styles.contextSelectorMenuSearch) },\n                React.createElement(InputGroup, null,\n                    React.createElement(TextInput, { value: searchInputValue, type: \"search\", placeholder: searchInputPlaceholder, onChange: onSearchInputChange, onKeyPress: this.onEnterPressed, \"aria-labelledby\": searchButtonId }),\n                    React.createElement(Button, { variant: ButtonVariant.control, \"aria-label\": searchButtonAriaLabel, id: searchButtonId, onClick: onSearchButtonClick },\n                        React.createElement(SearchIcon, { \"aria-hidden\": \"true\" })))),\n            React.createElement(ContextSelectorContext.Provider, { value: { onSelect } },\n                React.createElement(ContextSelectorMenuList, { isOpen: isOpen }, children)),\n            footer))));\n        const popperContainer = (React.createElement(\"div\", Object.assign({ className: css(styles.contextSelector, isOpen && styles.modifiers.expanded, className), ref: this.parentRef }, props), isOpen && menuContainer));\n        const mainContainer = (React.createElement(\"div\", Object.assign({ className: css(styles.contextSelector, isOpen && styles.modifiers.expanded, className), ref: this.parentRef }, getOUIAProps(ContextSelector.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe), props),\n            screenReaderLabel && (React.createElement(\"span\", { id: screenReaderLabelId, hidden: true }, screenReaderLabel)),\n            React.createElement(ContextSelectorToggle, { onToggle: onToggle, isOpen: isOpen, toggleText: toggleText, id: toggleId, parentRef: this.parentRef.current, \"aria-labelledby\": `${screenReaderLabelId} ${toggleId}` }),\n            isOpen && menuAppendTo === 'inline' && menuContainer));\n        const getParentElement = () => {\n            if (this.parentRef && this.parentRef.current) {\n                return this.parentRef.current.parentElement;\n            }\n            return null;\n        };\n        return menuAppendTo === 'inline' ? (mainContainer) : (React.createElement(Popper, { trigger: mainContainer, popper: popperContainer, appendTo: menuAppendTo === 'parent' ? getParentElement() : menuAppendTo, isVisible: isOpen }));\n    }\n}\nContextSelector.displayName = 'ContextSelector';\nContextSelector.defaultProps = {\n    children: null,\n    className: '',\n    isOpen: false,\n    onToggle: () => undefined,\n    onSelect: () => undefined,\n    screenReaderLabel: '',\n    toggleText: '',\n    searchButtonAriaLabel: 'Search menu items',\n    searchInputValue: '',\n    onSearchInputChange: () => undefined,\n    searchInputPlaceholder: 'Search',\n    onSearchButtonClick: () => undefined,\n    menuAppendTo: 'inline',\n    ouiaSafe: true,\n    footer: null\n};\n//# sourceMappingURL=ContextSelector.js.map"]},"metadata":{},"sourceType":"module"}