{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { Badge } from '../Badge';\nimport AngleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-right-icon\";\nimport { flattenTree } from './treeUtils';\nexport class DualListSelectorTreeItem extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.ref = React.createRef();\n    this.state = {\n      isExpanded: this.props.defaultExpanded || false\n    };\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      onOptionCheck,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onOptionSelect,\n      children,\n      className,\n      id,\n      text,\n      isSelected,\n      isChosen,\n      defaultExpanded,\n      hasBadge,\n      isChecked,\n      checkProps,\n      badgeProps,\n      parentItem,\n      itemData\n    } = _a,\n          props = __rest(_a, [\"onOptionCheck\", \"onOptionSelect\", \"children\", \"className\", \"id\", \"text\", \"isSelected\", \"isChosen\", \"defaultExpanded\", \"hasBadge\", \"isChecked\", \"checkProps\", \"badgeProps\", \"parentItem\", \"itemData\"]);\n\n    const {\n      isExpanded\n    } = this.state;\n    return React.createElement(\"li\", Object.assign({\n      className: css(styles.dualListSelectorListItem, className, children && styles.modifiers.expandable, isExpanded && styles.modifiers.expanded),\n      id: id\n    }, props, {\n      \"aria-selected\": isSelected,\n      role: \"treeitem\"\n    }, isExpanded && {\n      'aria-expanded': 'true'\n    }), React.createElement(\"div\", {\n      className: css(styles.dualListSelectorItem, isSelected && styles.modifiers.selected, styles.modifiers.check),\n      ref: this.ref,\n      tabIndex: -1,\n      onClick: evt => {\n        onOptionCheck && onOptionCheck(evt, !isChecked, isChosen, itemData);\n      }\n    }, React.createElement(\"span\", {\n      className: css(styles.dualListSelectorItemMain)\n    }, children && React.createElement(\"div\", {\n      className: css(styles.dualListSelectorItemToggle),\n      onClick: e => {\n        if (children) {\n          this.setState({\n            isExpanded: !this.state.isExpanded\n          });\n        }\n\n        e.stopPropagation();\n      }\n    }, React.createElement(\"span\", {\n      className: css(styles.dualListSelectorItemToggleIcon)\n    }, React.createElement(AngleRightIcon, {\n      \"aria-hidden\": true\n    }))), React.createElement(\"span\", {\n      className: css(styles.dualListSelectorItemCheck)\n    }, React.createElement(\"input\", Object.assign({\n      type: \"checkbox\",\n      onChange: evt => onOptionCheck && onOptionCheck(evt, !isChecked, isChosen, itemData),\n      onClick: evt => evt.stopPropagation(),\n      ref: elem => elem && (elem.indeterminate = isChecked === null),\n      checked: isChecked || false\n    }, checkProps))), React.createElement(\"span\", {\n      className: css(styles.dualListSelectorItemText)\n    }, text), hasBadge && children && React.createElement(\"span\", {\n      className: css(styles.dualListSelectorItemCount)\n    }, React.createElement(Badge, Object.assign({}, badgeProps), flattenTree(children.props.data).length)))), isExpanded && children);\n  }\n\n}\nDualListSelectorTreeItem.displayName = 'DualListSelectorTreeItem';","map":{"version":3,"sources":["../../../../src/components/DualListSelector/DualListSelectorTreeItem.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { Badge } from '../Badge';\nimport AngleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-right-icon\";\nimport { flattenTree } from './treeUtils';\nexport class DualListSelectorTreeItem extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.ref = React.createRef();\n        this.state = {\n            isExpanded: this.props.defaultExpanded || false\n        };\n    }\n    render() {\n        const _a = this.props, { onOptionCheck, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        onOptionSelect, children, className, id, text, isSelected, isChosen, defaultExpanded, hasBadge, isChecked, checkProps, badgeProps, parentItem, itemData } = _a, props = __rest(_a, [\"onOptionCheck\", \"onOptionSelect\", \"children\", \"className\", \"id\", \"text\", \"isSelected\", \"isChosen\", \"defaultExpanded\", \"hasBadge\", \"isChecked\", \"checkProps\", \"badgeProps\", \"parentItem\", \"itemData\"]);\n        const { isExpanded } = this.state;\n        return (React.createElement(\"li\", Object.assign({ className: css(styles.dualListSelectorListItem, className, children && styles.modifiers.expandable, isExpanded && styles.modifiers.expanded), id: id }, props, { \"aria-selected\": isSelected, role: \"treeitem\" }, (isExpanded && { 'aria-expanded': 'true' })),\n            React.createElement(\"div\", { className: css(styles.dualListSelectorItem, isSelected && styles.modifiers.selected, styles.modifiers.check), ref: this.ref, tabIndex: -1, onClick: evt => {\n                    onOptionCheck && onOptionCheck(evt, !isChecked, isChosen, itemData);\n                } },\n                React.createElement(\"span\", { className: css(styles.dualListSelectorItemMain) },\n                    children && (React.createElement(\"div\", { className: css(styles.dualListSelectorItemToggle), onClick: e => {\n                            if (children) {\n                                this.setState({ isExpanded: !this.state.isExpanded });\n                            }\n                            e.stopPropagation();\n                        } },\n                        React.createElement(\"span\", { className: css(styles.dualListSelectorItemToggleIcon) },\n                            React.createElement(AngleRightIcon, { \"aria-hidden\": true })))),\n                    React.createElement(\"span\", { className: css(styles.dualListSelectorItemCheck) },\n                        React.createElement(\"input\", Object.assign({ type: \"checkbox\", onChange: (evt) => onOptionCheck && onOptionCheck(evt, !isChecked, isChosen, itemData), onClick: (evt) => evt.stopPropagation(), ref: elem => elem && (elem.indeterminate = isChecked === null), checked: isChecked || false }, checkProps))),\n                    React.createElement(\"span\", { className: css(styles.dualListSelectorItemText) }, text),\n                    hasBadge && children && (React.createElement(\"span\", { className: css(styles.dualListSelectorItemCount) },\n                        React.createElement(Badge, Object.assign({}, badgeProps), flattenTree(children.props.data).length))))),\n            isExpanded && children));\n    }\n}\nDualListSelectorTreeItem.displayName = 'DualListSelectorTreeItem';\n//# sourceMappingURL=DualListSelectorTreeItem.js.map"]},"metadata":{},"sourceType":"module"}