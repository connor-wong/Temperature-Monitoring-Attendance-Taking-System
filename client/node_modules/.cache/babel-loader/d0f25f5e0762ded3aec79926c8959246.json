{"ast":null,"code":"import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\nimport { fillTemplate } from '../../helpers';\nimport { DropdownToggle } from '../Dropdown';\nlet toggleId = 0;\nexport const OptionsToggle = ({\n  itemsTitle = 'items',\n  optionsToggle = 'Select',\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  itemsPerPageTitle = 'Items per page',\n  firstIndex = 0,\n  lastIndex = 0,\n  itemCount = 0,\n  widgetId = '',\n  showToggle = true,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onToggle = _isOpen => undefined,\n  isOpen = false,\n  isDisabled = false,\n  parentRef = null,\n  toggleTemplate: ToggleTemplate = '',\n  onEnter = null\n}) => React.createElement(\"div\", {\n  className: css(styles.optionsMenuToggle, isDisabled && styles.modifiers.disabled, styles.modifiers.plain, styles.modifiers.text)\n}, showToggle && React.createElement(React.Fragment, null, React.createElement(\"span\", {\n  className: css(styles.optionsMenuToggleText)\n}, typeof ToggleTemplate === 'string' ? fillTemplate(ToggleTemplate, {\n  firstIndex,\n  lastIndex,\n  itemCount,\n  itemsTitle\n}) : React.createElement(ToggleTemplate, {\n  firstIndex: firstIndex,\n  lastIndex: lastIndex,\n  itemCount: itemCount,\n  itemsTitle: itemsTitle\n})), React.createElement(DropdownToggle, {\n  onEnter: onEnter,\n  \"aria-label\": optionsToggle,\n  onToggle: onToggle,\n  isDisabled: isDisabled || itemCount <= 0,\n  isOpen: isOpen,\n  id: `${widgetId}-toggle-${toggleId++}`,\n  className: styles.optionsMenuToggleButton,\n  parentRef: parentRef\n})));\nOptionsToggle.displayName = 'OptionsToggle';","map":{"version":3,"sources":["../../../../src/components/Pagination/OptionsToggle.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,kEAAnB;AACA,SAAS,GAAT,QAAoB,0BAApB;AAEA,SAAS,YAAT,QAA6B,eAA7B;AAEA,SAAS,cAAT,QAA+B,aAA/B;AAiCA,IAAI,QAAQ,GAAG,CAAf;AACA,OAAO,MAAM,aAAa,GAAgD,CAAC;AACzE,EAAA,UAAU,GAAG,OAD4D;AAEzE,EAAA,aAAa,GAAG,QAFyD;AAGzE;AACA,EAAA,iBAAiB,GAAG,gBAJqD;AAKzE,EAAA,UAAU,GAAG,CAL4D;AAMzE,EAAA,SAAS,GAAG,CAN6D;AAOzE,EAAA,SAAS,GAAG,CAP6D;AAQzE,EAAA,QAAQ,GAAG,EAR8D;AASzE,EAAA,UAAU,GAAG,IAT4D;AAUzE;AACA,EAAA,QAAQ,GAAI,OAAD,IAAsB,SAXwC;AAYzE,EAAA,MAAM,GAAG,KAZgE;AAazE,EAAA,UAAU,GAAG,KAb4D;AAczE,EAAA,SAAS,GAAG,IAd6D;AAezE,EAAA,cAAc,EAAE,cAAc,GAAG,EAfwC;AAgBzE,EAAA,OAAO,GAAG;AAhB+D,CAAD,KAkBxE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,EAAA,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,iBADK,EAEZ,UAAU,IAAI,MAAM,CAAC,SAAP,CAAiB,QAFnB,EAGZ,MAAM,CAAC,SAAP,CAAiB,KAHL,EAIZ,MAAM,CAAC,SAAP,CAAiB,IAJL;AADhB,CAAA,EAQG,UAAU,IACT,KAAA,CAAA,aAAA,CAAC,KAAK,CAAC,QAAP,EAAe,IAAf,EACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,EAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,qBAAR;AAApB,CAAA,EACG,OAAO,cAAP,KAA0B,QAA1B,GACC,YAAY,CAAC,cAAD,EAAiB;AAAE,EAAA,UAAF;AAAc,EAAA,SAAd;AAAyB,EAAA,SAAzB;AAAoC,EAAA;AAApC,CAAjB,CADb,GAGC,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe;AACb,EAAA,UAAU,EAAE,UADC;AAEb,EAAA,SAAS,EAAE,SAFE;AAGb,EAAA,SAAS,EAAE,SAHE;AAIb,EAAA,UAAU,EAAE;AAJC,CAAf,CAJJ,CADF,EAaE,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe;AACb,EAAA,OAAO,EAAE,OADI;AACG,gBACJ,aAFC;AAGb,EAAA,QAAQ,EAAE,QAHG;AAIb,EAAA,UAAU,EAAE,UAAU,IAAI,SAAS,IAAI,CAJ1B;AAKb,EAAA,MAAM,EAAE,MALK;AAMb,EAAA,EAAE,EAAE,GAAG,QAAQ,WAAW,QAAQ,EAAE,EANvB;AAOb,EAAA,SAAS,EAAE,MAAM,CAAC,uBAPL;AAQb,EAAA,SAAS,EAAE;AARE,CAAf,CAbF,CATJ,CAlBK;AAsDP,aAAa,CAAC,WAAd,GAA4B,eAA5B","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\nimport { fillTemplate } from '../../helpers';\nimport { DropdownToggle } from '../Dropdown';\nlet toggleId = 0;\nexport const OptionsToggle = ({ itemsTitle = 'items', optionsToggle = 'Select', \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nitemsPerPageTitle = 'Items per page', firstIndex = 0, lastIndex = 0, itemCount = 0, widgetId = '', showToggle = true, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nonToggle = (_isOpen) => undefined, isOpen = false, isDisabled = false, parentRef = null, toggleTemplate: ToggleTemplate = '', onEnter = null }) => (React.createElement(\"div\", { className: css(styles.optionsMenuToggle, isDisabled && styles.modifiers.disabled, styles.modifiers.plain, styles.modifiers.text) }, showToggle && (React.createElement(React.Fragment, null,\n    React.createElement(\"span\", { className: css(styles.optionsMenuToggleText) }, typeof ToggleTemplate === 'string' ? (fillTemplate(ToggleTemplate, { firstIndex, lastIndex, itemCount, itemsTitle })) : (React.createElement(ToggleTemplate, { firstIndex: firstIndex, lastIndex: lastIndex, itemCount: itemCount, itemsTitle: itemsTitle }))),\n    React.createElement(DropdownToggle, { onEnter: onEnter, \"aria-label\": optionsToggle, onToggle: onToggle, isDisabled: isDisabled || itemCount <= 0, isOpen: isOpen, id: `${widgetId}-toggle-${toggleId++}`, className: styles.optionsMenuToggleButton, parentRef: parentRef })))));\nOptionsToggle.displayName = 'OptionsToggle';\n//# sourceMappingURL=OptionsToggle.js.map"]},"metadata":{},"sourceType":"module"}