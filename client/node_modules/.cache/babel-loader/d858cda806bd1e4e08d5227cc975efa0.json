{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { formatBreakpointMods, toCamel } from '../../helpers/util';\nexport var ToolbarGroupVariant;\n\n(function (ToolbarGroupVariant) {\n  ToolbarGroupVariant[\"filter-group\"] = \"filter-group\";\n  ToolbarGroupVariant[\"icon-button-group\"] = \"icon-button-group\";\n  ToolbarGroupVariant[\"button-group\"] = \"button-group\";\n})(ToolbarGroupVariant || (ToolbarGroupVariant = {}));\n\nclass ToolbarGroupWithRef extends React.Component {\n  render() {\n    const _a = this.props,\n          {\n      visibility,\n      visiblity,\n      alignment,\n      spacer,\n      spaceItems,\n      className,\n      variant,\n      children,\n      innerRef\n    } = _a,\n          props = __rest(_a, [\"visibility\", \"visiblity\", \"alignment\", \"spacer\", \"spaceItems\", \"className\", \"variant\", \"children\", \"innerRef\"]);\n\n    if (visiblity !== undefined) {\n      // eslint-disable-next-line no-console\n      console.warn('The ToolbarGroup visiblity prop has been deprecated. ' + 'Please use the correctly spelled visibility prop instead.');\n    }\n\n    return React.createElement(\"div\", Object.assign({\n      className: css(styles.toolbarGroup, variant && styles.modifiers[toCamel(variant)], formatBreakpointMods(visibility || visiblity, styles), formatBreakpointMods(alignment, styles), formatBreakpointMods(spacer, styles), formatBreakpointMods(spaceItems, styles), className)\n    }, props, {\n      ref: innerRef\n    }), children);\n  }\n\n}\n\nexport const ToolbarGroup = React.forwardRef((props, ref) => React.createElement(ToolbarGroupWithRef, Object.assign({}, props, {\n  innerRef: ref\n})));","map":{"version":3,"sources":["../../../../src/components/Toolbar/ToolbarGroup.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,yDAAnB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,SAAS,oBAAT,EAA+B,OAA/B,QAA8C,oBAA9C;AAEA,OAAA,IAAY,mBAAZ;;AAAA,CAAA,UAAY,mBAAZ,EAA+B;AAC7B,EAAA,mBAAA,CAAA,cAAA,CAAA,GAAA,cAAA;AACA,EAAA,mBAAA,CAAA,mBAAA,CAAA,GAAA,mBAAA;AACA,EAAA,mBAAA,CAAA,cAAA,CAAA,GAAA,cAAA;AACD,CAJD,EAAY,mBAAmB,KAAnB,mBAAmB,GAAA,EAAA,CAA/B;;AAyDA,MAAM,mBAAN,SAAkC,KAAK,CAAC,SAAxC,CAAoE;AAClE,EAAA,MAAM,GAAA;AACJ,UAAM,EAAA,GAWF,KAAK,KAXT;AAAA,UAAM;AACJ,MAAA,UADI;AAEJ,MAAA,SAFI;AAGJ,MAAA,SAHI;AAIJ,MAAA,MAJI;AAKJ,MAAA,UALI;AAMJ,MAAA,SANI;AAOJ,MAAA,OAPI;AAQJ,MAAA,QARI;AASJ,MAAA;AATI,QASI,EATV;AAAA,UAUK,KAAK,GAAA,MAAA,CAAA,EAAA,EAVJ,CAAA,YAAA,EAAA,WAAA,EAAA,WAAA,EAAA,QAAA,EAAA,YAAA,EAAA,WAAA,EAAA,SAAA,EAAA,UAAA,EAAA,UAAA,CAUI,CAVV;;AAaA,QAAI,SAAS,KAAK,SAAlB,EAA6B;AAC3B;AACA,MAAA,OAAO,CAAC,IAAR,CACE,0DACE,2DAFJ;AAID;;AAED,WACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACE,MAAA,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,YADK,EAEZ,OAAO,IAAI,MAAM,CAAC,SAAP,CAAiB,OAAO,CAAC,OAAD,CAAxB,CAFC,EAGZ,oBAAoB,CAAC,UAAU,IAAI,SAAf,EAA0B,MAA1B,CAHR,EAIZ,oBAAoB,CAAC,SAAD,EAAY,MAAZ,CAJR,EAKZ,oBAAoB,CAAC,MAAD,EAAS,MAAT,CALR,EAMZ,oBAAoB,CAAC,UAAD,EAAa,MAAb,CANR,EAOZ,SAPY;AADhB,KAAA,EAUM,KAVN,EAUW;AACT,MAAA,GAAG,EAAE;AADI,KAVX,CAAA,EAaG,QAbH,CADF;AAiBD;;AAxCiE;;AA2CpE,OAAO,MAAM,YAAY,GAAG,KAAK,CAAC,UAAN,CAAiB,CAAC,KAAD,EAA2B,GAA3B,KAC3C,KAAA,CAAA,aAAA,CAAC,mBAAD,EAAoB,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,EAAU;AAAE,EAAA,QAAQ,EAAE;AAAZ,CAAV,CAApB,CAD0B,CAArB","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { formatBreakpointMods, toCamel } from '../../helpers/util';\nexport var ToolbarGroupVariant;\n(function (ToolbarGroupVariant) {\n    ToolbarGroupVariant[\"filter-group\"] = \"filter-group\";\n    ToolbarGroupVariant[\"icon-button-group\"] = \"icon-button-group\";\n    ToolbarGroupVariant[\"button-group\"] = \"button-group\";\n})(ToolbarGroupVariant || (ToolbarGroupVariant = {}));\nclass ToolbarGroupWithRef extends React.Component {\n    render() {\n        const _a = this.props, { visibility, visiblity, alignment, spacer, spaceItems, className, variant, children, innerRef } = _a, props = __rest(_a, [\"visibility\", \"visiblity\", \"alignment\", \"spacer\", \"spaceItems\", \"className\", \"variant\", \"children\", \"innerRef\"]);\n        if (visiblity !== undefined) {\n            // eslint-disable-next-line no-console\n            console.warn('The ToolbarGroup visiblity prop has been deprecated. ' +\n                'Please use the correctly spelled visibility prop instead.');\n        }\n        return (React.createElement(\"div\", Object.assign({ className: css(styles.toolbarGroup, variant && styles.modifiers[toCamel(variant)], formatBreakpointMods(visibility || visiblity, styles), formatBreakpointMods(alignment, styles), formatBreakpointMods(spacer, styles), formatBreakpointMods(spaceItems, styles), className) }, props, { ref: innerRef }), children));\n    }\n}\nexport const ToolbarGroup = React.forwardRef((props, ref) => (React.createElement(ToolbarGroupWithRef, Object.assign({}, props, { innerRef: ref }))));\n//# sourceMappingURL=ToolbarGroup.js.map"]},"metadata":{},"sourceType":"module"}