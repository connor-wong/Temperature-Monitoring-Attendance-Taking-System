{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport { Modal, ModalVariant } from '../Modal';\nimport { WizardFooterInternal } from './WizardFooterInternal';\nimport { WizardToggle } from './WizardToggle';\nimport { WizardNav } from './WizardNav';\nimport { WizardNavItem } from './WizardNavItem';\nimport { WizardContextProvider } from './WizardContext';\nimport { WizardHeader } from './WizardHeader';\nexport class Wizard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleKeyClicks = event => {\n      if (event.keyCode === KEY_CODES.ESCAPE_KEY) {\n        if (this.state.isNavOpen) {\n          this.setState({\n            isNavOpen: !this.state.isNavOpen\n          });\n        } else if (this.props.isOpen) {\n          this.props.onClose();\n        }\n      }\n    };\n\n    this.onNext = () => {\n      const {\n        onNext,\n        onClose,\n        onSave\n      } = this.props;\n      const {\n        currentStep\n      } = this.state;\n      const flattenedSteps = this.getFlattenedSteps();\n      const maxSteps = flattenedSteps.length;\n\n      if (currentStep >= maxSteps) {\n        // Hit the save button at the end of the wizard\n        if (onSave) {\n          return onSave();\n        }\n\n        return onClose();\n      } else {\n        const newStep = currentStep + 1;\n        this.setState({\n          currentStep: newStep\n        });\n        const {\n          id: prevId,\n          name: prevName\n        } = flattenedSteps[currentStep - 1];\n        const {\n          id,\n          name\n        } = flattenedSteps[newStep - 1];\n        return onNext && onNext({\n          id,\n          name\n        }, {\n          prevId,\n          prevName\n        });\n      }\n    };\n\n    this.onBack = () => {\n      const {\n        onBack\n      } = this.props;\n      const {\n        currentStep\n      } = this.state;\n      const flattenedSteps = this.getFlattenedSteps();\n\n      if (flattenedSteps.length < currentStep) {\n        // Previous step was removed, just update the currentStep state\n        const adjustedStep = flattenedSteps.length;\n        this.setState({\n          currentStep: adjustedStep\n        });\n      } else {\n        const newStep = currentStep - 1 <= 0 ? 0 : currentStep - 1;\n        this.setState({\n          currentStep: newStep\n        });\n        const {\n          id: prevId,\n          name: prevName\n        } = flattenedSteps[newStep];\n        const {\n          id,\n          name\n        } = flattenedSteps[newStep - 1];\n        return onBack && onBack({\n          id,\n          name\n        }, {\n          prevId,\n          prevName\n        });\n      }\n    };\n\n    this.goToStep = step => {\n      const {\n        onGoToStep\n      } = this.props;\n      const {\n        currentStep\n      } = this.state;\n      const flattenedSteps = this.getFlattenedSteps();\n      const maxSteps = flattenedSteps.length;\n\n      if (step < 1) {\n        step = 1;\n      } else if (step > maxSteps) {\n        step = maxSteps;\n      }\n\n      this.setState({\n        currentStep: step,\n        isNavOpen: false\n      });\n      const {\n        id: prevId,\n        name: prevName\n      } = flattenedSteps[currentStep - 1];\n      const {\n        id,\n        name\n      } = flattenedSteps[step - 1];\n      return onGoToStep && onGoToStep({\n        id,\n        name\n      }, {\n        prevId,\n        prevName\n      });\n    };\n\n    this.goToStepById = stepId => {\n      const flattenedSteps = this.getFlattenedSteps();\n      let step;\n\n      for (let i = 0; i < flattenedSteps.length; i++) {\n        if (flattenedSteps[i].id === stepId) {\n          step = i + 1;\n          break;\n        }\n      }\n\n      if (step) {\n        this.setState({\n          currentStep: step\n        });\n      }\n    };\n\n    this.goToStepByName = stepName => {\n      const flattenedSteps = this.getFlattenedSteps();\n      let step;\n\n      for (let i = 0; i < flattenedSteps.length; i++) {\n        if (flattenedSteps[i].name === stepName) {\n          step = i + 1;\n          break;\n        }\n      }\n\n      if (step) {\n        this.setState({\n          currentStep: step\n        });\n      }\n    };\n\n    this.getFlattenedSteps = () => {\n      const {\n        steps\n      } = this.props;\n      const flattenedSteps = [];\n\n      for (const step of steps) {\n        if (step.steps) {\n          for (const childStep of step.steps) {\n            flattenedSteps.push(childStep);\n          }\n        } else {\n          flattenedSteps.push(step);\n        }\n      }\n\n      return flattenedSteps;\n    };\n\n    this.getFlattenedStepsIndex = (flattenedSteps, stepName) => {\n      for (let i = 0; i < flattenedSteps.length; i++) {\n        if (flattenedSteps[i].name === stepName) {\n          return i + 1;\n        }\n      }\n\n      return 0;\n    };\n\n    this.initSteps = steps => {\n      // Set default Step values\n      for (let i = 0; i < steps.length; i++) {\n        if (steps[i].steps) {\n          for (let j = 0; j < steps[i].steps.length; j++) {\n            steps[i].steps[j] = Object.assign({\n              canJumpTo: true\n            }, steps[i].steps[j]);\n          }\n        }\n\n        steps[i] = Object.assign({\n          canJumpTo: true\n        }, steps[i]);\n      }\n\n      return steps;\n    };\n\n    this.getElement = appendTo => {\n      if (typeof appendTo === 'function') {\n        return appendTo();\n      }\n\n      return appendTo || document.body;\n    };\n\n    const newId = Wizard.currentId++;\n    this.titleId = props.titleId || `pf-wizard-title-${newId}`;\n    this.descriptionId = props.descriptionId || `pf-wizard-description-${newId}`;\n    this.state = {\n      currentStep: this.props.startAtStep && Number.isInteger(this.props.startAtStep) ? this.props.startAtStep : 1,\n      isNavOpen: false\n    };\n  }\n\n  componentDidMount() {\n    const target = typeof document !== 'undefined' ? document.body : null;\n\n    if (target) {\n      target.addEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  componentWillUnmount() {\n    const target = typeof document !== 'undefined' && document.body || null;\n\n    if (target) {\n      target.removeEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      width,\n      height,\n      title,\n      description,\n      onClose,\n      onSave,\n      onBack,\n      onNext,\n      onGoToStep,\n      className,\n      steps,\n      startAtStep,\n      nextButtonText = 'Next',\n      backButtonText = 'Back',\n      cancelButtonText = 'Cancel',\n      hideClose,\n      closeButtonAriaLabel = 'Close',\n      navAriaLabel,\n      navAriaLabelledBy,\n      mainAriaLabel,\n      mainAriaLabelledBy,\n      hasNoBodyPadding,\n      footer,\n      appendTo,\n      isOpen,\n      titleId,\n      descriptionId\n    } = _a,\n          rest = __rest(_a, [\"width\", \"height\", \"title\", \"description\", \"onClose\", \"onSave\", \"onBack\", \"onNext\", \"onGoToStep\", \"className\", \"steps\", \"startAtStep\", \"nextButtonText\", \"backButtonText\", \"cancelButtonText\", \"hideClose\", \"closeButtonAriaLabel\", \"navAriaLabel\", \"navAriaLabelledBy\", \"mainAriaLabel\", \"mainAriaLabelledBy\", \"hasNoBodyPadding\", \"footer\", \"appendTo\", \"isOpen\", \"titleId\", \"descriptionId\"])\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ;\n\n    const {\n      currentStep\n    } = this.state;\n    const flattenedSteps = this.getFlattenedSteps();\n    const adjustedStep = flattenedSteps.length < currentStep ? flattenedSteps.length : currentStep;\n    const activeStep = flattenedSteps[adjustedStep - 1];\n    const computedSteps = this.initSteps(steps);\n    const firstStep = activeStep === flattenedSteps[0];\n    const isValid = activeStep && activeStep.enableNext !== undefined ? activeStep.enableNext : true;\n\n    const nav = isWizardNavOpen => {\n      const wizNavAProps = {\n        isOpen: isWizardNavOpen,\n        'aria-label': navAriaLabel,\n        'aria-labelledby': (title || navAriaLabelledBy) && (navAriaLabelledBy || this.titleId)\n      };\n      return React.createElement(WizardNav, Object.assign({}, wizNavAProps), computedSteps.map((step, index) => {\n        if (step.isFinishedStep) {\n          // Don't show finished step in the side nav\n          return;\n        }\n\n        let enabled;\n        let navItemStep;\n\n        if (step.steps) {\n          let hasActiveChild = false;\n          let canJumpToParent = false;\n\n          for (const subStep of step.steps) {\n            if (activeStep.name === subStep.name) {\n              // one of the children matches\n              hasActiveChild = true;\n            }\n\n            if (subStep.canJumpTo) {\n              canJumpToParent = true;\n            }\n          }\n\n          navItemStep = this.getFlattenedStepsIndex(flattenedSteps, step.steps[0].name);\n          return React.createElement(WizardNavItem, {\n            key: index,\n            content: step.name,\n            isCurrent: hasActiveChild,\n            isDisabled: !canJumpToParent,\n            step: navItemStep,\n            onNavItemClick: this.goToStep\n          }, React.createElement(WizardNav, Object.assign({}, wizNavAProps, {\n            returnList: true\n          }), step.steps.map((childStep, indexChild) => {\n            if (childStep.isFinishedStep) {\n              // Don't show finished step in the side nav\n              return;\n            }\n\n            navItemStep = this.getFlattenedStepsIndex(flattenedSteps, childStep.name);\n            enabled = childStep.canJumpTo;\n            return React.createElement(WizardNavItem, {\n              key: `child_${indexChild}`,\n              content: childStep.name,\n              isCurrent: activeStep.name === childStep.name,\n              isDisabled: !enabled,\n              step: navItemStep,\n              onNavItemClick: this.goToStep\n            });\n          })));\n        }\n\n        navItemStep = this.getFlattenedStepsIndex(flattenedSteps, step.name);\n        enabled = step.canJumpTo;\n        return React.createElement(WizardNavItem, Object.assign({}, step.stepNavItemProps, {\n          key: index,\n          content: step.name,\n          isCurrent: activeStep.name === step.name,\n          isDisabled: !enabled,\n          step: navItemStep,\n          onNavItemClick: this.goToStep\n        }));\n      }));\n    };\n\n    const context = {\n      goToStepById: this.goToStepById,\n      goToStepByName: this.goToStepByName,\n      onNext: this.onNext,\n      onBack: this.onBack,\n      onClose,\n      activeStep\n    };\n    const divStyles = Object.assign(Object.assign({}, height ? {\n      height\n    } : {}), width ? {\n      width\n    } : {});\n    const wizard = React.createElement(WizardContextProvider, {\n      value: context\n    }, React.createElement(\"div\", Object.assign({}, rest, {\n      className: css(styles.wizard, activeStep && activeStep.isFinishedStep && 'pf-m-finished', className),\n      style: Object.keys(divStyles).length ? divStyles : undefined\n    }), title && React.createElement(WizardHeader, {\n      titleId: this.titleId,\n      descriptionId: this.descriptionId,\n      onClose: onClose,\n      title: title,\n      description: description,\n      closeButtonAriaLabel: closeButtonAriaLabel,\n      hideClose: hideClose\n    }), React.createElement(WizardToggle, {\n      mainAriaLabel: mainAriaLabel,\n      isInPage: isOpen === undefined,\n      mainAriaLabelledBy: (title || mainAriaLabelledBy) && (mainAriaLabelledBy || this.titleId),\n      isNavOpen: this.state.isNavOpen,\n      onNavToggle: isNavOpen => this.setState({\n        isNavOpen\n      }),\n      nav: nav,\n      steps: steps,\n      activeStep: activeStep,\n      hasNoBodyPadding: hasNoBodyPadding\n    }, footer || React.createElement(WizardFooterInternal, {\n      onNext: this.onNext,\n      onBack: this.onBack,\n      onClose: onClose,\n      isValid: isValid,\n      firstStep: firstStep,\n      activeStep: activeStep,\n      nextButtonText: activeStep && activeStep.nextButtonText || nextButtonText,\n      backButtonText: backButtonText,\n      cancelButtonText: cancelButtonText\n    }))));\n\n    if (isOpen !== undefined) {\n      return React.createElement(Modal, {\n        width: width !== null ? width : undefined,\n        isOpen: isOpen,\n        variant: ModalVariant.large,\n        \"aria-labelledby\": this.titleId,\n        \"aria-describedby\": this.descriptionId,\n        showClose: false,\n        hasNoBodyWrapper: true\n      }, wizard);\n    }\n\n    return wizard;\n  }\n\n}\nWizard.displayName = 'Wizard';\nWizard.currentId = 0;\nWizard.defaultProps = {\n  title: null,\n  description: '',\n  className: '',\n  startAtStep: 1,\n  nextButtonText: 'Next',\n  backButtonText: 'Back',\n  cancelButtonText: 'Cancel',\n  hideClose: false,\n  closeButtonAriaLabel: 'Close',\n  navAriaLabel: null,\n  navAriaLabelledBy: null,\n  mainAriaLabel: null,\n  mainAriaLabelledBy: null,\n  hasNoBodyPadding: false,\n  onBack: null,\n  onNext: null,\n  onGoToStep: null,\n  width: null,\n  height: null,\n  footer: null,\n  onClose: () => undefined,\n  appendTo: null,\n  isOpen: undefined\n};","map":{"version":3,"sources":["../../../../src/components/Wizard/Wizard.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport { Modal, ModalVariant } from '../Modal';\nimport { WizardFooterInternal } from './WizardFooterInternal';\nimport { WizardToggle } from './WizardToggle';\nimport { WizardNav } from './WizardNav';\nimport { WizardNavItem } from './WizardNavItem';\nimport { WizardContextProvider } from './WizardContext';\nimport { WizardHeader } from './WizardHeader';\nexport class Wizard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleKeyClicks = (event) => {\n            if (event.keyCode === KEY_CODES.ESCAPE_KEY) {\n                if (this.state.isNavOpen) {\n                    this.setState({ isNavOpen: !this.state.isNavOpen });\n                }\n                else if (this.props.isOpen) {\n                    this.props.onClose();\n                }\n            }\n        };\n        this.onNext = () => {\n            const { onNext, onClose, onSave } = this.props;\n            const { currentStep } = this.state;\n            const flattenedSteps = this.getFlattenedSteps();\n            const maxSteps = flattenedSteps.length;\n            if (currentStep >= maxSteps) {\n                // Hit the save button at the end of the wizard\n                if (onSave) {\n                    return onSave();\n                }\n                return onClose();\n            }\n            else {\n                const newStep = currentStep + 1;\n                this.setState({\n                    currentStep: newStep\n                });\n                const { id: prevId, name: prevName } = flattenedSteps[currentStep - 1];\n                const { id, name } = flattenedSteps[newStep - 1];\n                return onNext && onNext({ id, name }, { prevId, prevName });\n            }\n        };\n        this.onBack = () => {\n            const { onBack } = this.props;\n            const { currentStep } = this.state;\n            const flattenedSteps = this.getFlattenedSteps();\n            if (flattenedSteps.length < currentStep) {\n                // Previous step was removed, just update the currentStep state\n                const adjustedStep = flattenedSteps.length;\n                this.setState({\n                    currentStep: adjustedStep\n                });\n            }\n            else {\n                const newStep = currentStep - 1 <= 0 ? 0 : currentStep - 1;\n                this.setState({\n                    currentStep: newStep\n                });\n                const { id: prevId, name: prevName } = flattenedSteps[newStep];\n                const { id, name } = flattenedSteps[newStep - 1];\n                return onBack && onBack({ id, name }, { prevId, prevName });\n            }\n        };\n        this.goToStep = (step) => {\n            const { onGoToStep } = this.props;\n            const { currentStep } = this.state;\n            const flattenedSteps = this.getFlattenedSteps();\n            const maxSteps = flattenedSteps.length;\n            if (step < 1) {\n                step = 1;\n            }\n            else if (step > maxSteps) {\n                step = maxSteps;\n            }\n            this.setState({ currentStep: step, isNavOpen: false });\n            const { id: prevId, name: prevName } = flattenedSteps[currentStep - 1];\n            const { id, name } = flattenedSteps[step - 1];\n            return onGoToStep && onGoToStep({ id, name }, { prevId, prevName });\n        };\n        this.goToStepById = (stepId) => {\n            const flattenedSteps = this.getFlattenedSteps();\n            let step;\n            for (let i = 0; i < flattenedSteps.length; i++) {\n                if (flattenedSteps[i].id === stepId) {\n                    step = i + 1;\n                    break;\n                }\n            }\n            if (step) {\n                this.setState({ currentStep: step });\n            }\n        };\n        this.goToStepByName = (stepName) => {\n            const flattenedSteps = this.getFlattenedSteps();\n            let step;\n            for (let i = 0; i < flattenedSteps.length; i++) {\n                if (flattenedSteps[i].name === stepName) {\n                    step = i + 1;\n                    break;\n                }\n            }\n            if (step) {\n                this.setState({ currentStep: step });\n            }\n        };\n        this.getFlattenedSteps = () => {\n            const { steps } = this.props;\n            const flattenedSteps = [];\n            for (const step of steps) {\n                if (step.steps) {\n                    for (const childStep of step.steps) {\n                        flattenedSteps.push(childStep);\n                    }\n                }\n                else {\n                    flattenedSteps.push(step);\n                }\n            }\n            return flattenedSteps;\n        };\n        this.getFlattenedStepsIndex = (flattenedSteps, stepName) => {\n            for (let i = 0; i < flattenedSteps.length; i++) {\n                if (flattenedSteps[i].name === stepName) {\n                    return i + 1;\n                }\n            }\n            return 0;\n        };\n        this.initSteps = (steps) => {\n            // Set default Step values\n            for (let i = 0; i < steps.length; i++) {\n                if (steps[i].steps) {\n                    for (let j = 0; j < steps[i].steps.length; j++) {\n                        steps[i].steps[j] = Object.assign({ canJumpTo: true }, steps[i].steps[j]);\n                    }\n                }\n                steps[i] = Object.assign({ canJumpTo: true }, steps[i]);\n            }\n            return steps;\n        };\n        this.getElement = (appendTo) => {\n            if (typeof appendTo === 'function') {\n                return appendTo();\n            }\n            return appendTo || document.body;\n        };\n        const newId = Wizard.currentId++;\n        this.titleId = props.titleId || `pf-wizard-title-${newId}`;\n        this.descriptionId = props.descriptionId || `pf-wizard-description-${newId}`;\n        this.state = {\n            currentStep: this.props.startAtStep && Number.isInteger(this.props.startAtStep) ? this.props.startAtStep : 1,\n            isNavOpen: false\n        };\n    }\n    componentDidMount() {\n        const target = typeof document !== 'undefined' ? document.body : null;\n        if (target) {\n            target.addEventListener('keydown', this.handleKeyClicks, false);\n        }\n    }\n    componentWillUnmount() {\n        const target = (typeof document !== 'undefined' && document.body) || null;\n        if (target) {\n            target.removeEventListener('keydown', this.handleKeyClicks, false);\n        }\n    }\n    render() {\n        const _a = this.props, { \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        width, height, title, description, onClose, onSave, onBack, onNext, onGoToStep, className, steps, startAtStep, nextButtonText = 'Next', backButtonText = 'Back', cancelButtonText = 'Cancel', hideClose, closeButtonAriaLabel = 'Close', navAriaLabel, navAriaLabelledBy, mainAriaLabel, mainAriaLabelledBy, hasNoBodyPadding, footer, appendTo, isOpen, titleId, descriptionId } = _a, rest = __rest(_a, [\"width\", \"height\", \"title\", \"description\", \"onClose\", \"onSave\", \"onBack\", \"onNext\", \"onGoToStep\", \"className\", \"steps\", \"startAtStep\", \"nextButtonText\", \"backButtonText\", \"cancelButtonText\", \"hideClose\", \"closeButtonAriaLabel\", \"navAriaLabel\", \"navAriaLabelledBy\", \"mainAriaLabel\", \"mainAriaLabelledBy\", \"hasNoBodyPadding\", \"footer\", \"appendTo\", \"isOpen\", \"titleId\", \"descriptionId\"])\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        ;\n        const { currentStep } = this.state;\n        const flattenedSteps = this.getFlattenedSteps();\n        const adjustedStep = flattenedSteps.length < currentStep ? flattenedSteps.length : currentStep;\n        const activeStep = flattenedSteps[adjustedStep - 1];\n        const computedSteps = this.initSteps(steps);\n        const firstStep = activeStep === flattenedSteps[0];\n        const isValid = activeStep && activeStep.enableNext !== undefined ? activeStep.enableNext : true;\n        const nav = (isWizardNavOpen) => {\n            const wizNavAProps = {\n                isOpen: isWizardNavOpen,\n                'aria-label': navAriaLabel,\n                'aria-labelledby': (title || navAriaLabelledBy) && (navAriaLabelledBy || this.titleId)\n            };\n            return (React.createElement(WizardNav, Object.assign({}, wizNavAProps), computedSteps.map((step, index) => {\n                if (step.isFinishedStep) {\n                    // Don't show finished step in the side nav\n                    return;\n                }\n                let enabled;\n                let navItemStep;\n                if (step.steps) {\n                    let hasActiveChild = false;\n                    let canJumpToParent = false;\n                    for (const subStep of step.steps) {\n                        if (activeStep.name === subStep.name) {\n                            // one of the children matches\n                            hasActiveChild = true;\n                        }\n                        if (subStep.canJumpTo) {\n                            canJumpToParent = true;\n                        }\n                    }\n                    navItemStep = this.getFlattenedStepsIndex(flattenedSteps, step.steps[0].name);\n                    return (React.createElement(WizardNavItem, { key: index, content: step.name, isCurrent: hasActiveChild, isDisabled: !canJumpToParent, step: navItemStep, onNavItemClick: this.goToStep },\n                        React.createElement(WizardNav, Object.assign({}, wizNavAProps, { returnList: true }), step.steps.map((childStep, indexChild) => {\n                            if (childStep.isFinishedStep) {\n                                // Don't show finished step in the side nav\n                                return;\n                            }\n                            navItemStep = this.getFlattenedStepsIndex(flattenedSteps, childStep.name);\n                            enabled = childStep.canJumpTo;\n                            return (React.createElement(WizardNavItem, { key: `child_${indexChild}`, content: childStep.name, isCurrent: activeStep.name === childStep.name, isDisabled: !enabled, step: navItemStep, onNavItemClick: this.goToStep }));\n                        }))));\n                }\n                navItemStep = this.getFlattenedStepsIndex(flattenedSteps, step.name);\n                enabled = step.canJumpTo;\n                return (React.createElement(WizardNavItem, Object.assign({}, step.stepNavItemProps, { key: index, content: step.name, isCurrent: activeStep.name === step.name, isDisabled: !enabled, step: navItemStep, onNavItemClick: this.goToStep })));\n            })));\n        };\n        const context = {\n            goToStepById: this.goToStepById,\n            goToStepByName: this.goToStepByName,\n            onNext: this.onNext,\n            onBack: this.onBack,\n            onClose,\n            activeStep\n        };\n        const divStyles = Object.assign(Object.assign({}, (height ? { height } : {})), (width ? { width } : {}));\n        const wizard = (React.createElement(WizardContextProvider, { value: context },\n            React.createElement(\"div\", Object.assign({}, rest, { className: css(styles.wizard, activeStep && activeStep.isFinishedStep && 'pf-m-finished', className), style: Object.keys(divStyles).length ? divStyles : undefined }),\n                title && (React.createElement(WizardHeader, { titleId: this.titleId, descriptionId: this.descriptionId, onClose: onClose, title: title, description: description, closeButtonAriaLabel: closeButtonAriaLabel, hideClose: hideClose })),\n                React.createElement(WizardToggle, { mainAriaLabel: mainAriaLabel, isInPage: isOpen === undefined, mainAriaLabelledBy: (title || mainAriaLabelledBy) && (mainAriaLabelledBy || this.titleId), isNavOpen: this.state.isNavOpen, onNavToggle: isNavOpen => this.setState({ isNavOpen }), nav: nav, steps: steps, activeStep: activeStep, hasNoBodyPadding: hasNoBodyPadding }, footer || (React.createElement(WizardFooterInternal, { onNext: this.onNext, onBack: this.onBack, onClose: onClose, isValid: isValid, firstStep: firstStep, activeStep: activeStep, nextButtonText: (activeStep && activeStep.nextButtonText) || nextButtonText, backButtonText: backButtonText, cancelButtonText: cancelButtonText }))))));\n        if (isOpen !== undefined) {\n            return (React.createElement(Modal, { width: width !== null ? width : undefined, isOpen: isOpen, variant: ModalVariant.large, \"aria-labelledby\": this.titleId, \"aria-describedby\": this.descriptionId, showClose: false, hasNoBodyWrapper: true }, wizard));\n        }\n        return wizard;\n    }\n}\nWizard.displayName = 'Wizard';\nWizard.currentId = 0;\nWizard.defaultProps = {\n    title: null,\n    description: '',\n    className: '',\n    startAtStep: 1,\n    nextButtonText: 'Next',\n    backButtonText: 'Back',\n    cancelButtonText: 'Cancel',\n    hideClose: false,\n    closeButtonAriaLabel: 'Close',\n    navAriaLabel: null,\n    navAriaLabelledBy: null,\n    mainAriaLabel: null,\n    mainAriaLabelledBy: null,\n    hasNoBodyPadding: false,\n    onBack: null,\n    onNext: null,\n    onGoToStep: null,\n    width: null,\n    height: null,\n    footer: null,\n    onClose: () => undefined,\n    appendTo: null,\n    isOpen: undefined\n};\n//# sourceMappingURL=Wizard.js.map"]},"metadata":{},"sourceType":"module"}