{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Label/label';\nimport { Button } from '../Button';\nimport { Tooltip } from '../Tooltip';\nimport { css } from '@patternfly/react-styles';\nimport TimesIcon from \"@patternfly/react-icons/dist/esm/icons/times-icon\";\nconst colorStyles = {\n  blue: styles.modifiers.blue,\n  cyan: styles.modifiers.cyan,\n  green: styles.modifiers.green,\n  orange: styles.modifiers.orange,\n  purple: styles.modifiers.purple,\n  red: styles.modifiers.red,\n  grey: ''\n};\nexport const Label = _a => {\n  var {\n    children,\n    className = '',\n    color = 'grey',\n    variant = 'filled',\n    isTruncated = false,\n    tooltipPosition,\n    icon,\n    onClose,\n    closeBtn,\n    closeBtnProps,\n    href,\n    isOverflowLabel,\n    render\n  } = _a,\n      props = __rest(_a, [\"children\", \"className\", \"color\", \"variant\", \"isTruncated\", \"tooltipPosition\", \"icon\", \"onClose\", \"closeBtn\", \"closeBtnProps\", \"href\", \"isOverflowLabel\", \"render\"]);\n\n  const LabelComponent = isOverflowLabel ? 'button' : 'span';\n  const Component = href ? 'a' : 'span';\n  const button = closeBtn ? closeBtn : React.createElement(Button, Object.assign({\n    type: \"button\",\n    variant: \"plain\",\n    onClick: onClose\n  }, Object.assign({\n    'aria-label': 'label-close-button'\n  }, closeBtnProps)), React.createElement(TimesIcon, null));\n  const textRef = React.createRef(); // ref to apply tooltip when rendered is used\n\n  const componentRef = React.useRef();\n  const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n  React.useLayoutEffect(() => {\n    setIsTooltipVisible(textRef.current && textRef.current.offsetWidth < textRef.current.scrollWidth);\n  }, []);\n  const content = React.createElement(React.Fragment, null, icon && React.createElement(\"span\", {\n    className: css(styles.labelIcon)\n  }, icon), isTruncated && React.createElement(\"span\", {\n    ref: textRef,\n    className: css(styles.labelText)\n  }, children), !isTruncated && children);\n  let labelComponentChild = React.createElement(Component, Object.assign({\n    className: css(styles.labelContent)\n  }, href && {\n    href\n  }), content);\n\n  if (render) {\n    labelComponentChild = React.createElement(React.Fragment, null, isTooltipVisible && React.createElement(Tooltip, {\n      reference: componentRef,\n      content: children,\n      position: tooltipPosition\n    }), render({\n      className: styles.labelContent,\n      content,\n      componentRef\n    }));\n  } else if (isTooltipVisible) {\n    labelComponentChild = React.createElement(Tooltip, {\n      content: children,\n      position: tooltipPosition\n    }, React.createElement(Component, Object.assign({\n      className: css(styles.labelContent)\n    }, href && {\n      href\n    }), content));\n  }\n\n  return React.createElement(LabelComponent, Object.assign({}, props, {\n    className: css(styles.label, colorStyles[color], variant === 'outline' && styles.modifiers.outline, isOverflowLabel && styles.modifiers.overflow, className)\n  }), labelComponentChild, onClose && button);\n};\nLabel.displayName = 'Label';","map":{"version":3,"sources":["../../../../src/components/Label/Label.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Label/label';\nimport { Button } from '../Button';\nimport { Tooltip } from '../Tooltip';\nimport { css } from '@patternfly/react-styles';\nimport TimesIcon from \"@patternfly/react-icons/dist/esm/icons/times-icon\";\nconst colorStyles = {\n    blue: styles.modifiers.blue,\n    cyan: styles.modifiers.cyan,\n    green: styles.modifiers.green,\n    orange: styles.modifiers.orange,\n    purple: styles.modifiers.purple,\n    red: styles.modifiers.red,\n    grey: ''\n};\nexport const Label = (_a) => {\n    var { children, className = '', color = 'grey', variant = 'filled', isTruncated = false, tooltipPosition, icon, onClose, closeBtn, closeBtnProps, href, isOverflowLabel, render } = _a, props = __rest(_a, [\"children\", \"className\", \"color\", \"variant\", \"isTruncated\", \"tooltipPosition\", \"icon\", \"onClose\", \"closeBtn\", \"closeBtnProps\", \"href\", \"isOverflowLabel\", \"render\"]);\n    const LabelComponent = (isOverflowLabel ? 'button' : 'span');\n    const Component = href ? 'a' : 'span';\n    const button = closeBtn ? (closeBtn) : (React.createElement(Button, Object.assign({ type: \"button\", variant: \"plain\", onClick: onClose }, Object.assign({ 'aria-label': 'label-close-button' }, closeBtnProps)),\n        React.createElement(TimesIcon, null)));\n    const textRef = React.createRef();\n    // ref to apply tooltip when rendered is used\n    const componentRef = React.useRef();\n    const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n    React.useLayoutEffect(() => {\n        setIsTooltipVisible(textRef.current && textRef.current.offsetWidth < textRef.current.scrollWidth);\n    }, []);\n    const content = (React.createElement(React.Fragment, null,\n        icon && React.createElement(\"span\", { className: css(styles.labelIcon) }, icon),\n        isTruncated && (React.createElement(\"span\", { ref: textRef, className: css(styles.labelText) }, children)),\n        !isTruncated && children));\n    let labelComponentChild = (React.createElement(Component, Object.assign({ className: css(styles.labelContent) }, (href && { href })), content));\n    if (render) {\n        labelComponentChild = (React.createElement(React.Fragment, null,\n            isTooltipVisible && React.createElement(Tooltip, { reference: componentRef, content: children, position: tooltipPosition }),\n            render({\n                className: styles.labelContent,\n                content,\n                componentRef\n            })));\n    }\n    else if (isTooltipVisible) {\n        labelComponentChild = (React.createElement(Tooltip, { content: children, position: tooltipPosition },\n            React.createElement(Component, Object.assign({ className: css(styles.labelContent) }, (href && { href })), content)));\n    }\n    return (React.createElement(LabelComponent, Object.assign({}, props, { className: css(styles.label, colorStyles[color], variant === 'outline' && styles.modifiers.outline, isOverflowLabel && styles.modifiers.overflow, className) }),\n        labelComponentChild,\n        onClose && button));\n};\nLabel.displayName = 'Label';\n//# sourceMappingURL=Label.js.map"]},"metadata":{},"sourceType":"module"}