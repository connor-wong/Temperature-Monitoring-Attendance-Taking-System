{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.chromemanagement_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar chromemanagement_v1;\n\n(function (chromemanagement_v1) {\n  /**\n   * Chrome Management API\n   *\n   * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const chromemanagement = google.chromemanagement('v1');\n   * ```\n   */\n  class Chromemanagement {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.customers = new Resource$Customers(this.context);\n    }\n\n  }\n\n  chromemanagement_v1.Chromemanagement = Chromemanagement;\n\n  class Resource$Customers {\n    constructor(context) {\n      this.context = context;\n      this.reports = new Resource$Customers$Reports(this.context);\n    }\n\n  }\n\n  chromemanagement_v1.Resource$Customers = Resource$Customers;\n\n  class Resource$Customers$Reports {\n    constructor(context) {\n      this.context = context;\n    }\n\n    countChromeVersions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://chromemanagement.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+customer}/reports:countChromeVersions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    countInstalledApps(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://chromemanagement.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+customer}/reports:countInstalledApps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    findInstalledAppDevices(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://chromemanagement.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+customer}/reports:findInstalledAppDevices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  chromemanagement_v1.Resource$Customers$Reports = Resource$Customers$Reports;\n})(chromemanagement_v1 = exports.chromemanagement_v1 || (exports.chromemanagement_v1 = {}));","map":{"version":3,"sources":["C:/School Stuff/Modules/2021 Sem One/Final Year Project/Temperature Monitoring And Attendance Taking System/Web Interface Prototype/raspitar/node_modules/googleapis/build/src/apis/chromemanagement/v1.js"],"names":["Object","defineProperty","exports","value","chromemanagement_v1","googleapis_common_1","require","Chromemanagement","constructor","options","google","context","_options","customers","Resource$Customers","reports","Resource$Customers$Reports","countChromeVersions","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","countInstalledApps","findInstalledAppDevices"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.chromemanagement_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar chromemanagement_v1;\n(function (chromemanagement_v1) {\n    /**\n     * Chrome Management API\n     *\n     * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const chromemanagement = google.chromemanagement('v1');\n     * ```\n     */\n    class Chromemanagement {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.customers = new Resource$Customers(this.context);\n        }\n    }\n    chromemanagement_v1.Chromemanagement = Chromemanagement;\n    class Resource$Customers {\n        constructor(context) {\n            this.context = context;\n            this.reports = new Resource$Customers$Reports(this.context);\n        }\n    }\n    chromemanagement_v1.Resource$Customers = Resource$Customers;\n    class Resource$Customers$Reports {\n        constructor(context) {\n            this.context = context;\n        }\n        countChromeVersions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://chromemanagement.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+customer}/reports:countChromeVersions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        countInstalledApps(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://chromemanagement.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+customer}/reports:countInstalledApps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        findInstalledAppDevices(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://chromemanagement.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+customer}/reports:findInstalledAppDevices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    chromemanagement_v1.Resource$Customers$Reports = Resource$Customers$Reports;\n})(chromemanagement_v1 = exports.chromemanagement_v1 || (exports.chromemanagement_v1 = {}));\n//# sourceMappingURL=v1.js.map"]},"metadata":{},"sourceType":"script"}