{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Check/check';\nimport { css } from '@patternfly/react-styles'; // tslint:disable-next-line:no-empty\n\nconst defaultOnChange = () => {};\n\nexport class Checkbox extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.props.onChange(event.currentTarget.checked, event);\n    };\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      'aria-label': ariaLabel,\n      className,\n      onChange,\n      isValid,\n      isDisabled,\n      isChecked,\n      label,\n      checked,\n      defaultChecked,\n      description,\n      body\n    } = _a,\n          props = __rest(_a, ['aria-label', \"className\", \"onChange\", \"isValid\", \"isDisabled\", \"isChecked\", \"label\", \"checked\", \"defaultChecked\", \"description\", \"body\"]);\n\n    if (!props.id) {\n      // eslint-disable-next-line no-console\n      console.error('Checkbox:', 'id is required to make input accessible');\n    }\n\n    const checkedProps = {};\n\n    if ([true, false].includes(checked) || isChecked === true) {\n      checkedProps.checked = checked || isChecked;\n    }\n\n    if (onChange !== defaultOnChange) {\n      checkedProps.checked = isChecked;\n    }\n\n    if ([false, true].includes(defaultChecked)) {\n      checkedProps.defaultChecked = defaultChecked;\n    }\n\n    checkedProps.checked = checkedProps.checked === null ? false : checkedProps.checked;\n    return React.createElement(\"div\", {\n      className: css(styles.check, !label && styles.modifiers.standalone, className)\n    }, React.createElement(\"input\", Object.assign({}, props, {\n      className: css(styles.checkInput),\n      type: \"checkbox\",\n      onChange: this.handleChange,\n      \"aria-invalid\": !isValid,\n      \"aria-label\": ariaLabel,\n      disabled: isDisabled,\n      ref: elem => elem && (elem.indeterminate = isChecked === null)\n    }, checkedProps)), label && React.createElement(\"label\", {\n      className: css(styles.checkLabel, isDisabled && styles.modifiers.disabled),\n      htmlFor: props.id\n    }, label), description && React.createElement(\"span\", {\n      className: css(styles.checkDescription)\n    }, description), body && React.createElement(\"span\", {\n      className: css(styles.checkBody)\n    }, body));\n  }\n\n}\nCheckbox.displayName = 'Checkbox';\nCheckbox.defaultProps = {\n  className: '',\n  isValid: true,\n  isDisabled: false,\n  isChecked: false,\n  onChange: defaultOnChange\n};","map":{"version":3,"sources":["../../../../src/components/Checkbox/Checkbox.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Check/check';\nimport { css } from '@patternfly/react-styles';\n// tslint:disable-next-line:no-empty\nconst defaultOnChange = () => { };\nexport class Checkbox extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = (event) => {\n            this.props.onChange(event.currentTarget.checked, event);\n        };\n    }\n    render() {\n        const _a = this.props, { 'aria-label': ariaLabel, className, onChange, isValid, isDisabled, isChecked, label, checked, defaultChecked, description, body } = _a, props = __rest(_a, ['aria-label', \"className\", \"onChange\", \"isValid\", \"isDisabled\", \"isChecked\", \"label\", \"checked\", \"defaultChecked\", \"description\", \"body\"]);\n        if (!props.id) {\n            // eslint-disable-next-line no-console\n            console.error('Checkbox:', 'id is required to make input accessible');\n        }\n        const checkedProps = {};\n        if ([true, false].includes(checked) || isChecked === true) {\n            checkedProps.checked = checked || isChecked;\n        }\n        if (onChange !== defaultOnChange) {\n            checkedProps.checked = isChecked;\n        }\n        if ([false, true].includes(defaultChecked)) {\n            checkedProps.defaultChecked = defaultChecked;\n        }\n        checkedProps.checked = checkedProps.checked === null ? false : checkedProps.checked;\n        return (React.createElement(\"div\", { className: css(styles.check, !label && styles.modifiers.standalone, className) },\n            React.createElement(\"input\", Object.assign({}, props, { className: css(styles.checkInput), type: \"checkbox\", onChange: this.handleChange, \"aria-invalid\": !isValid, \"aria-label\": ariaLabel, disabled: isDisabled, ref: elem => elem && (elem.indeterminate = isChecked === null) }, checkedProps)),\n            label && (React.createElement(\"label\", { className: css(styles.checkLabel, isDisabled && styles.modifiers.disabled), htmlFor: props.id }, label)),\n            description && React.createElement(\"span\", { className: css(styles.checkDescription) }, description),\n            body && React.createElement(\"span\", { className: css(styles.checkBody) }, body)));\n    }\n}\nCheckbox.displayName = 'Checkbox';\nCheckbox.defaultProps = {\n    className: '',\n    isValid: true,\n    isDisabled: false,\n    isChecked: false,\n    onChange: defaultOnChange\n};\n//# sourceMappingURL=Checkbox.js.map"]},"metadata":{},"sourceType":"module"}