{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { css } from '@patternfly/react-styles';\nimport { FormFieldGroupToggle } from './FormFieldGroupToggle';\nimport { GenerateId } from '../../helpers';\nexport const InternalFormFieldGroup = _a => {\n  var {\n    children,\n    className,\n    header,\n    isExpandable,\n    isExpanded,\n    onToggle,\n    toggleAriaLabel\n  } = _a,\n      props = __rest(_a, [\"children\", \"className\", \"header\", \"isExpandable\", \"isExpanded\", \"onToggle\", \"toggleAriaLabel\"]);\n\n  const headerTitleText = header ? header.props.titleText : null;\n\n  if (isExpandable && !toggleAriaLabel && !headerTitleText) {\n    // eslint-disable-next-line no-console\n    console.error('FormFieldGroupExpandable:', 'toggleAriaLabel or the titleText prop of FormFieldGroupHeader is required to make the toggle button accessible');\n  }\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.formFieldGroup, isExpanded && isExpandable && styles.modifiers.expanded, className)\n  }, props), isExpandable && React.createElement(GenerateId, {\n    prefix: \"form-field-group-toggle\"\n  }, id => React.createElement(FormFieldGroupToggle, Object.assign({\n    onToggle: onToggle,\n    isExpanded: isExpanded,\n    \"aria-label\": toggleAriaLabel,\n    toggleId: id\n  }, headerTitleText && {\n    'aria-labelledby': `${header.props.titleText.id} ${id}`\n  }))), header && header, (!isExpandable || isExpandable && isExpanded) && React.createElement(\"div\", {\n    className: css(styles.formFieldGroupBody)\n  }, children));\n};\nInternalFormFieldGroup.displayName = 'InternalFormFieldGroup';","map":{"version":3,"sources":["../../../../src/components/Form/InternalFormFieldGroup.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,mDAAnB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,SAAS,oBAAT,QAAqC,wBAArC;AACA,SAAS,UAAT,QAA2B,eAA3B;AAmBA,OAAO,MAAM,sBAAsB,GAA0D,EAAD,IAS1D;MAT2D;AAC3F,IAAA,QAD2F;AAE3F,IAAA,SAF2F;AAG3F,IAAA,MAH2F;AAI3F,IAAA,YAJ2F;AAK3F,IAAA,UAL2F;AAM3F,IAAA,QAN2F;AAO3F,IAAA;AAP2F,MAO5E,E;MACZ,KAAK,GAAA,MAAA,CAAA,EAAA,EARmF,CAAA,UAAA,EAAA,WAAA,EAAA,QAAA,EAAA,cAAA,EAAA,YAAA,EAAA,UAAA,EAAA,iBAAA,CAQnF,C;;AAER,QAAM,eAAe,GAAG,MAAM,GAAG,MAAM,CAAC,KAAP,CAAa,SAAhB,GAA4B,IAA1D;;AACA,MAAI,YAAY,IAAI,CAAC,eAAjB,IAAoC,CAAC,eAAzC,EAA0D;AACxD;AACA,IAAA,OAAO,CAAC,KAAR,CACE,2BADF,EAEE,gHAFF;AAID;;AACD,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACE,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,cAAR,EAAwB,UAAU,IAAI,YAAd,IAA8B,MAAM,CAAC,SAAP,CAAiB,QAAvE,EAAiF,SAAjF;AADhB,GAAA,EAEM,KAFN,CAAA,EAIG,YAAY,IACX,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AAAC,IAAA,MAAM,EAAC;AAAR,GAAX,EACG,EAAE,IACD,KAAA,CAAA,aAAA,CAAC,oBAAD,EAAqB,MAAA,CAAA,MAAA,CAAA;AACnB,IAAA,QAAQ,EAAE,QADS;AAEnB,IAAA,UAAU,EAAE,UAFO;AAEG,kBACV,eAHO;AAInB,IAAA,QAAQ,EAAE;AAJS,GAAA,EAKd,eAAe,IAAI;AAAE,uBAAmB,GAAG,MAAM,CAAC,KAAP,CAAa,SAAb,CAAuB,EAAE,IAAI,EAAE;AAAvD,GALL,CAArB,CAFJ,CALJ,EAiBG,MAAM,IAAI,MAjBb,EAkBG,CAAC,CAAC,YAAD,IAAkB,YAAY,IAAI,UAAnC,KACC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,kBAAR;AAAnB,GAAA,EAAiD,QAAjD,CAnBJ,CADF;AAwBD,CA1CM;AA2CP,sBAAsB,CAAC,WAAvB,GAAqC,wBAArC","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { css } from '@patternfly/react-styles';\nimport { FormFieldGroupToggle } from './FormFieldGroupToggle';\nimport { GenerateId } from '../../helpers';\nexport const InternalFormFieldGroup = (_a) => {\n    var { children, className, header, isExpandable, isExpanded, onToggle, toggleAriaLabel } = _a, props = __rest(_a, [\"children\", \"className\", \"header\", \"isExpandable\", \"isExpanded\", \"onToggle\", \"toggleAriaLabel\"]);\n    const headerTitleText = header ? header.props.titleText : null;\n    if (isExpandable && !toggleAriaLabel && !headerTitleText) {\n        // eslint-disable-next-line no-console\n        console.error('FormFieldGroupExpandable:', 'toggleAriaLabel or the titleText prop of FormFieldGroupHeader is required to make the toggle button accessible');\n    }\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.formFieldGroup, isExpanded && isExpandable && styles.modifiers.expanded, className) }, props),\n        isExpandable && (React.createElement(GenerateId, { prefix: \"form-field-group-toggle\" }, id => (React.createElement(FormFieldGroupToggle, Object.assign({ onToggle: onToggle, isExpanded: isExpanded, \"aria-label\": toggleAriaLabel, toggleId: id }, (headerTitleText && { 'aria-labelledby': `${header.props.titleText.id} ${id}` })))))),\n        header && header,\n        (!isExpandable || (isExpandable && isExpanded)) && (React.createElement(\"div\", { className: css(styles.formFieldGroupBody) }, children))));\n};\nInternalFormFieldGroup.displayName = 'InternalFormFieldGroup';\n//# sourceMappingURL=InternalFormFieldGroup.js.map"]},"metadata":{},"sourceType":"module"}