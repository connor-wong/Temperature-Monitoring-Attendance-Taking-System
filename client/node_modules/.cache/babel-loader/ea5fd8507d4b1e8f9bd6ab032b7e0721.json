{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport datePickerStyles from '@patternfly/react-styles/css/components/DatePicker/date-picker';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { getUniqueId } from '../../helpers';\nimport { Popper } from '../../helpers/Popper/Popper';\nimport { TimeOption } from './TimeOption';\nimport { KeyTypes, SelectDirection } from '../Select';\nimport { InputGroup } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { parseTime, validateTime, makeTimeOptions, amSuffix, pmSuffix, getHours, getMinutes } from './TimePickerUtils';\nexport class TimePicker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.parentRef = React.createRef();\n    this.toggleRef = React.createRef();\n    this.inputRef = React.createRef();\n    this.menuRef = React.createRef();\n\n    this.onDocClick = event => {\n      const clickedOnToggle = this.parentRef && this.parentRef.current && this.parentRef.current.contains(event.target);\n      const clickedWithinMenu = this.menuRef && this.menuRef.current && this.menuRef.current.contains && this.menuRef.current.contains(event.target);\n\n      if (this.state.isOpen && !(clickedOnToggle || clickedWithinMenu)) {\n        this.onToggle(false);\n      }\n    };\n\n    this.handleGlobalKeys = event => {\n      const {\n        isOpen,\n        focusedIndex\n      } = this.state; // keyboard pressed while focus on toggle\n\n      if (this.inputRef && this.inputRef.current && this.inputRef.current.contains(event.target)) {\n        if (!isOpen && event.key !== KeyTypes.Tab) {\n          this.onToggle(true);\n        } else if (isOpen) {\n          if (event.key === KeyTypes.Escape) {\n            this.onToggle(false);\n          } else if (event.key === KeyTypes.Tab) {\n            this.onToggle(false);\n          } else if (event.key === KeyTypes.Enter) {\n            if (focusedIndex !== null) {\n              this.onSelect(this.getOptions()[focusedIndex].innerText);\n              event.stopPropagation();\n            } else {\n              this.onToggle(false);\n            }\n          } else if (event.key === KeyTypes.ArrowDown) {\n            this.updateFocusedIndex(1);\n            event.preventDefault();\n          } else if (event.key === KeyTypes.ArrowUp) {\n            this.updateFocusedIndex(-1);\n            event.preventDefault();\n          }\n        }\n      }\n    };\n\n    this.updateFocusedIndex = increment => {\n      this.setState(prevState => {\n        const maxIndex = this.getOptions().length - 1;\n        let nextIndex = prevState.focusedIndex !== null ? prevState.focusedIndex + increment : prevState.scrollIndex;\n\n        if (nextIndex < 0) {\n          nextIndex = maxIndex;\n        } else if (nextIndex > maxIndex) {\n          nextIndex = 0;\n        }\n\n        this.scrollToIndex(nextIndex);\n        return {\n          focusedIndex: nextIndex\n        };\n      });\n    };\n\n    this.scrollToIndex = index => {\n      this.getOptions()[index].offsetParent.scrollTop = this.getOptions()[index].offsetTop;\n    };\n\n    this.scrollToSelection = time => {\n      const {\n        delimiter,\n        is24Hour\n      } = this.props;\n      let splitTime = time.split(this.props.delimiter);\n      let focusedIndex = null; // build out the rest of the time assuming hh:00 if it's a partial time\n\n      if (splitTime.length < 2) {\n        time = `${time}${delimiter}00`;\n        splitTime = time.split(delimiter);\n      } // for 12hr variant, autoscroll to pm if it's currently the afternoon, otherwise autoscroll to am\n\n\n      if (!is24Hour && splitTime.length > 1 && splitTime[1].length < 2) {\n        const minutes = splitTime[1].length === 0 ? '00' : splitTime[1] + '0';\n        time = `${splitTime[0]}${delimiter}${minutes}${new Date().getHours() > 11 ? pmSuffix : amSuffix}`;\n      } else if (!is24Hour && splitTime.length > 1 && splitTime[1].length === 2 && !time.toUpperCase().includes(amSuffix.toUpperCase().trim()) && !time.toUpperCase().includes(pmSuffix.toUpperCase().trim())) {\n        time = `${time}${new Date().getHours() > 11 ? pmSuffix : amSuffix}`;\n      }\n\n      let scrollIndex = this.getOptions().findIndex(option => option.innerText.includes(time.toUpperCase())); // if we found an exact match, scroll to match and return index of match for focus\n\n      if (scrollIndex !== -1) {\n        this.scrollToIndex(scrollIndex);\n        focusedIndex = scrollIndex;\n      } else if (splitTime.length === 2) {\n        // no exact match, scroll to closes match but don't return index for focus\n        const minutes = splitTime[1].length === 1 ? splitTime[1] + '0' : '00';\n        let amPm = '';\n\n        if (!is24Hour && splitTime[1].toUpperCase().includes('P') || is24Hour && new Date().getHours() > 11) {\n          amPm = pmSuffix;\n        } else if (!is24Hour && splitTime[1].toUpperCase().includes('A') || is24Hour && new Date().getHours() <= 12) {\n          amPm = amSuffix;\n        }\n\n        time = `${splitTime[0]}${delimiter}${minutes}${amPm}`;\n        scrollIndex = this.getOptions().findIndex(option => option.innerText.includes(time));\n\n        if (scrollIndex !== -1) {\n          this.scrollToIndex(scrollIndex);\n        }\n      }\n\n      this.setState({\n        focusedIndex,\n        scrollIndex\n      });\n    };\n\n    this.getRegExp = () => this.props.is24Hour ? new RegExp(`^\\\\s*(\\\\d\\\\d?)${this.props.delimiter}([0-5])(\\\\d)\\\\s*$`) : new RegExp(`^\\\\s*(\\\\d\\\\d?)${this.props.delimiter}([0-5])(\\\\d)\\\\s*([AaPp][Mm])?\\\\s*$`);\n\n    this.getOptions = () => this.menuRef && this.menuRef.current ? Array.from(this.menuRef.current.children) : [];\n\n    this.onToggle = isOpen => {\n      // on close, parse and validate input\n      this.setState(prevState => {\n        const {\n          timeRegex,\n          isInvalid\n        } = prevState;\n        const {\n          delimiter,\n          is24Hour\n        } = this.props;\n        const time = parseTime(prevState.timeState, timeRegex, delimiter, !is24Hour);\n        return {\n          isOpen,\n          timeState: time,\n          isInvalid: isOpen ? isInvalid : !validateTime(time, timeRegex, delimiter, !is24Hour)\n        };\n      });\n    };\n\n    this.onSelect = selection => {\n      const {\n        timeRegex,\n        timeState\n      } = this.state;\n      const {\n        delimiter,\n        is24Hour\n      } = this.props;\n      const time = parseTime(selection, timeRegex, delimiter, !is24Hour);\n\n      if (time !== timeState) {\n        this.onInputChange(time);\n      }\n\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.onInputFocus = e => {\n      if (!this.state.isOpen) {\n        this.onToggle(true);\n      }\n\n      e.stopPropagation();\n    };\n\n    this.onInputChange = newTime => {\n      if (this.props.onChange) {\n        this.props.onChange(newTime, getHours(newTime, this.state.timeRegex), getMinutes(newTime, this.state.timeRegex));\n      }\n\n      this.scrollToSelection(newTime);\n      this.setState({\n        timeState: newTime,\n        isInvalid: false\n      });\n    };\n\n    this.onBlur = event => {\n      const {\n        timeRegex\n      } = this.state;\n      const {\n        delimiter,\n        is24Hour\n      } = this.props;\n      this.setState({\n        isInvalid: !validateTime(parseTime(event.currentTarget.value, timeRegex, delimiter, !is24Hour), timeRegex, delimiter, !is24Hour)\n      });\n    };\n\n    const {\n      is24Hour,\n      delimiter,\n      time\n    } = this.props;\n    const timeRegex = this.getRegExp();\n    this.state = {\n      isInvalid: false,\n      isOpen: false,\n      timeState: parseTime(time, timeRegex, delimiter, !is24Hour),\n      focusedIndex: null,\n      scrollIndex: 0,\n      timeRegex\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.onDocClick);\n    document.addEventListener('touchstart', this.onDocClick);\n    document.addEventListener('keydown', this.handleGlobalKeys);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.onDocClick);\n    document.removeEventListener('touchstart', this.onDocClick);\n    document.removeEventListener('keydown', this.handleGlobalKeys);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      timeState,\n      isOpen,\n      isInvalid,\n      timeRegex\n    } = this.state;\n    const {\n      time,\n      is24Hour,\n      delimiter\n    } = this.props;\n\n    if (isOpen && !prevState.isOpen && timeState && !isInvalid) {\n      this.scrollToSelection(timeState);\n    }\n\n    if (delimiter !== prevProps.delimiter) {\n      this.setState({\n        timeRegex: this.getRegExp()\n      });\n    }\n\n    if (time !== '' && time !== prevProps.time) {\n      this.setState({\n        timeState: parseTime(time, timeRegex, delimiter, !is24Hour)\n      });\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      'aria-label': ariaLabel,\n      isDisabled,\n      className,\n      placeholder,\n      id,\n      menuAppendTo,\n      is24Hour,\n      invalidFormatErrorMessage,\n      direction,\n      stepMinutes,\n      width,\n      delimiter,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onChange,\n      time\n    } = _a,\n          props = __rest(_a, ['aria-label', \"isDisabled\", \"className\", \"placeholder\", \"id\", \"menuAppendTo\", \"is24Hour\", \"invalidFormatErrorMessage\", \"direction\", \"stepMinutes\", \"width\", \"delimiter\", \"onChange\", \"time\"]);\n\n    const {\n      timeState,\n      isOpen,\n      isInvalid,\n      focusedIndex\n    } = this.state;\n    const style = {\n      '--pf-c-date-picker__input--c-form-control--Width': width\n    };\n    const options = makeTimeOptions(stepMinutes, !is24Hour, delimiter);\n    const randomId = id || getUniqueId('time-picker');\n    const menuContainer = React.createElement(\"ul\", {\n      ref: this.menuRef,\n      className: css(styles.selectMenu),\n      role: \"listbox\",\n      \"aria-labelledby\": `${id}-input`,\n      style: {\n        maxHeight: '200px',\n        overflowY: 'auto'\n      }\n    }, options.map((option, index) => React.createElement(TimeOption, {\n      key: index,\n      value: option,\n      index: index,\n      onSelect: this.onSelect,\n      isFocused: index === focusedIndex,\n      id: `${id}-option-${index}`\n    })));\n    const inputAndToggle = React.createElement(\"div\", Object.assign({\n      className: css(datePickerStyles.datePickerInput),\n      style: style\n    }, props), React.createElement(InputGroup, null, React.createElement(\"div\", {\n      className: css(styles.select, isOpen && styles.modifiers.expanded, direction === SelectDirection.up && styles.modifiers.top, className),\n      id: randomId,\n      ref: this.parentRef\n    }, React.createElement(\"div\", {\n      ref: this.toggleRef,\n      className: css(styles.selectToggle, isDisabled && styles.modifiers.disabled, styles.modifiers.typeahead),\n      style: {\n        paddingLeft: '0'\n      }\n    }, React.createElement(TextInput, {\n      className: css(formStyles.formControl, styles.selectToggleTypeahead),\n      id: `${randomId}-input`,\n      \"aria-label\": ariaLabel,\n      validated: isInvalid ? 'error' : 'default',\n      placeholder: placeholder,\n      value: timeState || '',\n      type: \"text\",\n      iconVariant: \"clock\",\n      onClick: this.onInputFocus,\n      onFocus: this.onInputFocus,\n      onChange: this.onInputChange,\n      onBlur: this.onBlur,\n      autoComplete: \"off\",\n      isDisabled: isDisabled,\n      ref: this.inputRef\n    })), isOpen && menuAppendTo === 'inline' && menuContainer)), isInvalid && React.createElement(\"div\", {\n      className: css(datePickerStyles.datePickerHelperText, datePickerStyles.modifiers.error)\n    }, invalidFormatErrorMessage));\n    const popperContainer = React.createElement(\"div\", {\n      className: css(styles.select, isOpen && styles.modifiers.expanded, className)\n    }, isOpen && menuContainer);\n    return React.createElement(\"div\", {\n      className: css(datePickerStyles.datePicker, className)\n    }, menuAppendTo === 'inline' ? inputAndToggle : React.createElement(Popper, {\n      trigger: inputAndToggle,\n      popper: popperContainer,\n      direction: direction,\n      appendTo: menuAppendTo,\n      isVisible: isOpen\n    }));\n  }\n\n}\nTimePicker.displayName = 'TimePicker';\nTimePicker.defaultProps = {\n  className: '',\n  isDisabled: false,\n  time: '',\n  is24Hour: false,\n  invalidFormatErrorMessage: 'Invalid time format',\n  placeholder: 'hh:mm',\n  delimiter: ':',\n  'aria-label': 'Time picker',\n  menuAppendTo: 'inline',\n  direction: 'down',\n  width: 150,\n  stepMinutes: 30\n};","map":{"version":3,"sources":["../../../../src/components/TimePicker/TimePicker.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport datePickerStyles from '@patternfly/react-styles/css/components/DatePicker/date-picker';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { getUniqueId } from '../../helpers';\nimport { Popper } from '../../helpers/Popper/Popper';\nimport { TimeOption } from './TimeOption';\nimport { KeyTypes, SelectDirection } from '../Select';\nimport { InputGroup } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { parseTime, validateTime, makeTimeOptions, amSuffix, pmSuffix, getHours, getMinutes } from './TimePickerUtils';\nexport class TimePicker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.parentRef = React.createRef();\n        this.toggleRef = React.createRef();\n        this.inputRef = React.createRef();\n        this.menuRef = React.createRef();\n        this.onDocClick = (event) => {\n            const clickedOnToggle = this.parentRef && this.parentRef.current && this.parentRef.current.contains(event.target);\n            const clickedWithinMenu = this.menuRef &&\n                this.menuRef.current &&\n                this.menuRef.current.contains &&\n                this.menuRef.current.contains(event.target);\n            if (this.state.isOpen && !(clickedOnToggle || clickedWithinMenu)) {\n                this.onToggle(false);\n            }\n        };\n        this.handleGlobalKeys = (event) => {\n            const { isOpen, focusedIndex } = this.state;\n            // keyboard pressed while focus on toggle\n            if (this.inputRef && this.inputRef.current && this.inputRef.current.contains(event.target)) {\n                if (!isOpen && event.key !== KeyTypes.Tab) {\n                    this.onToggle(true);\n                }\n                else if (isOpen) {\n                    if (event.key === KeyTypes.Escape) {\n                        this.onToggle(false);\n                    }\n                    else if (event.key === KeyTypes.Tab) {\n                        this.onToggle(false);\n                    }\n                    else if (event.key === KeyTypes.Enter) {\n                        if (focusedIndex !== null) {\n                            this.onSelect(this.getOptions()[focusedIndex].innerText);\n                            event.stopPropagation();\n                        }\n                        else {\n                            this.onToggle(false);\n                        }\n                    }\n                    else if (event.key === KeyTypes.ArrowDown) {\n                        this.updateFocusedIndex(1);\n                        event.preventDefault();\n                    }\n                    else if (event.key === KeyTypes.ArrowUp) {\n                        this.updateFocusedIndex(-1);\n                        event.preventDefault();\n                    }\n                }\n            }\n        };\n        this.updateFocusedIndex = (increment) => {\n            this.setState(prevState => {\n                const maxIndex = this.getOptions().length - 1;\n                let nextIndex = prevState.focusedIndex !== null ? prevState.focusedIndex + increment : prevState.scrollIndex;\n                if (nextIndex < 0) {\n                    nextIndex = maxIndex;\n                }\n                else if (nextIndex > maxIndex) {\n                    nextIndex = 0;\n                }\n                this.scrollToIndex(nextIndex);\n                return {\n                    focusedIndex: nextIndex\n                };\n            });\n        };\n        this.scrollToIndex = (index) => {\n            this.getOptions()[index].offsetParent.scrollTop = this.getOptions()[index].offsetTop;\n        };\n        this.scrollToSelection = (time) => {\n            const { delimiter, is24Hour } = this.props;\n            let splitTime = time.split(this.props.delimiter);\n            let focusedIndex = null;\n            // build out the rest of the time assuming hh:00 if it's a partial time\n            if (splitTime.length < 2) {\n                time = `${time}${delimiter}00`;\n                splitTime = time.split(delimiter);\n            }\n            // for 12hr variant, autoscroll to pm if it's currently the afternoon, otherwise autoscroll to am\n            if (!is24Hour && splitTime.length > 1 && splitTime[1].length < 2) {\n                const minutes = splitTime[1].length === 0 ? '00' : splitTime[1] + '0';\n                time = `${splitTime[0]}${delimiter}${minutes}${new Date().getHours() > 11 ? pmSuffix : amSuffix}`;\n            }\n            else if (!is24Hour &&\n                splitTime.length > 1 &&\n                splitTime[1].length === 2 &&\n                !time.toUpperCase().includes(amSuffix.toUpperCase().trim()) &&\n                !time.toUpperCase().includes(pmSuffix.toUpperCase().trim())) {\n                time = `${time}${new Date().getHours() > 11 ? pmSuffix : amSuffix}`;\n            }\n            let scrollIndex = this.getOptions().findIndex(option => option.innerText.includes(time.toUpperCase()));\n            // if we found an exact match, scroll to match and return index of match for focus\n            if (scrollIndex !== -1) {\n                this.scrollToIndex(scrollIndex);\n                focusedIndex = scrollIndex;\n            }\n            else if (splitTime.length === 2) {\n                // no exact match, scroll to closes match but don't return index for focus\n                const minutes = splitTime[1].length === 1 ? splitTime[1] + '0' : '00';\n                let amPm = '';\n                if ((!is24Hour && splitTime[1].toUpperCase().includes('P')) || (is24Hour && new Date().getHours() > 11)) {\n                    amPm = pmSuffix;\n                }\n                else if ((!is24Hour && splitTime[1].toUpperCase().includes('A')) || (is24Hour && new Date().getHours() <= 12)) {\n                    amPm = amSuffix;\n                }\n                time = `${splitTime[0]}${delimiter}${minutes}${amPm}`;\n                scrollIndex = this.getOptions().findIndex(option => option.innerText.includes(time));\n                if (scrollIndex !== -1) {\n                    this.scrollToIndex(scrollIndex);\n                }\n            }\n            this.setState({\n                focusedIndex,\n                scrollIndex\n            });\n        };\n        this.getRegExp = () => this.props.is24Hour\n            ? new RegExp(`^\\\\s*(\\\\d\\\\d?)${this.props.delimiter}([0-5])(\\\\d)\\\\s*$`)\n            : new RegExp(`^\\\\s*(\\\\d\\\\d?)${this.props.delimiter}([0-5])(\\\\d)\\\\s*([AaPp][Mm])?\\\\s*$`);\n        this.getOptions = () => (this.menuRef && this.menuRef.current ? Array.from(this.menuRef.current.children) : []);\n        this.onToggle = (isOpen) => {\n            // on close, parse and validate input\n            this.setState(prevState => {\n                const { timeRegex, isInvalid } = prevState;\n                const { delimiter, is24Hour } = this.props;\n                const time = parseTime(prevState.timeState, timeRegex, delimiter, !is24Hour);\n                return {\n                    isOpen,\n                    timeState: time,\n                    isInvalid: isOpen ? isInvalid : !validateTime(time, timeRegex, delimiter, !is24Hour)\n                };\n            });\n        };\n        this.onSelect = (selection) => {\n            const { timeRegex, timeState } = this.state;\n            const { delimiter, is24Hour } = this.props;\n            const time = parseTime(selection, timeRegex, delimiter, !is24Hour);\n            if (time !== timeState) {\n                this.onInputChange(time);\n            }\n            this.setState({\n                isOpen: false\n            });\n        };\n        this.onInputFocus = (e) => {\n            if (!this.state.isOpen) {\n                this.onToggle(true);\n            }\n            e.stopPropagation();\n        };\n        this.onInputChange = (newTime) => {\n            if (this.props.onChange) {\n                this.props.onChange(newTime, getHours(newTime, this.state.timeRegex), getMinutes(newTime, this.state.timeRegex));\n            }\n            this.scrollToSelection(newTime);\n            this.setState({\n                timeState: newTime,\n                isInvalid: false\n            });\n        };\n        this.onBlur = (event) => {\n            const { timeRegex } = this.state;\n            const { delimiter, is24Hour } = this.props;\n            this.setState({\n                isInvalid: !validateTime(parseTime(event.currentTarget.value, timeRegex, delimiter, !is24Hour), timeRegex, delimiter, !is24Hour)\n            });\n        };\n        const { is24Hour, delimiter, time } = this.props;\n        const timeRegex = this.getRegExp();\n        this.state = {\n            isInvalid: false,\n            isOpen: false,\n            timeState: parseTime(time, timeRegex, delimiter, !is24Hour),\n            focusedIndex: null,\n            scrollIndex: 0,\n            timeRegex\n        };\n    }\n    componentDidMount() {\n        document.addEventListener('mousedown', this.onDocClick);\n        document.addEventListener('touchstart', this.onDocClick);\n        document.addEventListener('keydown', this.handleGlobalKeys);\n    }\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.onDocClick);\n        document.removeEventListener('touchstart', this.onDocClick);\n        document.removeEventListener('keydown', this.handleGlobalKeys);\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { timeState, isOpen, isInvalid, timeRegex } = this.state;\n        const { time, is24Hour, delimiter } = this.props;\n        if (isOpen && !prevState.isOpen && timeState && !isInvalid) {\n            this.scrollToSelection(timeState);\n        }\n        if (delimiter !== prevProps.delimiter) {\n            this.setState({\n                timeRegex: this.getRegExp()\n            });\n        }\n        if (time !== '' && time !== prevProps.time) {\n            this.setState({\n                timeState: parseTime(time, timeRegex, delimiter, !is24Hour)\n            });\n        }\n    }\n    render() {\n        const _a = this.props, { 'aria-label': ariaLabel, isDisabled, className, placeholder, id, menuAppendTo, is24Hour, invalidFormatErrorMessage, direction, stepMinutes, width, delimiter, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        onChange, time } = _a, props = __rest(_a, ['aria-label', \"isDisabled\", \"className\", \"placeholder\", \"id\", \"menuAppendTo\", \"is24Hour\", \"invalidFormatErrorMessage\", \"direction\", \"stepMinutes\", \"width\", \"delimiter\", \"onChange\", \"time\"]);\n        const { timeState, isOpen, isInvalid, focusedIndex } = this.state;\n        const style = { '--pf-c-date-picker__input--c-form-control--Width': width };\n        const options = makeTimeOptions(stepMinutes, !is24Hour, delimiter);\n        const randomId = id || getUniqueId('time-picker');\n        const menuContainer = (React.createElement(\"ul\", { ref: this.menuRef, className: css(styles.selectMenu), role: \"listbox\", \"aria-labelledby\": `${id}-input`, style: { maxHeight: '200px', overflowY: 'auto' } }, options.map((option, index) => (React.createElement(TimeOption, { key: index, value: option, index: index, onSelect: this.onSelect, isFocused: index === focusedIndex, id: `${id}-option-${index}` })))));\n        const inputAndToggle = (React.createElement(\"div\", Object.assign({ className: css(datePickerStyles.datePickerInput), style: style }, props),\n            React.createElement(InputGroup, null,\n                React.createElement(\"div\", { className: css(styles.select, isOpen && styles.modifiers.expanded, direction === SelectDirection.up && styles.modifiers.top, className), id: randomId, ref: this.parentRef },\n                    React.createElement(\"div\", { ref: this.toggleRef, className: css(styles.selectToggle, isDisabled && styles.modifiers.disabled, styles.modifiers.typeahead), style: { paddingLeft: '0' } },\n                        React.createElement(TextInput, { className: css(formStyles.formControl, styles.selectToggleTypeahead), id: `${randomId}-input`, \"aria-label\": ariaLabel, validated: isInvalid ? 'error' : 'default', placeholder: placeholder, value: timeState || '', type: \"text\", iconVariant: \"clock\", onClick: this.onInputFocus, onFocus: this.onInputFocus, onChange: this.onInputChange, onBlur: this.onBlur, autoComplete: \"off\", isDisabled: isDisabled, ref: this.inputRef })),\n                    isOpen && menuAppendTo === 'inline' && menuContainer)),\n            isInvalid && (React.createElement(\"div\", { className: css(datePickerStyles.datePickerHelperText, datePickerStyles.modifiers.error) }, invalidFormatErrorMessage))));\n        const popperContainer = (React.createElement(\"div\", { className: css(styles.select, isOpen && styles.modifiers.expanded, className) }, isOpen && menuContainer));\n        return (React.createElement(\"div\", { className: css(datePickerStyles.datePicker, className) }, menuAppendTo === 'inline' ? (inputAndToggle) : (React.createElement(Popper, { trigger: inputAndToggle, popper: popperContainer, direction: direction, appendTo: menuAppendTo, isVisible: isOpen }))));\n    }\n}\nTimePicker.displayName = 'TimePicker';\nTimePicker.defaultProps = {\n    className: '',\n    isDisabled: false,\n    time: '',\n    is24Hour: false,\n    invalidFormatErrorMessage: 'Invalid time format',\n    placeholder: 'hh:mm',\n    delimiter: ':',\n    'aria-label': 'Time picker',\n    menuAppendTo: 'inline',\n    direction: 'down',\n    width: 150,\n    stepMinutes: 30\n};\n//# sourceMappingURL=TimePicker.js.map"]},"metadata":{},"sourceType":"module"}