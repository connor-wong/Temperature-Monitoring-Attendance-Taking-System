{"ast":null,"code":"import { useMemo } from 'react';\nlet uid = 0;\nconst ouiaPrefix = 'OUIA-Generated-';\nconst ouiaIdByRoute = {};\n/** Get props to conform to OUIA spec\n *\n * For functional components, use the useOUIAProps function instead\n *\n * In class based components, create a state variable ouiaStateId to create a static generated ID:\n * state = {\n *  ouiaStateId: getDefaultOUIAId(Chip.displayName)\n * }\n * This generated ID should remain alive as long as the component is not unmounted.\n *\n * Then add the attributes to the component\n * {...getOUIAProps('OverflowChip', this.props.ouiaId !== undefined ? this.props.ouiaId : this.state.ouiaStateId)}\n *\n * @param {string} componentType OUIA component type\n * @param {number|string} id OUIA component id\n * @param {boolean} ouiaSafe false if in animation\n */\n\nexport function getOUIAProps(componentType, id, ouiaSafe = true) {\n  return {\n    'data-ouia-component-type': `PF4/${componentType}`,\n    'data-ouia-safe': ouiaSafe,\n    'data-ouia-component-id': id\n  };\n}\n/**\n * Hooks version of the getOUIAProps function that also memoizes the generated ID\n * Can only be used in functional components\n *\n * @param {string} componentType OUIA component type\n * @param {number|string} id OUIA component id\n * @param {boolean} ouiaSafe false if in animation\n * @param {string} variant Optional variant to add to the generated ID\n */\n\nexport const useOUIAProps = (componentType, id, ouiaSafe = true, variant) => ({\n  'data-ouia-component-type': `PF4/${componentType}`,\n  'data-ouia-safe': ouiaSafe,\n  'data-ouia-component-id': useOUIAId(componentType, id, variant)\n});\n/**\n * Returns the ID or the memoized generated ID\n *\n * @param {string} componentType OUIA component type\n * @param {number|string} id OUIA component id\n * @param {string} variant Optional variant to add to the generated ID\n */\n\nexport const useOUIAId = (componentType, id, variant) => {\n  if (id !== undefined) {\n    return id;\n  }\n\n  return useMemo(() => getDefaultOUIAId(componentType, variant), [componentType, variant]);\n};\n/**\n * Returns a generated id based on the URL location\n *\n * @param {string} componentType OUIA component type\n * @param {string} variant Optional variant to add to the generated ID\n */\n\nexport function getDefaultOUIAId(componentType, variant) {\n  /*\n  ouiaIdByRoute = {\n    [route+componentType]: [number]\n  }\n  */\n  try {\n    const key = `${window.location.href}-${componentType}-${variant || ''}`;\n\n    if (!ouiaIdByRoute[key]) {\n      ouiaIdByRoute[key] = 0;\n    }\n\n    return `${ouiaPrefix}${componentType}-${variant ? `${variant}-` : ''}${++ouiaIdByRoute[key]}`;\n  } catch (exception) {\n    return `${ouiaPrefix}${componentType}-${variant ? `${variant}-` : ''}${++uid}`;\n  }\n}","map":{"version":3,"sources":["../../../../src/helpers/OUIA/ouia.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,QAAwB,OAAxB;AAYA,IAAI,GAAG,GAAG,CAAV;AACA,MAAM,UAAU,GAAG,iBAAnB;AACA,MAAM,aAAa,GAAQ,EAA3B;AAEA;;;;;;;;;;;;;;;;AAgBG;;AACH,OAAM,SAAU,YAAV,CAAuB,aAAvB,EAA8C,EAA9C,EAA0D,QAAA,GAAoB,IAA9E,EAAkF;AACtF,SAAO;AACL,gCAA4B,OAAO,aAAa,EAD3C;AAEL,sBAAkB,QAFb;AAGL,8BAA0B;AAHrB,GAAP;AAKD;AAED;;;;;;;;AAQG;;AACH,OAAO,MAAM,YAAY,GAAG,CAAC,aAAD,EAAwB,EAAxB,EAAqC,QAAA,GAAoB,IAAzD,EAA+D,OAA/D,MAAqF;AAC/G,8BAA4B,OAAO,aAAa,EAD+D;AAE/G,oBAAkB,QAF6F;AAG/G,4BAA0B,SAAS,CAAC,aAAD,EAAgB,EAAhB,EAAoB,OAApB;AAH4E,CAArF,CAArB;AAMP;;;;;;AAMG;;AACH,OAAO,MAAM,SAAS,GAAG,CAAC,aAAD,EAAwB,EAAxB,EAAqC,OAArC,KAAyD;AAChF,MAAI,EAAE,KAAK,SAAX,EAAsB;AACpB,WAAO,EAAP;AACD;;AACD,SAAO,OAAO,CAAC,MAAM,gBAAgB,CAAC,aAAD,EAAgB,OAAhB,CAAvB,EAAiD,CAAC,aAAD,EAAgB,OAAhB,CAAjD,CAAd;AACD,CALM;AAOP;;;;;AAKG;;AACH,OAAM,SAAU,gBAAV,CAA2B,aAA3B,EAAkD,OAAlD,EAAkE;AACtE;;;;AAIE;AACF,MAAI;AACF,UAAM,GAAG,GAAG,GAAG,MAAM,CAAC,QAAP,CAAgB,IAAI,IAAI,aAAa,IAAI,OAAO,IAAI,EAAE,EAArE;;AACA,QAAI,CAAC,aAAa,CAAC,GAAD,CAAlB,EAAyB;AACvB,MAAA,aAAa,CAAC,GAAD,CAAb,GAAqB,CAArB;AACD;;AACD,WAAO,GAAG,UAAU,GAAG,aAAa,IAAI,OAAO,GAAG,GAAG,OAAO,GAAb,GAAmB,EAAE,GAAG,EAAE,aAAa,CAAC,GAAD,CAAK,EAA3F;AACD,GAND,CAME,OAAO,SAAP,EAAkB;AAClB,WAAO,GAAG,UAAU,GAAG,aAAa,IAAI,OAAO,GAAG,GAAG,OAAO,GAAb,GAAmB,EAAE,GAAG,EAAE,GAAG,EAA5E;AACD;AACF","sourceRoot":"","sourcesContent":["import { useMemo } from 'react';\nlet uid = 0;\nconst ouiaPrefix = 'OUIA-Generated-';\nconst ouiaIdByRoute = {};\n/** Get props to conform to OUIA spec\n *\n * For functional components, use the useOUIAProps function instead\n *\n * In class based components, create a state variable ouiaStateId to create a static generated ID:\n * state = {\n *  ouiaStateId: getDefaultOUIAId(Chip.displayName)\n * }\n * This generated ID should remain alive as long as the component is not unmounted.\n *\n * Then add the attributes to the component\n * {...getOUIAProps('OverflowChip', this.props.ouiaId !== undefined ? this.props.ouiaId : this.state.ouiaStateId)}\n *\n * @param {string} componentType OUIA component type\n * @param {number|string} id OUIA component id\n * @param {boolean} ouiaSafe false if in animation\n */\nexport function getOUIAProps(componentType, id, ouiaSafe = true) {\n    return {\n        'data-ouia-component-type': `PF4/${componentType}`,\n        'data-ouia-safe': ouiaSafe,\n        'data-ouia-component-id': id\n    };\n}\n/**\n * Hooks version of the getOUIAProps function that also memoizes the generated ID\n * Can only be used in functional components\n *\n * @param {string} componentType OUIA component type\n * @param {number|string} id OUIA component id\n * @param {boolean} ouiaSafe false if in animation\n * @param {string} variant Optional variant to add to the generated ID\n */\nexport const useOUIAProps = (componentType, id, ouiaSafe = true, variant) => ({\n    'data-ouia-component-type': `PF4/${componentType}`,\n    'data-ouia-safe': ouiaSafe,\n    'data-ouia-component-id': useOUIAId(componentType, id, variant)\n});\n/**\n * Returns the ID or the memoized generated ID\n *\n * @param {string} componentType OUIA component type\n * @param {number|string} id OUIA component id\n * @param {string} variant Optional variant to add to the generated ID\n */\nexport const useOUIAId = (componentType, id, variant) => {\n    if (id !== undefined) {\n        return id;\n    }\n    return useMemo(() => getDefaultOUIAId(componentType, variant), [componentType, variant]);\n};\n/**\n * Returns a generated id based on the URL location\n *\n * @param {string} componentType OUIA component type\n * @param {string} variant Optional variant to add to the generated ID\n */\nexport function getDefaultOUIAId(componentType, variant) {\n    /*\n    ouiaIdByRoute = {\n      [route+componentType]: [number]\n    }\n    */\n    try {\n        const key = `${window.location.href}-${componentType}-${variant || ''}`;\n        if (!ouiaIdByRoute[key]) {\n            ouiaIdByRoute[key] = 0;\n        }\n        return `${ouiaPrefix}${componentType}-${variant ? `${variant}-` : ''}${++ouiaIdByRoute[key]}`;\n    }\n    catch (exception) {\n        return `${ouiaPrefix}${componentType}-${variant ? `${variant}-` : ''}${++uid}`;\n    }\n}\n//# sourceMappingURL=ouia.js.map"]},"metadata":{},"sourceType":"module"}