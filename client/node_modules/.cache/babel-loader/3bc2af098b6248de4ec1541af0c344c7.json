{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContext, ToolbarContentContext } from './ToolbarUtils';\nimport { Button } from '../Button';\nimport globalBreakpointLg from \"@patternfly/react-tokens/dist/esm/global_breakpoint_lg\";\nimport { formatBreakpointMods, toCamel, capitalize } from '../../helpers/util';\nexport class ToolbarToggleGroup extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.isContentPopup = () => {\n      const viewportSize = window.innerWidth;\n      const lgBreakpointValue = parseInt(globalBreakpointLg.value);\n      return viewportSize < lgBreakpointValue;\n    };\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      toggleIcon,\n      variant,\n      visibility,\n      visiblity,\n      breakpoint,\n      alignment,\n      spacer,\n      spaceItems,\n      className,\n      children\n    } = _a,\n          props = __rest(_a, [\"toggleIcon\", \"variant\", \"visibility\", \"visiblity\", \"breakpoint\", \"alignment\", \"spacer\", \"spaceItems\", \"className\", \"children\"]);\n\n    if (!breakpoint && !toggleIcon) {\n      // eslint-disable-next-line no-console\n      console.error('ToolbarToggleGroup will not be visible without a breakpoint or toggleIcon.');\n    }\n\n    if (visiblity !== undefined) {\n      // eslint-disable-next-line no-console\n      console.warn('The ToolbarToggleGroup visiblity prop has been deprecated. ' + 'Please use the correctly spelled visibility prop instead.');\n    }\n\n    return React.createElement(ToolbarContext.Consumer, null, ({\n      isExpanded,\n      toggleIsExpanded\n    }) => React.createElement(ToolbarContentContext.Consumer, null, ({\n      expandableContentRef,\n      expandableContentId\n    }) => {\n      if (expandableContentRef.current && expandableContentRef.current.classList) {\n        if (isExpanded) {\n          expandableContentRef.current.classList.add(styles.modifiers.expanded);\n        } else {\n          expandableContentRef.current.classList.remove(styles.modifiers.expanded);\n        }\n      }\n\n      return React.createElement(\"div\", Object.assign({\n        className: css(styles.toolbarGroup, styles.modifiers.toggleGroup, variant && styles.modifiers[toCamel(variant)], breakpoint && styles.modifiers[`showOn${capitalize(breakpoint.replace('2xl', '_2xl'))}`], formatBreakpointMods(visibility || visiblity, styles), formatBreakpointMods(alignment, styles), formatBreakpointMods(spacer, styles), formatBreakpointMods(spaceItems, styles), className)\n      }, props), React.createElement(\"div\", {\n        className: css(styles.toolbarToggle)\n      }, React.createElement(Button, Object.assign({\n        variant: \"plain\",\n        onClick: toggleIsExpanded,\n        \"aria-label\": \"Show Filters\"\n      }, isExpanded && {\n        'aria-expanded': true\n      }, {\n        \"aria-haspopup\": isExpanded && this.isContentPopup(),\n        \"aria-controls\": expandableContentId\n      }), toggleIcon)), isExpanded ? ReactDOM.createPortal(children, expandableContentRef.current.firstElementChild) : children);\n    }));\n  }\n\n}\nToolbarToggleGroup.displayName = 'ToolbarToggleGroup';","map":{"version":3,"sources":["../../../../src/components/Toolbar/ToolbarToggleGroup.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContext, ToolbarContentContext } from './ToolbarUtils';\nimport { Button } from '../Button';\nimport globalBreakpointLg from \"@patternfly/react-tokens/dist/esm/global_breakpoint_lg\";\nimport { formatBreakpointMods, toCamel, capitalize } from '../../helpers/util';\nexport class ToolbarToggleGroup extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.isContentPopup = () => {\n            const viewportSize = window.innerWidth;\n            const lgBreakpointValue = parseInt(globalBreakpointLg.value);\n            return viewportSize < lgBreakpointValue;\n        };\n    }\n    render() {\n        const _a = this.props, { toggleIcon, variant, visibility, visiblity, breakpoint, alignment, spacer, spaceItems, className, children } = _a, props = __rest(_a, [\"toggleIcon\", \"variant\", \"visibility\", \"visiblity\", \"breakpoint\", \"alignment\", \"spacer\", \"spaceItems\", \"className\", \"children\"]);\n        if (!breakpoint && !toggleIcon) {\n            // eslint-disable-next-line no-console\n            console.error('ToolbarToggleGroup will not be visible without a breakpoint or toggleIcon.');\n        }\n        if (visiblity !== undefined) {\n            // eslint-disable-next-line no-console\n            console.warn('The ToolbarToggleGroup visiblity prop has been deprecated. ' +\n                'Please use the correctly spelled visibility prop instead.');\n        }\n        return (React.createElement(ToolbarContext.Consumer, null, ({ isExpanded, toggleIsExpanded }) => (React.createElement(ToolbarContentContext.Consumer, null, ({ expandableContentRef, expandableContentId }) => {\n            if (expandableContentRef.current && expandableContentRef.current.classList) {\n                if (isExpanded) {\n                    expandableContentRef.current.classList.add(styles.modifiers.expanded);\n                }\n                else {\n                    expandableContentRef.current.classList.remove(styles.modifiers.expanded);\n                }\n            }\n            return (React.createElement(\"div\", Object.assign({ className: css(styles.toolbarGroup, styles.modifiers.toggleGroup, variant && styles.modifiers[toCamel(variant)], breakpoint &&\n                    styles.modifiers[`showOn${capitalize(breakpoint.replace('2xl', '_2xl'))}`], formatBreakpointMods(visibility || visiblity, styles), formatBreakpointMods(alignment, styles), formatBreakpointMods(spacer, styles), formatBreakpointMods(spaceItems, styles), className) }, props),\n                React.createElement(\"div\", { className: css(styles.toolbarToggle) },\n                    React.createElement(Button, Object.assign({ variant: \"plain\", onClick: toggleIsExpanded, \"aria-label\": \"Show Filters\" }, (isExpanded && { 'aria-expanded': true }), { \"aria-haspopup\": isExpanded && this.isContentPopup(), \"aria-controls\": expandableContentId }), toggleIcon)),\n                isExpanded\n                    ? ReactDOM.createPortal(children, expandableContentRef.current.firstElementChild)\n                    : children));\n        }))));\n    }\n}\nToolbarToggleGroup.displayName = 'ToolbarToggleGroup';\n//# sourceMappingURL=ToolbarToggleGroup.js.map"]},"metadata":{},"sourceType":"module"}