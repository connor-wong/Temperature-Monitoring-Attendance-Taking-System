{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport badgeStyles from '@patternfly/react-styles/css/components/Badge/badge';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { css } from '@patternfly/react-styles';\nimport TimesCircleIcon from \"@patternfly/react-icons/dist/esm/icons/times-circle-icon\";\nimport CheckCircleIcon from \"@patternfly/react-icons/dist/esm/icons/check-circle-icon\";\nimport ExclamationTriangleIcon from \"@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon\";\nimport ExclamationCircleIcon from \"@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon\";\nimport { SelectMenu } from './SelectMenu';\nimport { SelectOption } from './SelectOption';\nimport { SelectGroup } from './SelectGroup';\nimport { SelectToggle } from './SelectToggle';\nimport { SelectContext, SelectVariant, SelectDirection, KeyTypes } from './selectConstants';\nimport { Chip, ChipGroup } from '../ChipGroup';\nimport { keyHandler, getNextIndex, getOUIAProps, getDefaultOUIAId, GenerateId } from '../../helpers';\nimport { Divider } from '../Divider';\nimport { Popper } from '../../helpers/Popper/Popper';\nimport { createRenderableFavorites, extendItemsWithFavorite } from '../../helpers/favorites';\nimport { ValidatedOptions } from '../../helpers/constants'; // seed for the aria-labelledby ID\n\nlet currentId = 0;\nexport class Select extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.parentRef = React.createRef();\n    this.menuComponentRef = React.createRef();\n    this.filterRef = React.createRef();\n    this.clearRef = React.createRef();\n    this.inputRef = React.createRef();\n    this.refCollection = [[]];\n    this.optionContainerRefCollection = [];\n    this.state = {\n      openedOnEnter: false,\n      typeaheadInputValue: null,\n      typeaheadFilteredChildren: React.Children.toArray(this.props.children),\n      favoritesGroup: [],\n      typeaheadCurrIndex: -1,\n      typeaheadStoredIndex: -1,\n      creatableValue: '',\n      tabbedIntoFavoritesMenu: false,\n      ouiaStateId: getDefaultOUIAId(Select.displayName, this.props.variant)\n    };\n\n    this.getTypeaheadActiveChild = typeaheadCurrIndex => this.refCollection[typeaheadCurrIndex] ? this.refCollection[typeaheadCurrIndex][0] : null;\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (this.props.hasInlineFilter) {\n        this.refCollection[0][0] = this.filterRef.current;\n      }\n\n      if (!prevState.openedOnEnter && this.state.openedOnEnter && !this.props.customContent) {\n        const firstRef = this.refCollection.find(ref => ref !== null);\n\n        if (firstRef && firstRef[0]) {\n          firstRef[0].focus();\n        }\n      }\n\n      if (prevProps.children !== this.props.children) {\n        this.updateTypeAheadFilteredChildren(prevState.typeaheadInputValue || '', null);\n      }\n\n      if (this.props.onFavorite && (this.props.favorites.length !== prevProps.favorites.length || this.state.typeaheadFilteredChildren !== prevState.typeaheadFilteredChildren)) {\n        const tempRenderableChildren = this.props.variant === 'typeahead' || this.props.variant === 'typeaheadmulti' ? this.state.typeaheadFilteredChildren : this.props.children;\n        const renderableFavorites = createRenderableFavorites(tempRenderableChildren, this.props.isGrouped, this.props.favorites);\n        const favoritesGroup = renderableFavorites.length ? [React.createElement(SelectGroup, {\n          key: \"favorites\",\n          label: this.props.favoritesLabel\n        }, renderableFavorites), React.createElement(Divider, {\n          key: \"favorites-group-divider\"\n        })] : [];\n        this.setState({\n          favoritesGroup\n        });\n      }\n    };\n\n    this.onEnter = () => {\n      this.setState({\n        openedOnEnter: true\n      });\n    };\n\n    this.onClose = () => {\n      this.setState({\n        openedOnEnter: false,\n        typeaheadInputValue: null,\n        typeaheadFilteredChildren: React.Children.toArray(this.props.children),\n        typeaheadCurrIndex: -1,\n        tabbedIntoFavoritesMenu: false\n      });\n    };\n\n    this.onChange = e => {\n      if (e.target.value.toString() !== '' && !this.props.isOpen) {\n        this.props.onToggle(true);\n      }\n\n      if (this.props.onTypeaheadInputChanged) {\n        this.props.onTypeaheadInputChanged(e.target.value.toString());\n      }\n\n      this.setState({\n        typeaheadCurrIndex: -1,\n        typeaheadInputValue: e.target.value,\n        creatableValue: e.target.value\n      });\n      this.updateTypeAheadFilteredChildren(e.target.value.toString(), e);\n      this.refCollection = [[]];\n    };\n\n    this.updateTypeAheadFilteredChildren = (typeaheadInputValue, e) => {\n      let typeaheadFilteredChildren;\n      const {\n        onFilter,\n        isCreatable,\n        onCreateOption,\n        createText,\n        noResultsFoundText,\n        children,\n        isGrouped\n      } = this.props;\n\n      if (onFilter) {\n        /* The updateTypeAheadFilteredChildren callback is not only called on input changes but also when the children change.\n         * In this case the e is null but we can get the typeaheadInputValue from the state.\n         */\n        typeaheadFilteredChildren = onFilter(e, e ? e.target.value : typeaheadInputValue) || children;\n      } else {\n        let input;\n\n        try {\n          input = new RegExp(typeaheadInputValue.toString(), 'i');\n        } catch (err) {\n          input = new RegExp(typeaheadInputValue.toString().replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i');\n        }\n\n        const childrenArray = React.Children.toArray(children);\n\n        if (isGrouped) {\n          const childFilter = child => child.props.value && this.getDisplay(child.props.value.toString(), 'text').search(input) === 0;\n\n          typeaheadFilteredChildren = typeaheadInputValue.toString() !== '' ? React.Children.map(children, group => {\n            if (group.type === SelectGroup) {\n              const filteredGroupChildren = React.Children.toArray(group.props.children).filter(childFilter);\n\n              if (filteredGroupChildren.length > 0) {\n                return React.cloneElement(group, {\n                  titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n                  children: filteredGroupChildren\n                });\n              }\n            } else {\n              return React.Children.toArray(group).filter(childFilter);\n            }\n          }) : childrenArray;\n        } else {\n          typeaheadFilteredChildren = typeaheadInputValue.toString() !== '' ? childrenArray.filter(child => {\n            const valueToCheck = child.props.value; // Dividers don't have value and should not be filtered\n\n            if (!valueToCheck) {\n              return true;\n            }\n\n            const isSelectOptionObject = typeof valueToCheck !== 'string' && valueToCheck.toString && valueToCheck.compareTo;\n\n            if (isSelectOptionObject) {\n              return valueToCheck.compareTo(typeaheadInputValue);\n            } else {\n              return this.getDisplay(child.props.value.toString(), 'text').search(input) === 0;\n            }\n          }) : childrenArray;\n        }\n      }\n\n      if (!typeaheadFilteredChildren) {\n        typeaheadFilteredChildren = [];\n      }\n\n      if (typeaheadFilteredChildren.length === 0) {\n        !isCreatable && typeaheadFilteredChildren.push(React.createElement(SelectOption, {\n          isDisabled: true,\n          key: 0,\n          value: noResultsFoundText,\n          isNoResultsOption: true\n        }));\n      }\n\n      if (isCreatable && typeaheadInputValue !== '') {\n        const newValue = typeaheadInputValue;\n        typeaheadFilteredChildren.push(React.createElement(SelectOption, {\n          key: 0,\n          value: newValue,\n          onClick: () => onCreateOption && onCreateOption(newValue)\n        }, createText, \" \\\"\", newValue, \"\\\"\"));\n      }\n\n      this.setState({\n        typeaheadFilteredChildren\n      });\n    };\n\n    this.onClick = e => {\n      if (!this.props.isOpen) {\n        this.props.onToggle(true);\n      }\n\n      e.stopPropagation();\n    };\n\n    this.clearSelection = e => {\n      e.stopPropagation();\n      this.setState({\n        typeaheadInputValue: null,\n        typeaheadFilteredChildren: React.Children.toArray(this.props.children),\n        typeaheadCurrIndex: -1\n      });\n    };\n\n    this.sendRef = (optionRef, favoriteRef, optionContainerRef, index) => {\n      this.refCollection[index] = [optionRef, favoriteRef];\n      this.optionContainerRefCollection[index] = optionContainerRef;\n    };\n\n    this.handleMenuKeys = (index, innerIndex, position) => {\n      keyHandler(index, innerIndex, position, this.refCollection, this.refCollection);\n\n      if (this.props.variant === SelectVariant.typeahead || this.props.variant === SelectVariant.typeaheadMulti) {\n        if (position !== 'tab') {\n          this.handleTypeaheadKeys(position);\n        }\n      }\n    };\n\n    this.moveFocus = (nextIndex, updateCurrentIndex = true) => {\n      const {\n        isCreatable,\n        createText\n      } = this.props;\n      const hasDescriptionElm = Boolean(this.refCollection[nextIndex][0] && this.refCollection[nextIndex][0].classList.contains('pf-m-description'));\n      const optionTextElm = hasDescriptionElm ? this.refCollection[nextIndex][0].firstElementChild : this.refCollection[nextIndex][0];\n      let typeaheadInputValue = '';\n\n      if (isCreatable && optionTextElm.innerText.includes(createText)) {\n        typeaheadInputValue = this.state.creatableValue;\n      } else if (optionTextElm) {\n        typeaheadInputValue = optionTextElm.innerText;\n      }\n\n      this.setState(prevState => ({\n        typeaheadCurrIndex: updateCurrentIndex ? nextIndex : prevState.typeaheadCurrIndex,\n        typeaheadStoredIndex: nextIndex,\n        typeaheadInputValue\n      }));\n    };\n\n    this.handleTypeaheadKeys = position => {\n      const {\n        isOpen,\n        onFavorite\n      } = this.props;\n      const {\n        typeaheadCurrIndex,\n        tabbedIntoFavoritesMenu,\n        typeaheadStoredIndex\n      } = this.state;\n      const typeaheadActiveChild = this.getTypeaheadActiveChild(typeaheadCurrIndex);\n\n      if (isOpen) {\n        if (position === 'enter') {\n          if (typeaheadActiveChild || this.refCollection[0] && this.refCollection[0][0]) {\n            this.setState({\n              typeaheadInputValue: typeaheadActiveChild && typeaheadActiveChild.innerText || this.refCollection[0][0].innerText\n            });\n\n            if (typeaheadActiveChild) {\n              typeaheadActiveChild.click();\n            } else {\n              this.refCollection[0][0].click();\n            }\n          }\n        } else if (position === 'tab') {\n          if (onFavorite) {\n            if (this.inputRef.current === document.activeElement) {\n              let indexForFocus = 0;\n\n              if (typeaheadCurrIndex !== -1) {\n                indexForFocus = typeaheadCurrIndex;\n              } else if (typeaheadStoredIndex !== -1) {\n                indexForFocus = typeaheadStoredIndex;\n              }\n\n              if (this.refCollection[indexForFocus] !== null && this.refCollection[indexForFocus][0] !== null) {\n                this.refCollection[indexForFocus][0].focus();\n              } else {\n                this.clearRef.current.focus();\n              }\n\n              this.setState({\n                tabbedIntoFavoritesMenu: true,\n                typeaheadCurrIndex: -1\n              });\n            } else {\n              this.inputRef.current.focus();\n              this.setState({\n                tabbedIntoFavoritesMenu: false\n              });\n            }\n          } else {\n            this.props.onToggle(false);\n          }\n        } else if (!tabbedIntoFavoritesMenu) {\n          let nextIndex;\n\n          if (typeaheadCurrIndex === -1 && position === 'down') {\n            nextIndex = 0;\n          } else if (typeaheadCurrIndex === -1 && position === 'up') {\n            nextIndex = this.refCollection.length - 1;\n          } else if (position !== 'left' && position !== 'right') {\n            nextIndex = getNextIndex(typeaheadCurrIndex, position, this.refCollection);\n          } else {\n            nextIndex = typeaheadCurrIndex;\n          }\n\n          if (this.refCollection[nextIndex] === null) {\n            return;\n          }\n\n          this.moveFocus(nextIndex);\n        } else {\n          const nextIndex = this.refCollection.findIndex(ref => ref !== undefined && (ref[0] === document.activeElement || ref[1] === document.activeElement));\n          this.moveFocus(nextIndex);\n        }\n      }\n    };\n\n    this.onClickTypeaheadToggleButton = () => {\n      if (this.inputRef && this.inputRef.current) {\n        this.inputRef.current.focus();\n      }\n    };\n\n    this.getDisplay = (value, type = 'node') => {\n      if (!value) {\n        return;\n      }\n\n      const item = this.props.isGrouped ? React.Children.toArray(this.props.children).reduce((acc, curr) => [...acc, ...React.Children.toArray(curr.props.children)], []).find(child => child.props.value.toString() === value.toString()) : React.Children.toArray(this.props.children).find(child => child.props.value && child.props.value.toString() === value.toString());\n\n      if (item) {\n        if (item && item.props.children) {\n          if (type === 'node') {\n            return item.props.children;\n          }\n\n          return this.findText(item);\n        }\n\n        return item.props.value.toString();\n      }\n\n      return value.toString();\n    };\n\n    this.findText = item => {\n      if (typeof item === 'string') {\n        return item;\n      } else if (!React.isValidElement(item)) {\n        return '';\n      } else {\n        const multi = [];\n        React.Children.toArray(item.props.children).forEach(child => multi.push(this.findText(child)));\n        return multi.join('');\n      }\n    };\n\n    this.generateSelectedBadge = () => {\n      const {\n        customBadgeText,\n        selections\n      } = this.props;\n\n      if (customBadgeText !== null) {\n        return customBadgeText;\n      }\n\n      if (Array.isArray(selections) && selections.length > 0) {\n        return selections.length;\n      }\n\n      return null;\n    };\n  }\n\n  extendTypeaheadChildren(typeaheadCurrIndex, favoritesGroup) {\n    const {\n      isGrouped,\n      onFavorite\n    } = this.props;\n    const typeaheadChildren = favoritesGroup ? favoritesGroup.concat(this.state.typeaheadFilteredChildren) : this.state.typeaheadFilteredChildren;\n    const activeElement = this.optionContainerRefCollection[typeaheadCurrIndex];\n    let typeaheadActiveChild = this.getTypeaheadActiveChild(typeaheadCurrIndex);\n\n    if (typeaheadActiveChild && typeaheadActiveChild.classList.contains('pf-m-description')) {\n      typeaheadActiveChild = typeaheadActiveChild.firstElementChild;\n    }\n\n    this.refCollection = [[]];\n    this.optionContainerRefCollection = [];\n\n    if (isGrouped) {\n      return React.Children.map(typeaheadChildren, group => {\n        if (group.type === Divider) {\n          return group;\n        } else if (group.type === SelectGroup && onFavorite) {\n          return React.cloneElement(group, {\n            titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n            children: React.Children.map(group.props.children, child => child.type === Divider ? child : React.cloneElement(child, {\n              isFocused: activeElement && (activeElement.id === child.props.id || this.props.isCreatable && typeaheadActiveChild.innerText === `{createText} \"${group.props.value}\"`)\n            }))\n          });\n        } else if (group.type === SelectGroup) {\n          return React.cloneElement(group, {\n            titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n            children: React.Children.map(group.props.children, child => child.type === Divider ? child : React.cloneElement(child, {\n              isFocused: typeaheadActiveChild && (typeaheadActiveChild.innerText === child.props.value.toString() || this.props.isCreatable && typeaheadActiveChild.innerText === `{createText} \"${child.props.value}\"`)\n            }))\n          });\n        } else {\n          // group has been filtered down to SelectOption\n          return React.cloneElement(group, {\n            isFocused: typeaheadActiveChild && (typeaheadActiveChild.innerText === group.props.value.toString() || this.props.isCreatable && typeaheadActiveChild.innerText === `{createText} \"${group.props.value}\"`)\n          });\n        }\n      });\n    }\n\n    return typeaheadChildren.map(child => {\n      const childElement = child;\n      return childElement.type.displayName === 'Divider' ? child : React.cloneElement(child, {\n        isFocused: typeaheadActiveChild && (typeaheadActiveChild.innerText === child.props.value.toString() || this.props.isCreatable && typeaheadActiveChild.innerText === `{createText} \"${child.props.value}\"`)\n      });\n    });\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      children,\n      chipGroupProps,\n      chipGroupComponent,\n      className,\n      customContent,\n      variant,\n      direction,\n      onToggle,\n      onSelect,\n      onClear,\n      toggleId,\n      isOpen,\n      isGrouped,\n      isPlain,\n      isDisabled,\n      validated,\n      selections: selectionsProp,\n      typeAheadAriaLabel,\n      clearSelectionsAriaLabel,\n      toggleAriaLabel,\n      removeSelectionAriaLabel,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-describedby': ariaDescribedby,\n      'aria-invalid': ariaInvalid,\n      placeholderText,\n      width,\n      maxHeight,\n      toggleIcon,\n      ouiaId,\n      ouiaSafe,\n      hasInlineFilter,\n      isCheckboxSelectionBadgeHidden,\n      inlineFilterPlaceholderText,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onFilter,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onTypeaheadInputChanged,\n      onCreateOption,\n      isCreatable,\n      createText,\n      noResultsFoundText,\n      customBadgeText,\n      inputIdPrefix,\n\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      menuAppendTo,\n      favorites,\n      onFavorite,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      favoritesLabel\n    } = _a,\n          props = __rest(_a, [\"children\", \"chipGroupProps\", \"chipGroupComponent\", \"className\", \"customContent\", \"variant\", \"direction\", \"onToggle\", \"onSelect\", \"onClear\", \"toggleId\", \"isOpen\", \"isGrouped\", \"isPlain\", \"isDisabled\", \"validated\", \"selections\", \"typeAheadAriaLabel\", \"clearSelectionsAriaLabel\", \"toggleAriaLabel\", \"removeSelectionAriaLabel\", 'aria-label', 'aria-labelledby', 'aria-describedby', 'aria-invalid', \"placeholderText\", \"width\", \"maxHeight\", \"toggleIcon\", \"ouiaId\", \"ouiaSafe\", \"hasInlineFilter\", \"isCheckboxSelectionBadgeHidden\", \"inlineFilterPlaceholderText\", \"onFilter\", \"onTypeaheadInputChanged\", \"onCreateOption\", \"isCreatable\", \"createText\", \"noResultsFoundText\", \"customBadgeText\", \"inputIdPrefix\", \"menuAppendTo\", \"favorites\", \"onFavorite\", \"favoritesLabel\"]);\n\n    const {\n      openedOnEnter,\n      typeaheadCurrIndex,\n      typeaheadInputValue,\n      typeaheadFilteredChildren,\n      favoritesGroup\n    } = this.state;\n    const selectToggleId = toggleId || `pf-select-toggle-id-${currentId++}`;\n    const selections = Array.isArray(selectionsProp) ? selectionsProp : [selectionsProp];\n    const hasAnySelections = Boolean(selections[0] && selections[0] !== '');\n    const typeaheadActiveChild = this.getTypeaheadActiveChild(typeaheadCurrIndex);\n    let childPlaceholderText = null; // If onFavorites is set,  add isFavorite prop to children and add a Favorites group to the SelectMenu\n\n    let renderableItems = [];\n\n    if (onFavorite) {\n      // if variant is type-ahead call the extendTypeaheadChildren before adding favorites\n      let tempExtendedChildren = children;\n\n      if (variant === 'typeahead' || variant === 'typeaheadmulti') {\n        tempExtendedChildren = this.extendTypeaheadChildren(typeaheadCurrIndex, favoritesGroup);\n      } else if (onFavorite) {\n        tempExtendedChildren = favoritesGroup.concat(children);\n      } // mark items that are favorited with isFavorite\n\n\n      renderableItems = extendItemsWithFavorite(tempExtendedChildren, isGrouped, favorites);\n    } else {\n      renderableItems = children;\n    }\n\n    if (!customContent) {\n      if (!hasAnySelections && !placeholderText) {\n        const childPlaceholder = React.Children.toArray(children).filter(child => child.props.isPlaceholder === true);\n        childPlaceholderText = childPlaceholder[0] && this.getDisplay(childPlaceholder[0].props.value, 'node') || children[0] && this.getDisplay(children[0].props.value, 'node');\n      }\n    }\n\n    const hasOnClear = onClear !== Select.defaultProps.onClear;\n    const clearBtn = React.createElement(\"button\", {\n      className: css(buttonStyles.button, buttonStyles.modifiers.plain, styles.selectToggleClear),\n      onClick: e => {\n        this.clearSelection(e);\n        onClear(e);\n      },\n      \"aria-label\": clearSelectionsAriaLabel,\n      type: \"button\",\n      disabled: isDisabled,\n      ref: this.clearRef,\n      onKeyDown: event => {\n        if (event.key === KeyTypes.Enter) {\n          this.clearRef.current.click();\n        }\n      }\n    }, React.createElement(TimesCircleIcon, {\n      \"aria-hidden\": true\n    }));\n    let selectedChips = null;\n\n    if (variant === SelectVariant.typeaheadMulti) {\n      selectedChips = chipGroupComponent ? chipGroupComponent : React.createElement(ChipGroup, Object.assign({}, chipGroupProps), selections && selections.map(item => React.createElement(Chip, {\n        key: item,\n        onClick: e => onSelect(e, item),\n        closeBtnAriaLabel: removeSelectionAriaLabel\n      }, this.getDisplay(item, 'node'))));\n    }\n\n    let filterWithChildren = children;\n\n    if (hasInlineFilter) {\n      const filterBox = React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        key: \"inline-filter\",\n        className: css(styles.selectMenuSearch)\n      }, React.createElement(\"input\", {\n        key: \"inline-filter-input\",\n        type: \"search\",\n        className: css(formStyles.formControl, formStyles.modifiers.search),\n        onChange: this.onChange,\n        placeholder: inlineFilterPlaceholderText,\n        onKeyDown: event => {\n          if (event.key === KeyTypes.ArrowUp) {\n            this.handleMenuKeys(0, 0, 'up');\n          } else if (event.key === KeyTypes.ArrowDown) {\n            this.handleMenuKeys(0, 0, 'down');\n          } else if (event.key === KeyTypes.ArrowLeft) {\n            this.handleMenuKeys(0, 0, 'left');\n          } else if (event.key === KeyTypes.ArrowRight) {\n            this.handleMenuKeys(0, 0, 'right');\n          } else if (event.key === KeyTypes.Tab && variant === SelectVariant.checkbox) {\n            // More modal-like experience for checkboxes\n            // Let SelectOption handle this\n            if (event.shiftKey) {\n              this.handleMenuKeys(0, 0, 'up');\n            } else {\n              this.handleMenuKeys(0, 0, 'down');\n            }\n\n            event.stopPropagation();\n            event.preventDefault();\n          }\n        },\n        ref: this.filterRef,\n        autoComplete: \"off\"\n      })), React.createElement(Divider, {\n        key: \"inline-filter-divider\"\n      }));\n      this.refCollection[0][0] = this.filterRef.current;\n      filterWithChildren = [filterBox, ...typeaheadFilteredChildren].map((option, index) => React.cloneElement(option, {\n        key: index\n      }));\n    }\n\n    let variantProps;\n    let variantChildren;\n\n    if (customContent) {\n      variantProps = {\n        selected: selections,\n        openedOnEnter,\n        isCustomContent: true\n      };\n      variantChildren = customContent;\n    } else {\n      switch (variant) {\n        case 'single':\n          variantProps = {\n            selected: selections[0],\n            openedOnEnter\n          };\n          variantChildren = renderableItems;\n          break;\n\n        case 'checkbox':\n          variantProps = {\n            checked: selections,\n            isGrouped,\n            hasInlineFilter,\n            openedOnEnter\n          };\n          variantChildren = filterWithChildren;\n          break;\n\n        case 'typeahead':\n          variantProps = {\n            selected: selections[0],\n            openedOnEnter\n          };\n          variantChildren = onFavorite ? renderableItems : this.extendTypeaheadChildren(typeaheadCurrIndex);\n\n          if (variantChildren.length === 0) {\n            variantChildren.push(React.createElement(SelectOption, {\n              isDisabled: true,\n              key: 0,\n              value: noResultsFoundText,\n              isNoResultsOption: true\n            }));\n          }\n\n          break;\n\n        case 'typeaheadmulti':\n          variantProps = {\n            selected: selections,\n            openedOnEnter\n          };\n          variantChildren = onFavorite ? renderableItems : this.extendTypeaheadChildren(typeaheadCurrIndex);\n\n          if (variantChildren.length === 0) {\n            variantChildren.push(React.createElement(SelectOption, {\n              isDisabled: true,\n              key: 0,\n              value: noResultsFoundText,\n              isNoResultsOption: true\n            }));\n          }\n\n          break;\n      }\n    }\n\n    const menuContainer = React.createElement(SelectMenu, Object.assign({}, props, {\n      isGrouped: isGrouped,\n      selected: selections\n    }, variantProps, {\n      openedOnEnter: openedOnEnter,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      sendRef: this.sendRef,\n      keyHandler: this.handleMenuKeys,\n      maxHeight: maxHeight,\n      ref: this.menuComponentRef\n    }), variantChildren);\n    const popperContainer = React.createElement(\"div\", Object.assign({\n      className: css(styles.select, isOpen && styles.modifiers.expanded, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning, validated === ValidatedOptions.error && styles.modifiers.invalid, direction === SelectDirection.up && styles.modifiers.top, className)\n    }, width && {\n      style: {\n        width\n      }\n    }, validated !== ValidatedOptions.default && {\n      'aria-describedby': ariaDescribedby\n    }, validated !== ValidatedOptions.default && {\n      'aria-invalid': ariaInvalid\n    }), isOpen && menuContainer);\n    const mainContainer = React.createElement(\"div\", Object.assign({\n      className: css(styles.select, isOpen && styles.modifiers.expanded, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning, validated === ValidatedOptions.error && styles.modifiers.invalid, direction === SelectDirection.up && styles.modifiers.top, className),\n      ref: this.parentRef\n    }, getOUIAProps(Select.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe), width && {\n      style: {\n        width\n      }\n    }, validated !== ValidatedOptions.default && {\n      'aria-describedby': ariaDescribedby\n    }, validated !== ValidatedOptions.default && {\n      'aria-invalid': ariaInvalid\n    }), React.createElement(SelectToggle, {\n      id: selectToggleId,\n      parentRef: this.parentRef,\n      menuRef: this.menuComponentRef,\n      isOpen: isOpen,\n      isPlain: isPlain,\n      onToggle: onToggle,\n      onEnter: this.onEnter,\n      onClose: this.onClose,\n      variant: variant,\n      \"aria-labelledby\": `${ariaLabelledBy || ''} ${selectToggleId}`,\n      \"aria-label\": toggleAriaLabel,\n      handleTypeaheadKeys: this.handleTypeaheadKeys,\n      isDisabled: isDisabled,\n      hasClearButton: hasOnClear,\n      onClickTypeaheadToggleButton: this.onClickTypeaheadToggleButton\n    }, customContent && React.createElement(\"div\", {\n      className: css(styles.selectToggleWrapper)\n    }, toggleIcon && React.createElement(\"span\", {\n      className: css(styles.selectToggleIcon)\n    }, toggleIcon), React.createElement(\"span\", {\n      className: css(styles.selectToggleText)\n    }, placeholderText)), variant === SelectVariant.single && !customContent && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: css(styles.selectToggleWrapper)\n    }, toggleIcon && React.createElement(\"span\", {\n      className: css(styles.selectToggleIcon)\n    }, toggleIcon), React.createElement(\"span\", {\n      className: css(styles.selectToggleText)\n    }, this.getDisplay(selections[0], 'node') || placeholderText || childPlaceholderText)), hasOnClear && hasAnySelections && clearBtn), variant === SelectVariant.checkbox && !customContent && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: css(styles.selectToggleWrapper)\n    }, toggleIcon && React.createElement(\"span\", {\n      className: css(styles.selectToggleIcon)\n    }, toggleIcon), React.createElement(\"span\", {\n      className: css(styles.selectToggleText)\n    }, placeholderText), !isCheckboxSelectionBadgeHidden && hasAnySelections && React.createElement(\"div\", {\n      className: css(styles.selectToggleBadge)\n    }, React.createElement(\"span\", {\n      className: css(badgeStyles.badge, badgeStyles.modifiers.read)\n    }, this.generateSelectedBadge()))), hasOnClear && hasAnySelections && clearBtn), variant === SelectVariant.typeahead && !customContent && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: css(styles.selectToggleWrapper)\n    }, toggleIcon && React.createElement(\"span\", {\n      className: css(styles.selectToggleIcon)\n    }, toggleIcon), React.createElement(\"input\", {\n      className: css(formStyles.formControl, styles.selectToggleTypeahead),\n      \"aria-activedescendant\": typeaheadActiveChild && typeaheadActiveChild.id,\n      id: `${selectToggleId}-select-typeahead`,\n      \"aria-label\": typeAheadAriaLabel,\n      placeholder: placeholderText,\n      value: typeaheadInputValue !== null ? typeaheadInputValue : this.getDisplay(selections[0], 'text') || '',\n      type: \"text\",\n      onClick: this.onClick,\n      onChange: this.onChange,\n      autoComplete: \"off\",\n      disabled: isDisabled,\n      ref: this.inputRef\n    })), hasOnClear && (selections[0] || typeaheadInputValue) && clearBtn), variant === SelectVariant.typeaheadMulti && !customContent && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: css(styles.selectToggleWrapper)\n    }, toggleIcon && React.createElement(\"span\", {\n      className: css(styles.selectToggleIcon)\n    }, toggleIcon), selections && Array.isArray(selections) && selections.length > 0 && selectedChips, React.createElement(\"input\", {\n      className: css(formStyles.formControl, styles.selectToggleTypeahead),\n      \"aria-activedescendant\": typeaheadActiveChild && typeaheadActiveChild.id,\n      id: `${selectToggleId}-select-multi-typeahead-typeahead`,\n      \"aria-label\": typeAheadAriaLabel,\n      \"aria-invalid\": validated === ValidatedOptions.error,\n      placeholder: placeholderText,\n      value: typeaheadInputValue !== null ? typeaheadInputValue : '',\n      type: \"text\",\n      onChange: this.onChange,\n      onClick: this.onClick,\n      autoComplete: \"off\",\n      disabled: isDisabled,\n      ref: this.inputRef\n    })), hasOnClear && (selections && selections.length > 0 || typeaheadInputValue) && clearBtn), validated === ValidatedOptions.success && React.createElement(\"span\", {\n      className: css(styles.selectToggleStatusIcon)\n    }, React.createElement(CheckCircleIcon, {\n      \"aria-hidden\": \"true\"\n    })), validated === ValidatedOptions.error && React.createElement(\"span\", {\n      className: css(styles.selectToggleStatusIcon)\n    }, React.createElement(ExclamationCircleIcon, {\n      \"aria-hidden\": \"true\"\n    })), validated === ValidatedOptions.warning && React.createElement(\"span\", {\n      className: css(styles.selectToggleStatusIcon)\n    }, React.createElement(ExclamationTriangleIcon, {\n      \"aria-hidden\": \"true\"\n    }))), isOpen && menuAppendTo === 'inline' && menuContainer);\n\n    const getParentElement = () => {\n      if (this.parentRef && this.parentRef.current) {\n        return this.parentRef.current.parentElement;\n      }\n\n      return null;\n    };\n\n    return React.createElement(GenerateId, null, randomId => React.createElement(SelectContext.Provider, {\n      value: {\n        onSelect,\n        onFavorite,\n        onClose: this.onClose,\n        variant,\n        inputIdPrefix: inputIdPrefix || randomId\n      }\n    }, menuAppendTo === 'inline' ? mainContainer : React.createElement(Popper, {\n      trigger: mainContainer,\n      popper: popperContainer,\n      direction: direction,\n      appendTo: menuAppendTo === 'parent' ? getParentElement() : menuAppendTo,\n      isVisible: isOpen\n    })));\n  }\n\n}\nSelect.displayName = 'Select';\nSelect.defaultProps = {\n  children: [],\n  className: '',\n  direction: SelectDirection.down,\n  toggleId: null,\n  isOpen: false,\n  isGrouped: false,\n  isPlain: false,\n  isDisabled: false,\n  isCreatable: false,\n  validated: 'default',\n  'aria-label': '',\n  'aria-labelledby': '',\n  'aria-describedby': '',\n  'aria-invalid': false,\n  typeAheadAriaLabel: '',\n  clearSelectionsAriaLabel: 'Clear all',\n  toggleAriaLabel: 'Options menu',\n  removeSelectionAriaLabel: 'Remove',\n  selections: [],\n  createText: 'Create',\n  placeholderText: '',\n  noResultsFoundText: 'No results found',\n  variant: SelectVariant.single,\n  width: '',\n  onClear: () => undefined,\n  onCreateOption: () => undefined,\n  toggleIcon: null,\n  onFilter: null,\n  onTypeaheadInputChanged: null,\n  customContent: null,\n  hasInlineFilter: false,\n  inlineFilterPlaceholderText: null,\n  customBadgeText: null,\n  inputIdPrefix: '',\n  menuAppendTo: 'inline',\n  favorites: [],\n  favoritesLabel: 'Favorites',\n  ouiaSafe: true,\n  chipGroupComponent: null\n};","map":{"version":3,"sources":["../../../../src/components/Select/Select.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport badgeStyles from '@patternfly/react-styles/css/components/Badge/badge';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { css } from '@patternfly/react-styles';\nimport TimesCircleIcon from \"@patternfly/react-icons/dist/esm/icons/times-circle-icon\";\nimport CheckCircleIcon from \"@patternfly/react-icons/dist/esm/icons/check-circle-icon\";\nimport ExclamationTriangleIcon from \"@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon\";\nimport ExclamationCircleIcon from \"@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon\";\nimport { SelectMenu } from './SelectMenu';\nimport { SelectOption } from './SelectOption';\nimport { SelectGroup } from './SelectGroup';\nimport { SelectToggle } from './SelectToggle';\nimport { SelectContext, SelectVariant, SelectDirection, KeyTypes } from './selectConstants';\nimport { Chip, ChipGroup } from '../ChipGroup';\nimport { keyHandler, getNextIndex, getOUIAProps, getDefaultOUIAId, GenerateId } from '../../helpers';\nimport { Divider } from '../Divider';\nimport { Popper } from '../../helpers/Popper/Popper';\nimport { createRenderableFavorites, extendItemsWithFavorite } from '../../helpers/favorites';\nimport { ValidatedOptions } from '../../helpers/constants';\n// seed for the aria-labelledby ID\nlet currentId = 0;\nexport class Select extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.parentRef = React.createRef();\n        this.menuComponentRef = React.createRef();\n        this.filterRef = React.createRef();\n        this.clearRef = React.createRef();\n        this.inputRef = React.createRef();\n        this.refCollection = [[]];\n        this.optionContainerRefCollection = [];\n        this.state = {\n            openedOnEnter: false,\n            typeaheadInputValue: null,\n            typeaheadFilteredChildren: React.Children.toArray(this.props.children),\n            favoritesGroup: [],\n            typeaheadCurrIndex: -1,\n            typeaheadStoredIndex: -1,\n            creatableValue: '',\n            tabbedIntoFavoritesMenu: false,\n            ouiaStateId: getDefaultOUIAId(Select.displayName, this.props.variant)\n        };\n        this.getTypeaheadActiveChild = (typeaheadCurrIndex) => this.refCollection[typeaheadCurrIndex] ? this.refCollection[typeaheadCurrIndex][0] : null;\n        this.componentDidUpdate = (prevProps, prevState) => {\n            if (this.props.hasInlineFilter) {\n                this.refCollection[0][0] = this.filterRef.current;\n            }\n            if (!prevState.openedOnEnter && this.state.openedOnEnter && !this.props.customContent) {\n                const firstRef = this.refCollection.find(ref => ref !== null);\n                if (firstRef && firstRef[0]) {\n                    firstRef[0].focus();\n                }\n            }\n            if (prevProps.children !== this.props.children) {\n                this.updateTypeAheadFilteredChildren(prevState.typeaheadInputValue || '', null);\n            }\n            if (this.props.onFavorite &&\n                (this.props.favorites.length !== prevProps.favorites.length ||\n                    this.state.typeaheadFilteredChildren !== prevState.typeaheadFilteredChildren)) {\n                const tempRenderableChildren = this.props.variant === 'typeahead' || this.props.variant === 'typeaheadmulti'\n                    ? this.state.typeaheadFilteredChildren\n                    : this.props.children;\n                const renderableFavorites = createRenderableFavorites(tempRenderableChildren, this.props.isGrouped, this.props.favorites);\n                const favoritesGroup = renderableFavorites.length\n                    ? [\n                        React.createElement(SelectGroup, { key: \"favorites\", label: this.props.favoritesLabel }, renderableFavorites),\n                        React.createElement(Divider, { key: \"favorites-group-divider\" })\n                    ]\n                    : [];\n                this.setState({ favoritesGroup });\n            }\n        };\n        this.onEnter = () => {\n            this.setState({ openedOnEnter: true });\n        };\n        this.onClose = () => {\n            this.setState({\n                openedOnEnter: false,\n                typeaheadInputValue: null,\n                typeaheadFilteredChildren: React.Children.toArray(this.props.children),\n                typeaheadCurrIndex: -1,\n                tabbedIntoFavoritesMenu: false\n            });\n        };\n        this.onChange = (e) => {\n            if (e.target.value.toString() !== '' && !this.props.isOpen) {\n                this.props.onToggle(true);\n            }\n            if (this.props.onTypeaheadInputChanged) {\n                this.props.onTypeaheadInputChanged(e.target.value.toString());\n            }\n            this.setState({\n                typeaheadCurrIndex: -1,\n                typeaheadInputValue: e.target.value,\n                creatableValue: e.target.value\n            });\n            this.updateTypeAheadFilteredChildren(e.target.value.toString(), e);\n            this.refCollection = [[]];\n        };\n        this.updateTypeAheadFilteredChildren = (typeaheadInputValue, e) => {\n            let typeaheadFilteredChildren;\n            const { onFilter, isCreatable, onCreateOption, createText, noResultsFoundText, children, isGrouped } = this.props;\n            if (onFilter) {\n                /* The updateTypeAheadFilteredChildren callback is not only called on input changes but also when the children change.\n                 * In this case the e is null but we can get the typeaheadInputValue from the state.\n                 */\n                typeaheadFilteredChildren = onFilter(e, e ? e.target.value : typeaheadInputValue) || children;\n            }\n            else {\n                let input;\n                try {\n                    input = new RegExp(typeaheadInputValue.toString(), 'i');\n                }\n                catch (err) {\n                    input = new RegExp(typeaheadInputValue.toString().replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i');\n                }\n                const childrenArray = React.Children.toArray(children);\n                if (isGrouped) {\n                    const childFilter = (child) => child.props.value && this.getDisplay(child.props.value.toString(), 'text').search(input) === 0;\n                    typeaheadFilteredChildren =\n                        typeaheadInputValue.toString() !== ''\n                            ? React.Children.map(children, group => {\n                                if (group.type === SelectGroup) {\n                                    const filteredGroupChildren = React.Children.toArray(group.props.children).filter(childFilter);\n                                    if (filteredGroupChildren.length > 0) {\n                                        return React.cloneElement(group, {\n                                            titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n                                            children: filteredGroupChildren\n                                        });\n                                    }\n                                }\n                                else {\n                                    return React.Children.toArray(group).filter(childFilter);\n                                }\n                            })\n                            : childrenArray;\n                }\n                else {\n                    typeaheadFilteredChildren =\n                        typeaheadInputValue.toString() !== ''\n                            ? childrenArray.filter(child => {\n                                const valueToCheck = child.props.value;\n                                // Dividers don't have value and should not be filtered\n                                if (!valueToCheck) {\n                                    return true;\n                                }\n                                const isSelectOptionObject = typeof valueToCheck !== 'string' &&\n                                    valueToCheck.toString &&\n                                    valueToCheck.compareTo;\n                                if (isSelectOptionObject) {\n                                    return valueToCheck.compareTo(typeaheadInputValue);\n                                }\n                                else {\n                                    return this.getDisplay(child.props.value.toString(), 'text').search(input) === 0;\n                                }\n                            })\n                            : childrenArray;\n                }\n            }\n            if (!typeaheadFilteredChildren) {\n                typeaheadFilteredChildren = [];\n            }\n            if (typeaheadFilteredChildren.length === 0) {\n                !isCreatable &&\n                    typeaheadFilteredChildren.push(React.createElement(SelectOption, { isDisabled: true, key: 0, value: noResultsFoundText, isNoResultsOption: true }));\n            }\n            if (isCreatable && typeaheadInputValue !== '') {\n                const newValue = typeaheadInputValue;\n                typeaheadFilteredChildren.push(React.createElement(SelectOption, { key: 0, value: newValue, onClick: () => onCreateOption && onCreateOption(newValue) },\n                    createText,\n                    \" \\\"\",\n                    newValue,\n                    \"\\\"\"));\n            }\n            this.setState({\n                typeaheadFilteredChildren\n            });\n        };\n        this.onClick = (e) => {\n            if (!this.props.isOpen) {\n                this.props.onToggle(true);\n            }\n            e.stopPropagation();\n        };\n        this.clearSelection = (e) => {\n            e.stopPropagation();\n            this.setState({\n                typeaheadInputValue: null,\n                typeaheadFilteredChildren: React.Children.toArray(this.props.children),\n                typeaheadCurrIndex: -1\n            });\n        };\n        this.sendRef = (optionRef, favoriteRef, optionContainerRef, index) => {\n            this.refCollection[index] = [optionRef, favoriteRef];\n            this.optionContainerRefCollection[index] = optionContainerRef;\n        };\n        this.handleMenuKeys = (index, innerIndex, position) => {\n            keyHandler(index, innerIndex, position, this.refCollection, this.refCollection);\n            if (this.props.variant === SelectVariant.typeahead || this.props.variant === SelectVariant.typeaheadMulti) {\n                if (position !== 'tab') {\n                    this.handleTypeaheadKeys(position);\n                }\n            }\n        };\n        this.moveFocus = (nextIndex, updateCurrentIndex = true) => {\n            const { isCreatable, createText } = this.props;\n            const hasDescriptionElm = Boolean(this.refCollection[nextIndex][0] && this.refCollection[nextIndex][0].classList.contains('pf-m-description'));\n            const optionTextElm = hasDescriptionElm\n                ? this.refCollection[nextIndex][0].firstElementChild\n                : this.refCollection[nextIndex][0];\n            let typeaheadInputValue = '';\n            if (isCreatable && optionTextElm.innerText.includes(createText)) {\n                typeaheadInputValue = this.state.creatableValue;\n            }\n            else if (optionTextElm) {\n                typeaheadInputValue = optionTextElm.innerText;\n            }\n            this.setState(prevState => ({\n                typeaheadCurrIndex: updateCurrentIndex ? nextIndex : prevState.typeaheadCurrIndex,\n                typeaheadStoredIndex: nextIndex,\n                typeaheadInputValue\n            }));\n        };\n        this.handleTypeaheadKeys = (position) => {\n            const { isOpen, onFavorite } = this.props;\n            const { typeaheadCurrIndex, tabbedIntoFavoritesMenu, typeaheadStoredIndex } = this.state;\n            const typeaheadActiveChild = this.getTypeaheadActiveChild(typeaheadCurrIndex);\n            if (isOpen) {\n                if (position === 'enter') {\n                    if (typeaheadActiveChild || (this.refCollection[0] && this.refCollection[0][0])) {\n                        this.setState({\n                            typeaheadInputValue: (typeaheadActiveChild && typeaheadActiveChild.innerText) || this.refCollection[0][0].innerText\n                        });\n                        if (typeaheadActiveChild) {\n                            typeaheadActiveChild.click();\n                        }\n                        else {\n                            this.refCollection[0][0].click();\n                        }\n                    }\n                }\n                else if (position === 'tab') {\n                    if (onFavorite) {\n                        if (this.inputRef.current === document.activeElement) {\n                            let indexForFocus = 0;\n                            if (typeaheadCurrIndex !== -1) {\n                                indexForFocus = typeaheadCurrIndex;\n                            }\n                            else if (typeaheadStoredIndex !== -1) {\n                                indexForFocus = typeaheadStoredIndex;\n                            }\n                            if (this.refCollection[indexForFocus] !== null && this.refCollection[indexForFocus][0] !== null) {\n                                this.refCollection[indexForFocus][0].focus();\n                            }\n                            else {\n                                this.clearRef.current.focus();\n                            }\n                            this.setState({\n                                tabbedIntoFavoritesMenu: true,\n                                typeaheadCurrIndex: -1\n                            });\n                        }\n                        else {\n                            this.inputRef.current.focus();\n                            this.setState({ tabbedIntoFavoritesMenu: false });\n                        }\n                    }\n                    else {\n                        this.props.onToggle(false);\n                    }\n                }\n                else if (!tabbedIntoFavoritesMenu) {\n                    let nextIndex;\n                    if (typeaheadCurrIndex === -1 && position === 'down') {\n                        nextIndex = 0;\n                    }\n                    else if (typeaheadCurrIndex === -1 && position === 'up') {\n                        nextIndex = this.refCollection.length - 1;\n                    }\n                    else if (position !== 'left' && position !== 'right') {\n                        nextIndex = getNextIndex(typeaheadCurrIndex, position, this.refCollection);\n                    }\n                    else {\n                        nextIndex = typeaheadCurrIndex;\n                    }\n                    if (this.refCollection[nextIndex] === null) {\n                        return;\n                    }\n                    this.moveFocus(nextIndex);\n                }\n                else {\n                    const nextIndex = this.refCollection.findIndex(ref => ref !== undefined && (ref[0] === document.activeElement || ref[1] === document.activeElement));\n                    this.moveFocus(nextIndex);\n                }\n            }\n        };\n        this.onClickTypeaheadToggleButton = () => {\n            if (this.inputRef && this.inputRef.current) {\n                this.inputRef.current.focus();\n            }\n        };\n        this.getDisplay = (value, type = 'node') => {\n            if (!value) {\n                return;\n            }\n            const item = this.props.isGrouped\n                ? React.Children.toArray(this.props.children)\n                    .reduce((acc, curr) => [...acc, ...React.Children.toArray(curr.props.children)], [])\n                    .find(child => child.props.value.toString() === value.toString())\n                : React.Children.toArray(this.props.children).find(child => child.props.value &&\n                    child.props.value.toString() === value.toString());\n            if (item) {\n                if (item && item.props.children) {\n                    if (type === 'node') {\n                        return item.props.children;\n                    }\n                    return this.findText(item);\n                }\n                return item.props.value.toString();\n            }\n            return value.toString();\n        };\n        this.findText = (item) => {\n            if (typeof item === 'string') {\n                return item;\n            }\n            else if (!React.isValidElement(item)) {\n                return '';\n            }\n            else {\n                const multi = [];\n                React.Children.toArray(item.props.children).forEach(child => multi.push(this.findText(child)));\n                return multi.join('');\n            }\n        };\n        this.generateSelectedBadge = () => {\n            const { customBadgeText, selections } = this.props;\n            if (customBadgeText !== null) {\n                return customBadgeText;\n            }\n            if (Array.isArray(selections) && selections.length > 0) {\n                return selections.length;\n            }\n            return null;\n        };\n    }\n    extendTypeaheadChildren(typeaheadCurrIndex, favoritesGroup) {\n        const { isGrouped, onFavorite } = this.props;\n        const typeaheadChildren = favoritesGroup\n            ? favoritesGroup.concat(this.state.typeaheadFilteredChildren)\n            : this.state.typeaheadFilteredChildren;\n        const activeElement = this.optionContainerRefCollection[typeaheadCurrIndex];\n        let typeaheadActiveChild = this.getTypeaheadActiveChild(typeaheadCurrIndex);\n        if (typeaheadActiveChild && typeaheadActiveChild.classList.contains('pf-m-description')) {\n            typeaheadActiveChild = typeaheadActiveChild.firstElementChild;\n        }\n        this.refCollection = [[]];\n        this.optionContainerRefCollection = [];\n        if (isGrouped) {\n            return React.Children.map(typeaheadChildren, (group) => {\n                if (group.type === Divider) {\n                    return group;\n                }\n                else if (group.type === SelectGroup && onFavorite) {\n                    return React.cloneElement(group, {\n                        titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n                        children: React.Children.map(group.props.children, (child) => child.type === Divider\n                            ? child\n                            : React.cloneElement(child, {\n                                isFocused: activeElement &&\n                                    (activeElement.id === child.props.id ||\n                                        (this.props.isCreatable &&\n                                            typeaheadActiveChild.innerText ===\n                                                `{createText} \"${group.props.value}\"`))\n                            }))\n                    });\n                }\n                else if (group.type === SelectGroup) {\n                    return React.cloneElement(group, {\n                        titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n                        children: React.Children.map(group.props.children, (child) => child.type === Divider\n                            ? child\n                            : React.cloneElement(child, {\n                                isFocused: typeaheadActiveChild &&\n                                    (typeaheadActiveChild.innerText === child.props.value.toString() ||\n                                        (this.props.isCreatable &&\n                                            typeaheadActiveChild.innerText ===\n                                                `{createText} \"${child.props.value}\"`))\n                            }))\n                    });\n                }\n                else {\n                    // group has been filtered down to SelectOption\n                    return React.cloneElement(group, {\n                        isFocused: typeaheadActiveChild &&\n                            (typeaheadActiveChild.innerText === group.props.value.toString() ||\n                                (this.props.isCreatable && typeaheadActiveChild.innerText === `{createText} \"${group.props.value}\"`))\n                    });\n                }\n            });\n        }\n        return typeaheadChildren.map((child) => {\n            const childElement = child;\n            return childElement.type.displayName === 'Divider'\n                ? child\n                : React.cloneElement(child, {\n                    isFocused: typeaheadActiveChild &&\n                        (typeaheadActiveChild.innerText === child.props.value.toString() ||\n                            (this.props.isCreatable &&\n                                typeaheadActiveChild.innerText === `{createText} \"${child.props.value}\"`))\n                });\n        });\n    }\n    render() {\n        const _a = this.props, { children, chipGroupProps, chipGroupComponent, className, customContent, variant, direction, onToggle, onSelect, onClear, toggleId, isOpen, isGrouped, isPlain, isDisabled, validated, selections: selectionsProp, typeAheadAriaLabel, clearSelectionsAriaLabel, toggleAriaLabel, removeSelectionAriaLabel, 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledBy, 'aria-describedby': ariaDescribedby, 'aria-invalid': ariaInvalid, placeholderText, width, maxHeight, toggleIcon, ouiaId, ouiaSafe, hasInlineFilter, isCheckboxSelectionBadgeHidden, inlineFilterPlaceholderText, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        onFilter, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        onTypeaheadInputChanged, onCreateOption, isCreatable, createText, noResultsFoundText, customBadgeText, inputIdPrefix, \n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        menuAppendTo, favorites, onFavorite, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        favoritesLabel } = _a, props = __rest(_a, [\"children\", \"chipGroupProps\", \"chipGroupComponent\", \"className\", \"customContent\", \"variant\", \"direction\", \"onToggle\", \"onSelect\", \"onClear\", \"toggleId\", \"isOpen\", \"isGrouped\", \"isPlain\", \"isDisabled\", \"validated\", \"selections\", \"typeAheadAriaLabel\", \"clearSelectionsAriaLabel\", \"toggleAriaLabel\", \"removeSelectionAriaLabel\", 'aria-label', 'aria-labelledby', 'aria-describedby', 'aria-invalid', \"placeholderText\", \"width\", \"maxHeight\", \"toggleIcon\", \"ouiaId\", \"ouiaSafe\", \"hasInlineFilter\", \"isCheckboxSelectionBadgeHidden\", \"inlineFilterPlaceholderText\", \"onFilter\", \"onTypeaheadInputChanged\", \"onCreateOption\", \"isCreatable\", \"createText\", \"noResultsFoundText\", \"customBadgeText\", \"inputIdPrefix\", \"menuAppendTo\", \"favorites\", \"onFavorite\", \"favoritesLabel\"]);\n        const { openedOnEnter, typeaheadCurrIndex, typeaheadInputValue, typeaheadFilteredChildren, favoritesGroup } = this.state;\n        const selectToggleId = toggleId || `pf-select-toggle-id-${currentId++}`;\n        const selections = Array.isArray(selectionsProp) ? selectionsProp : [selectionsProp];\n        const hasAnySelections = Boolean(selections[0] && selections[0] !== '');\n        const typeaheadActiveChild = this.getTypeaheadActiveChild(typeaheadCurrIndex);\n        let childPlaceholderText = null;\n        // If onFavorites is set,  add isFavorite prop to children and add a Favorites group to the SelectMenu\n        let renderableItems = [];\n        if (onFavorite) {\n            // if variant is type-ahead call the extendTypeaheadChildren before adding favorites\n            let tempExtendedChildren = children;\n            if (variant === 'typeahead' || variant === 'typeaheadmulti') {\n                tempExtendedChildren = this.extendTypeaheadChildren(typeaheadCurrIndex, favoritesGroup);\n            }\n            else if (onFavorite) {\n                tempExtendedChildren = favoritesGroup.concat(children);\n            }\n            // mark items that are favorited with isFavorite\n            renderableItems = extendItemsWithFavorite(tempExtendedChildren, isGrouped, favorites);\n        }\n        else {\n            renderableItems = children;\n        }\n        if (!customContent) {\n            if (!hasAnySelections && !placeholderText) {\n                const childPlaceholder = React.Children.toArray(children).filter((child) => child.props.isPlaceholder === true);\n                childPlaceholderText =\n                    (childPlaceholder[0] && this.getDisplay(childPlaceholder[0].props.value, 'node')) ||\n                        (children[0] && this.getDisplay(children[0].props.value, 'node'));\n            }\n        }\n        const hasOnClear = onClear !== Select.defaultProps.onClear;\n        const clearBtn = (React.createElement(\"button\", { className: css(buttonStyles.button, buttonStyles.modifiers.plain, styles.selectToggleClear), onClick: e => {\n                this.clearSelection(e);\n                onClear(e);\n            }, \"aria-label\": clearSelectionsAriaLabel, type: \"button\", disabled: isDisabled, ref: this.clearRef, onKeyDown: event => {\n                if (event.key === KeyTypes.Enter) {\n                    this.clearRef.current.click();\n                }\n            } },\n            React.createElement(TimesCircleIcon, { \"aria-hidden\": true })));\n        let selectedChips = null;\n        if (variant === SelectVariant.typeaheadMulti) {\n            selectedChips = chipGroupComponent ? (chipGroupComponent) : (React.createElement(ChipGroup, Object.assign({}, chipGroupProps), selections &&\n                selections.map(item => (React.createElement(Chip, { key: item, onClick: (e) => onSelect(e, item), closeBtnAriaLabel: removeSelectionAriaLabel }, this.getDisplay(item, 'node'))))));\n        }\n        let filterWithChildren = children;\n        if (hasInlineFilter) {\n            const filterBox = (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { key: \"inline-filter\", className: css(styles.selectMenuSearch) },\n                    React.createElement(\"input\", { key: \"inline-filter-input\", type: \"search\", className: css(formStyles.formControl, formStyles.modifiers.search), onChange: this.onChange, placeholder: inlineFilterPlaceholderText, onKeyDown: event => {\n                            if (event.key === KeyTypes.ArrowUp) {\n                                this.handleMenuKeys(0, 0, 'up');\n                            }\n                            else if (event.key === KeyTypes.ArrowDown) {\n                                this.handleMenuKeys(0, 0, 'down');\n                            }\n                            else if (event.key === KeyTypes.ArrowLeft) {\n                                this.handleMenuKeys(0, 0, 'left');\n                            }\n                            else if (event.key === KeyTypes.ArrowRight) {\n                                this.handleMenuKeys(0, 0, 'right');\n                            }\n                            else if (event.key === KeyTypes.Tab && variant === SelectVariant.checkbox) {\n                                // More modal-like experience for checkboxes\n                                // Let SelectOption handle this\n                                if (event.shiftKey) {\n                                    this.handleMenuKeys(0, 0, 'up');\n                                }\n                                else {\n                                    this.handleMenuKeys(0, 0, 'down');\n                                }\n                                event.stopPropagation();\n                                event.preventDefault();\n                            }\n                        }, ref: this.filterRef, autoComplete: \"off\" })),\n                React.createElement(Divider, { key: \"inline-filter-divider\" })));\n            this.refCollection[0][0] = this.filterRef.current;\n            filterWithChildren = [filterBox, ...typeaheadFilteredChildren].map((option, index) => React.cloneElement(option, { key: index }));\n        }\n        let variantProps;\n        let variantChildren;\n        if (customContent) {\n            variantProps = {\n                selected: selections,\n                openedOnEnter,\n                isCustomContent: true\n            };\n            variantChildren = customContent;\n        }\n        else {\n            switch (variant) {\n                case 'single':\n                    variantProps = {\n                        selected: selections[0],\n                        openedOnEnter\n                    };\n                    variantChildren = renderableItems;\n                    break;\n                case 'checkbox':\n                    variantProps = {\n                        checked: selections,\n                        isGrouped,\n                        hasInlineFilter,\n                        openedOnEnter\n                    };\n                    variantChildren = filterWithChildren;\n                    break;\n                case 'typeahead':\n                    variantProps = {\n                        selected: selections[0],\n                        openedOnEnter\n                    };\n                    variantChildren = onFavorite ? renderableItems : this.extendTypeaheadChildren(typeaheadCurrIndex);\n                    if (variantChildren.length === 0) {\n                        variantChildren.push(React.createElement(SelectOption, { isDisabled: true, key: 0, value: noResultsFoundText, isNoResultsOption: true }));\n                    }\n                    break;\n                case 'typeaheadmulti':\n                    variantProps = {\n                        selected: selections,\n                        openedOnEnter\n                    };\n                    variantChildren = onFavorite ? renderableItems : this.extendTypeaheadChildren(typeaheadCurrIndex);\n                    if (variantChildren.length === 0) {\n                        variantChildren.push(React.createElement(SelectOption, { isDisabled: true, key: 0, value: noResultsFoundText, isNoResultsOption: true }));\n                    }\n                    break;\n            }\n        }\n        const menuContainer = (React.createElement(SelectMenu, Object.assign({}, props, { isGrouped: isGrouped, selected: selections }, variantProps, { openedOnEnter: openedOnEnter, \"aria-label\": ariaLabel, \"aria-labelledby\": ariaLabelledBy, sendRef: this.sendRef, keyHandler: this.handleMenuKeys, maxHeight: maxHeight, ref: this.menuComponentRef }), variantChildren));\n        const popperContainer = (React.createElement(\"div\", Object.assign({ className: css(styles.select, isOpen && styles.modifiers.expanded, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning, validated === ValidatedOptions.error && styles.modifiers.invalid, direction === SelectDirection.up && styles.modifiers.top, className) }, (width && { style: { width } }), (validated !== ValidatedOptions.default && { 'aria-describedby': ariaDescribedby }), (validated !== ValidatedOptions.default && { 'aria-invalid': ariaInvalid })), isOpen && menuContainer));\n        const mainContainer = (React.createElement(\"div\", Object.assign({ className: css(styles.select, isOpen && styles.modifiers.expanded, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning, validated === ValidatedOptions.error && styles.modifiers.invalid, direction === SelectDirection.up && styles.modifiers.top, className), ref: this.parentRef }, getOUIAProps(Select.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe), (width && { style: { width } }), (validated !== ValidatedOptions.default && { 'aria-describedby': ariaDescribedby }), (validated !== ValidatedOptions.default && { 'aria-invalid': ariaInvalid })),\n            React.createElement(SelectToggle, { id: selectToggleId, parentRef: this.parentRef, menuRef: this.menuComponentRef, isOpen: isOpen, isPlain: isPlain, onToggle: onToggle, onEnter: this.onEnter, onClose: this.onClose, variant: variant, \"aria-labelledby\": `${ariaLabelledBy || ''} ${selectToggleId}`, \"aria-label\": toggleAriaLabel, handleTypeaheadKeys: this.handleTypeaheadKeys, isDisabled: isDisabled, hasClearButton: hasOnClear, onClickTypeaheadToggleButton: this.onClickTypeaheadToggleButton },\n                customContent && (React.createElement(\"div\", { className: css(styles.selectToggleWrapper) },\n                    toggleIcon && React.createElement(\"span\", { className: css(styles.selectToggleIcon) }, toggleIcon),\n                    React.createElement(\"span\", { className: css(styles.selectToggleText) }, placeholderText))),\n                variant === SelectVariant.single && !customContent && (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { className: css(styles.selectToggleWrapper) },\n                        toggleIcon && React.createElement(\"span\", { className: css(styles.selectToggleIcon) }, toggleIcon),\n                        React.createElement(\"span\", { className: css(styles.selectToggleText) }, this.getDisplay(selections[0], 'node') || placeholderText || childPlaceholderText)),\n                    hasOnClear && hasAnySelections && clearBtn)),\n                variant === SelectVariant.checkbox && !customContent && (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { className: css(styles.selectToggleWrapper) },\n                        toggleIcon && React.createElement(\"span\", { className: css(styles.selectToggleIcon) }, toggleIcon),\n                        React.createElement(\"span\", { className: css(styles.selectToggleText) }, placeholderText),\n                        !isCheckboxSelectionBadgeHidden && hasAnySelections && (React.createElement(\"div\", { className: css(styles.selectToggleBadge) },\n                            React.createElement(\"span\", { className: css(badgeStyles.badge, badgeStyles.modifiers.read) }, this.generateSelectedBadge())))),\n                    hasOnClear && hasAnySelections && clearBtn)),\n                variant === SelectVariant.typeahead && !customContent && (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { className: css(styles.selectToggleWrapper) },\n                        toggleIcon && React.createElement(\"span\", { className: css(styles.selectToggleIcon) }, toggleIcon),\n                        React.createElement(\"input\", { className: css(formStyles.formControl, styles.selectToggleTypeahead), \"aria-activedescendant\": typeaheadActiveChild && typeaheadActiveChild.id, id: `${selectToggleId}-select-typeahead`, \"aria-label\": typeAheadAriaLabel, placeholder: placeholderText, value: typeaheadInputValue !== null\n                                ? typeaheadInputValue\n                                : this.getDisplay(selections[0], 'text') || '', type: \"text\", onClick: this.onClick, onChange: this.onChange, autoComplete: \"off\", disabled: isDisabled, ref: this.inputRef })),\n                    hasOnClear && (selections[0] || typeaheadInputValue) && clearBtn)),\n                variant === SelectVariant.typeaheadMulti && !customContent && (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { className: css(styles.selectToggleWrapper) },\n                        toggleIcon && React.createElement(\"span\", { className: css(styles.selectToggleIcon) }, toggleIcon),\n                        selections && Array.isArray(selections) && selections.length > 0 && selectedChips,\n                        React.createElement(\"input\", { className: css(formStyles.formControl, styles.selectToggleTypeahead), \"aria-activedescendant\": typeaheadActiveChild && typeaheadActiveChild.id, id: `${selectToggleId}-select-multi-typeahead-typeahead`, \"aria-label\": typeAheadAriaLabel, \"aria-invalid\": validated === ValidatedOptions.error, placeholder: placeholderText, value: typeaheadInputValue !== null ? typeaheadInputValue : '', type: \"text\", onChange: this.onChange, onClick: this.onClick, autoComplete: \"off\", disabled: isDisabled, ref: this.inputRef })),\n                    hasOnClear && ((selections && selections.length > 0) || typeaheadInputValue) && clearBtn)),\n                validated === ValidatedOptions.success && (React.createElement(\"span\", { className: css(styles.selectToggleStatusIcon) },\n                    React.createElement(CheckCircleIcon, { \"aria-hidden\": \"true\" }))),\n                validated === ValidatedOptions.error && (React.createElement(\"span\", { className: css(styles.selectToggleStatusIcon) },\n                    React.createElement(ExclamationCircleIcon, { \"aria-hidden\": \"true\" }))),\n                validated === ValidatedOptions.warning && (React.createElement(\"span\", { className: css(styles.selectToggleStatusIcon) },\n                    React.createElement(ExclamationTriangleIcon, { \"aria-hidden\": \"true\" })))),\n            isOpen && menuAppendTo === 'inline' && menuContainer));\n        const getParentElement = () => {\n            if (this.parentRef && this.parentRef.current) {\n                return this.parentRef.current.parentElement;\n            }\n            return null;\n        };\n        return (React.createElement(GenerateId, null, randomId => (React.createElement(SelectContext.Provider, { value: { onSelect, onFavorite, onClose: this.onClose, variant, inputIdPrefix: inputIdPrefix || randomId } }, menuAppendTo === 'inline' ? (mainContainer) : (React.createElement(Popper, { trigger: mainContainer, popper: popperContainer, direction: direction, appendTo: menuAppendTo === 'parent' ? getParentElement() : menuAppendTo, isVisible: isOpen }))))));\n    }\n}\nSelect.displayName = 'Select';\nSelect.defaultProps = {\n    children: [],\n    className: '',\n    direction: SelectDirection.down,\n    toggleId: null,\n    isOpen: false,\n    isGrouped: false,\n    isPlain: false,\n    isDisabled: false,\n    isCreatable: false,\n    validated: 'default',\n    'aria-label': '',\n    'aria-labelledby': '',\n    'aria-describedby': '',\n    'aria-invalid': false,\n    typeAheadAriaLabel: '',\n    clearSelectionsAriaLabel: 'Clear all',\n    toggleAriaLabel: 'Options menu',\n    removeSelectionAriaLabel: 'Remove',\n    selections: [],\n    createText: 'Create',\n    placeholderText: '',\n    noResultsFoundText: 'No results found',\n    variant: SelectVariant.single,\n    width: '',\n    onClear: () => undefined,\n    onCreateOption: () => undefined,\n    toggleIcon: null,\n    onFilter: null,\n    onTypeaheadInputChanged: null,\n    customContent: null,\n    hasInlineFilter: false,\n    inlineFilterPlaceholderText: null,\n    customBadgeText: null,\n    inputIdPrefix: '',\n    menuAppendTo: 'inline',\n    favorites: [],\n    favoritesLabel: 'Favorites',\n    ouiaSafe: true,\n    chipGroupComponent: null\n};\n//# sourceMappingURL=Select.js.map"]},"metadata":{},"sourceType":"module"}