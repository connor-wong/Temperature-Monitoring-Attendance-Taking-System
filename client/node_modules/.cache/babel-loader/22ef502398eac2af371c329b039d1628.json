{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { css } from '@patternfly/react-styles';\nimport CaretDownIcon from \"@patternfly/react-icons/dist/esm/icons/caret-down-icon\";\nimport { KeyTypes, SelectVariant } from './selectConstants';\nexport class SelectToggle extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onDocClick = event => {\n      const {\n        parentRef,\n        menuRef,\n        isOpen,\n        onToggle,\n        onClose\n      } = this.props;\n      const clickedOnToggle = parentRef && parentRef.current && parentRef.current.contains(event.target);\n      const clickedWithinMenu = menuRef && menuRef.current && menuRef.current.contains && menuRef.current.contains(event.target);\n\n      if (isOpen && !(clickedOnToggle || clickedWithinMenu)) {\n        onToggle(false);\n        onClose();\n        this.toggle.current.focus();\n      }\n    };\n\n    this.handleGlobalKeys = event => {\n      const {\n        parentRef,\n        menuRef,\n        isOpen,\n        variant,\n        onToggle,\n        onClose\n      } = this.props;\n      const escFromToggle = parentRef && parentRef.current && parentRef.current.contains(event.target);\n      const escFromWithinMenu = menuRef && menuRef.current && menuRef.current.contains && menuRef.current.contains(event.target);\n\n      if (isOpen && event.key === KeyTypes.Tab && (variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti)) {\n        this.props.handleTypeaheadKeys('tab');\n        event.preventDefault();\n        return;\n      }\n\n      if (isOpen && (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) && (escFromToggle || escFromWithinMenu)) {\n        onToggle(false);\n        onClose();\n        this.toggle.current.focus();\n      }\n    };\n\n    this.onKeyDown = event => {\n      const {\n        isOpen,\n        onToggle,\n        variant,\n        onClose,\n        onEnter,\n        handleTypeaheadKeys\n      } = this.props;\n\n      if (variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti) {\n        if (event.key === KeyTypes.ArrowDown || event.key === KeyTypes.ArrowUp) {\n          handleTypeaheadKeys(event.key === KeyTypes.ArrowDown && 'down' || event.key === KeyTypes.ArrowUp && 'up');\n          event.preventDefault();\n        } else if (event.key === KeyTypes.Enter) {\n          if (isOpen) {\n            handleTypeaheadKeys('enter');\n          } else {\n            onToggle(!isOpen);\n          }\n        }\n      }\n\n      if (variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti || event.key === KeyTypes.Tab && !isOpen || event.key !== KeyTypes.Enter && event.key !== KeyTypes.Space) {\n        return;\n      }\n\n      event.preventDefault();\n\n      if ((event.key === KeyTypes.Tab || event.key === KeyTypes.Enter || event.key === KeyTypes.Space) && isOpen) {\n        onToggle(!isOpen);\n        onClose();\n        this.toggle.current.focus();\n      } else if ((event.key === KeyTypes.Enter || event.key === KeyTypes.Space) && !isOpen) {\n        onToggle(!isOpen);\n        onEnter();\n      }\n    };\n\n    const {\n      variant\n    } = props;\n    const isTypeahead = variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti;\n    this.toggle = isTypeahead ? React.createRef() : React.createRef();\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.onDocClick);\n    document.addEventListener('touchstart', this.onDocClick);\n    document.addEventListener('keydown', this.handleGlobalKeys);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.onDocClick);\n    document.removeEventListener('touchstart', this.onDocClick);\n    document.removeEventListener('keydown', this.handleGlobalKeys);\n  }\n\n  render() {\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    const _a = this.props,\n          {\n      className,\n      children,\n      isOpen,\n      isActive,\n      isPlain,\n      isDisabled,\n      variant,\n      onToggle,\n      onEnter,\n      onClose,\n      onClickTypeaheadToggleButton,\n      handleTypeaheadKeys,\n      parentRef,\n      menuRef,\n      id,\n      type,\n      hasClearButton,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-label': ariaLabel\n    } = _a,\n          props = __rest(_a, [\"className\", \"children\", \"isOpen\", \"isActive\", \"isPlain\", \"isDisabled\", \"variant\", \"onToggle\", \"onEnter\", \"onClose\", \"onClickTypeaheadToggleButton\", \"handleTypeaheadKeys\", \"parentRef\", \"menuRef\", \"id\", \"type\", \"hasClearButton\", 'aria-labelledby', 'aria-label']);\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n\n\n    const isTypeahead = variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti || hasClearButton;\n    const toggleProps = {\n      id,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-expanded': isOpen,\n      'aria-haspopup': variant !== SelectVariant.checkbox && 'listbox' || null\n    };\n    return React.createElement(React.Fragment, null, !isTypeahead && React.createElement(\"button\", Object.assign({}, props, toggleProps, {\n      ref: this.toggle,\n      type: type,\n      className: css(styles.selectToggle, isDisabled && styles.modifiers.disabled, isPlain && styles.modifiers.plain, isActive && styles.modifiers.active, className),\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onClick: _event => {\n        onToggle(!isOpen);\n\n        if (isOpen) {\n          onClose();\n        }\n      },\n      onKeyDown: this.onKeyDown,\n      disabled: isDisabled\n    }), children, React.createElement(\"span\", {\n      className: css(styles.selectToggleArrow)\n    }, React.createElement(CaretDownIcon, null))), isTypeahead && React.createElement(\"div\", Object.assign({}, props, {\n      ref: this.toggle,\n      className: css(styles.selectToggle, isDisabled && styles.modifiers.disabled, isPlain && styles.modifiers.plain, isTypeahead && styles.modifiers.typeahead, className),\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onClick: _event => {\n        if (!isDisabled) {\n          onToggle(true);\n        }\n      },\n      onKeyDown: this.onKeyDown\n    }), children, React.createElement(\"button\", Object.assign({}, toggleProps, {\n      type: type,\n      className: css(buttonStyles.button, styles.selectToggleButton, styles.modifiers.plain),\n      \"aria-label\": ariaLabel,\n      onClick: _event => {\n        _event.stopPropagation();\n\n        onToggle(!isOpen);\n\n        if (isOpen) {\n          onClose();\n        }\n\n        onClickTypeaheadToggleButton();\n      }\n    }, (variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti) && {\n      tabIndex: -1\n    }, {\n      disabled: isDisabled\n    }), React.createElement(CaretDownIcon, {\n      className: css(styles.selectToggleArrow)\n    }))));\n  }\n\n}\nSelectToggle.displayName = 'SelectToggle';\nSelectToggle.defaultProps = {\n  className: '',\n  isOpen: false,\n  isActive: false,\n  isPlain: false,\n  isDisabled: false,\n  hasClearButton: false,\n  variant: 'single',\n  'aria-labelledby': '',\n  'aria-label': '',\n  type: 'button',\n  onToggle: () => {},\n  onEnter: () => {},\n  onClose: () => {},\n  onClickTypeaheadToggleButton: () => {}\n};","map":{"version":3,"sources":["../../../../src/components/Select/SelectToggle.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { css } from '@patternfly/react-styles';\nimport CaretDownIcon from \"@patternfly/react-icons/dist/esm/icons/caret-down-icon\";\nimport { KeyTypes, SelectVariant } from './selectConstants';\nexport class SelectToggle extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onDocClick = (event) => {\n            const { parentRef, menuRef, isOpen, onToggle, onClose } = this.props;\n            const clickedOnToggle = parentRef && parentRef.current && parentRef.current.contains(event.target);\n            const clickedWithinMenu = menuRef && menuRef.current && menuRef.current.contains && menuRef.current.contains(event.target);\n            if (isOpen && !(clickedOnToggle || clickedWithinMenu)) {\n                onToggle(false);\n                onClose();\n                this.toggle.current.focus();\n            }\n        };\n        this.handleGlobalKeys = (event) => {\n            const { parentRef, menuRef, isOpen, variant, onToggle, onClose } = this.props;\n            const escFromToggle = parentRef && parentRef.current && parentRef.current.contains(event.target);\n            const escFromWithinMenu = menuRef && menuRef.current && menuRef.current.contains && menuRef.current.contains(event.target);\n            if (isOpen &&\n                event.key === KeyTypes.Tab &&\n                (variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti)) {\n                this.props.handleTypeaheadKeys('tab');\n                event.preventDefault();\n                return;\n            }\n            if (isOpen &&\n                (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) &&\n                (escFromToggle || escFromWithinMenu)) {\n                onToggle(false);\n                onClose();\n                this.toggle.current.focus();\n            }\n        };\n        this.onKeyDown = (event) => {\n            const { isOpen, onToggle, variant, onClose, onEnter, handleTypeaheadKeys } = this.props;\n            if (variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti) {\n                if (event.key === KeyTypes.ArrowDown || event.key === KeyTypes.ArrowUp) {\n                    handleTypeaheadKeys((event.key === KeyTypes.ArrowDown && 'down') || (event.key === KeyTypes.ArrowUp && 'up'));\n                    event.preventDefault();\n                }\n                else if (event.key === KeyTypes.Enter) {\n                    if (isOpen) {\n                        handleTypeaheadKeys('enter');\n                    }\n                    else {\n                        onToggle(!isOpen);\n                    }\n                }\n            }\n            if (variant === SelectVariant.typeahead ||\n                variant === SelectVariant.typeaheadMulti ||\n                (event.key === KeyTypes.Tab && !isOpen) ||\n                (event.key !== KeyTypes.Enter && event.key !== KeyTypes.Space)) {\n                return;\n            }\n            event.preventDefault();\n            if ((event.key === KeyTypes.Tab || event.key === KeyTypes.Enter || event.key === KeyTypes.Space) && isOpen) {\n                onToggle(!isOpen);\n                onClose();\n                this.toggle.current.focus();\n            }\n            else if ((event.key === KeyTypes.Enter || event.key === KeyTypes.Space) && !isOpen) {\n                onToggle(!isOpen);\n                onEnter();\n            }\n        };\n        const { variant } = props;\n        const isTypeahead = variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti;\n        this.toggle = isTypeahead ? React.createRef() : React.createRef();\n    }\n    componentDidMount() {\n        document.addEventListener('mousedown', this.onDocClick);\n        document.addEventListener('touchstart', this.onDocClick);\n        document.addEventListener('keydown', this.handleGlobalKeys);\n    }\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.onDocClick);\n        document.removeEventListener('touchstart', this.onDocClick);\n        document.removeEventListener('keydown', this.handleGlobalKeys);\n    }\n    render() {\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        const _a = this.props, { className, children, isOpen, isActive, isPlain, isDisabled, variant, onToggle, onEnter, onClose, onClickTypeaheadToggleButton, handleTypeaheadKeys, parentRef, menuRef, id, type, hasClearButton, 'aria-labelledby': ariaLabelledBy, 'aria-label': ariaLabel } = _a, props = __rest(_a, [\"className\", \"children\", \"isOpen\", \"isActive\", \"isPlain\", \"isDisabled\", \"variant\", \"onToggle\", \"onEnter\", \"onClose\", \"onClickTypeaheadToggleButton\", \"handleTypeaheadKeys\", \"parentRef\", \"menuRef\", \"id\", \"type\", \"hasClearButton\", 'aria-labelledby', 'aria-label']);\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        const isTypeahead = variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti || hasClearButton;\n        const toggleProps = {\n            id,\n            'aria-labelledby': ariaLabelledBy,\n            'aria-expanded': isOpen,\n            'aria-haspopup': (variant !== SelectVariant.checkbox && 'listbox') || null\n        };\n        return (React.createElement(React.Fragment, null,\n            !isTypeahead && (React.createElement(\"button\", Object.assign({}, props, toggleProps, { ref: this.toggle, type: type, className: css(styles.selectToggle, isDisabled && styles.modifiers.disabled, isPlain && styles.modifiers.plain, isActive && styles.modifiers.active, className), \n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                onClick: _event => {\n                    onToggle(!isOpen);\n                    if (isOpen) {\n                        onClose();\n                    }\n                }, onKeyDown: this.onKeyDown, disabled: isDisabled }),\n                children,\n                React.createElement(\"span\", { className: css(styles.selectToggleArrow) },\n                    React.createElement(CaretDownIcon, null)))),\n            isTypeahead && (React.createElement(\"div\", Object.assign({}, props, { ref: this.toggle, className: css(styles.selectToggle, isDisabled && styles.modifiers.disabled, isPlain && styles.modifiers.plain, isTypeahead && styles.modifiers.typeahead, className), \n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                onClick: _event => {\n                    if (!isDisabled) {\n                        onToggle(true);\n                    }\n                }, onKeyDown: this.onKeyDown }),\n                children,\n                React.createElement(\"button\", Object.assign({}, toggleProps, { type: type, className: css(buttonStyles.button, styles.selectToggleButton, styles.modifiers.plain), \"aria-label\": ariaLabel, onClick: _event => {\n                        _event.stopPropagation();\n                        onToggle(!isOpen);\n                        if (isOpen) {\n                            onClose();\n                        }\n                        onClickTypeaheadToggleButton();\n                    } }, ((variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti) && {\n                    tabIndex: -1\n                }), { disabled: isDisabled }),\n                    React.createElement(CaretDownIcon, { className: css(styles.selectToggleArrow) }))))));\n    }\n}\nSelectToggle.displayName = 'SelectToggle';\nSelectToggle.defaultProps = {\n    className: '',\n    isOpen: false,\n    isActive: false,\n    isPlain: false,\n    isDisabled: false,\n    hasClearButton: false,\n    variant: 'single',\n    'aria-labelledby': '',\n    'aria-label': '',\n    type: 'button',\n    onToggle: () => { },\n    onEnter: () => { },\n    onClose: () => { },\n    onClickTypeaheadToggleButton: () => { }\n};\n//# sourceMappingURL=SelectToggle.js.map"]},"metadata":{},"sourceType":"module"}