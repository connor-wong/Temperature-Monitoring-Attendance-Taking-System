{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FileUpload/file-upload';\nimport { css } from '@patternfly/react-styles';\nimport { InputGroup } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { Button, ButtonVariant } from '../Button';\nimport { TextArea, TextAreResizeOrientation } from '../TextArea';\nimport { Spinner, spinnerSize } from '../Spinner';\nimport { fileReaderType } from '../../helpers/fileUtils';\nexport const FileUploadField = _a => {\n  var {\n    id,\n    type,\n    value = '',\n    filename = '',\n    onChange = () => {},\n    onBrowseButtonClick = () => {},\n    onClearButtonClick = () => {},\n    className = '',\n    isDisabled = false,\n    isReadOnly = false,\n    isLoading = false,\n    spinnerAriaValueText,\n    isRequired = false,\n    isDragActive = false,\n    validated = 'default',\n    'aria-label': ariaLabel = 'File upload',\n    filenamePlaceholder = 'Drag a file here or browse to upload',\n    filenameAriaLabel = filename ? 'Read only filename' : filenamePlaceholder,\n    browseButtonText = 'Browse...',\n    clearButtonText = 'Clear',\n    isClearButtonDisabled = !filename && !value,\n    containerRef = null,\n    allowEditingUploadedText = false,\n    hideDefaultPreview = false,\n    children = null\n  } = _a,\n      props = __rest(_a, [\"id\", \"type\", \"value\", \"filename\", \"onChange\", \"onBrowseButtonClick\", \"onClearButtonClick\", \"className\", \"isDisabled\", \"isReadOnly\", \"isLoading\", \"spinnerAriaValueText\", \"isRequired\", \"isDragActive\", \"validated\", 'aria-label', \"filenamePlaceholder\", \"filenameAriaLabel\", \"browseButtonText\", \"clearButtonText\", \"isClearButtonDisabled\", \"containerRef\", \"allowEditingUploadedText\", \"hideDefaultPreview\", \"children\"]);\n\n  const onTextAreaChange = (newValue, event) => {\n    onChange(newValue, filename, event);\n  };\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.fileUpload, isDragActive && styles.modifiers.dragHover, isLoading && styles.modifiers.loading, className),\n    ref: containerRef\n  }, props), React.createElement(\"div\", {\n    className: styles.fileUploadFileSelect\n  }, React.createElement(InputGroup, null, React.createElement(TextInput, {\n    isReadOnly // Always read-only regardless of isReadOnly prop (which is just for the TextArea)\n    : true,\n    isDisabled: isDisabled,\n    id: `${id}-filename`,\n    name: `${id}-filename`,\n    \"aria-label\": filenameAriaLabel,\n    placeholder: filenamePlaceholder,\n    \"aria-describedby\": `${id}-browse-button`,\n    value: filename\n  }), React.createElement(Button, {\n    id: `${id}-browse-button`,\n    variant: ButtonVariant.control,\n    onClick: onBrowseButtonClick,\n    isDisabled: isDisabled\n  }, browseButtonText), React.createElement(Button, {\n    variant: ButtonVariant.control,\n    isDisabled: isDisabled || isClearButtonDisabled,\n    onClick: onClearButtonClick\n  }, clearButtonText))), React.createElement(\"div\", {\n    className: styles.fileUploadFileDetails\n  }, !hideDefaultPreview && type === fileReaderType.text && React.createElement(TextArea, {\n    readOnly: isReadOnly || !!filename && !allowEditingUploadedText,\n    disabled: isDisabled,\n    isRequired: isRequired,\n    resizeOrientation: TextAreResizeOrientation.vertical,\n    validated: validated,\n    id: id,\n    name: id,\n    \"aria-label\": ariaLabel,\n    value: value,\n    onChange: onTextAreaChange\n  }), isLoading && React.createElement(\"div\", {\n    className: styles.fileUploadFileDetailsSpinner\n  }, React.createElement(Spinner, {\n    size: spinnerSize.lg,\n    \"aria-valuetext\": spinnerAriaValueText\n  }))), children);\n};\nFileUploadField.displayName = 'FileUploadField';","map":{"version":3,"sources":["../../../../src/components/FileUpload/FileUploadField.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FileUpload/file-upload';\nimport { css } from '@patternfly/react-styles';\nimport { InputGroup } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { Button, ButtonVariant } from '../Button';\nimport { TextArea, TextAreResizeOrientation } from '../TextArea';\nimport { Spinner, spinnerSize } from '../Spinner';\nimport { fileReaderType } from '../../helpers/fileUtils';\nexport const FileUploadField = (_a) => {\n    var { id, type, value = '', filename = '', onChange = () => { }, onBrowseButtonClick = () => { }, onClearButtonClick = () => { }, className = '', isDisabled = false, isReadOnly = false, isLoading = false, spinnerAriaValueText, isRequired = false, isDragActive = false, validated = 'default', 'aria-label': ariaLabel = 'File upload', filenamePlaceholder = 'Drag a file here or browse to upload', filenameAriaLabel = filename ? 'Read only filename' : filenamePlaceholder, browseButtonText = 'Browse...', clearButtonText = 'Clear', isClearButtonDisabled = !filename && !value, containerRef = null, allowEditingUploadedText = false, hideDefaultPreview = false, children = null } = _a, props = __rest(_a, [\"id\", \"type\", \"value\", \"filename\", \"onChange\", \"onBrowseButtonClick\", \"onClearButtonClick\", \"className\", \"isDisabled\", \"isReadOnly\", \"isLoading\", \"spinnerAriaValueText\", \"isRequired\", \"isDragActive\", \"validated\", 'aria-label', \"filenamePlaceholder\", \"filenameAriaLabel\", \"browseButtonText\", \"clearButtonText\", \"isClearButtonDisabled\", \"containerRef\", \"allowEditingUploadedText\", \"hideDefaultPreview\", \"children\"]);\n    const onTextAreaChange = (newValue, event) => {\n        onChange(newValue, filename, event);\n    };\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.fileUpload, isDragActive && styles.modifiers.dragHover, isLoading && styles.modifiers.loading, className), ref: containerRef }, props),\n        React.createElement(\"div\", { className: styles.fileUploadFileSelect },\n            React.createElement(InputGroup, null,\n                React.createElement(TextInput, { isReadOnly // Always read-only regardless of isReadOnly prop (which is just for the TextArea)\n                    : true, isDisabled: isDisabled, id: `${id}-filename`, name: `${id}-filename`, \"aria-label\": filenameAriaLabel, placeholder: filenamePlaceholder, \"aria-describedby\": `${id}-browse-button`, value: filename }),\n                React.createElement(Button, { id: `${id}-browse-button`, variant: ButtonVariant.control, onClick: onBrowseButtonClick, isDisabled: isDisabled }, browseButtonText),\n                React.createElement(Button, { variant: ButtonVariant.control, isDisabled: isDisabled || isClearButtonDisabled, onClick: onClearButtonClick }, clearButtonText))),\n        React.createElement(\"div\", { className: styles.fileUploadFileDetails },\n            !hideDefaultPreview && type === fileReaderType.text && (React.createElement(TextArea, { readOnly: isReadOnly || (!!filename && !allowEditingUploadedText), disabled: isDisabled, isRequired: isRequired, resizeOrientation: TextAreResizeOrientation.vertical, validated: validated, id: id, name: id, \"aria-label\": ariaLabel, value: value, onChange: onTextAreaChange })),\n            isLoading && (React.createElement(\"div\", { className: styles.fileUploadFileDetailsSpinner },\n                React.createElement(Spinner, { size: spinnerSize.lg, \"aria-valuetext\": spinnerAriaValueText })))),\n        children));\n};\nFileUploadField.displayName = 'FileUploadField';\n//# sourceMappingURL=FileUploadField.js.map"]},"metadata":{},"sourceType":"module"}