{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport AngleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-right-icon\";\nimport CaretDownIcon from \"@patternfly/react-icons/dist/esm/icons/caret-down-icon\";\nimport { WizardBody } from './WizardBody';\nexport const WizardToggle = ({\n  isNavOpen,\n  onNavToggle,\n  nav,\n  steps,\n  activeStep,\n  children,\n  hasNoBodyPadding = false,\n  'aria-label': ariaLabel = 'Wizard Toggle',\n  mainAriaLabelledBy = null,\n  mainAriaLabel = null,\n  isInPage = true\n}) => {\n  let activeStepIndex;\n  let activeStepName;\n  let activeStepSubName;\n\n  for (let i = 0; i < steps.length; i++) {\n    if (activeStep.id && steps[i].id === activeStep.id || steps[i].name === activeStep.name) {\n      activeStepIndex = i + 1;\n      activeStepName = steps[i].name;\n      break;\n    } else if (steps[i].steps) {\n      for (const step of steps[i].steps) {\n        if (activeStep.id && step.id === activeStep.id || step.name === activeStep.name) {\n          activeStepIndex = i + 1;\n          activeStepName = steps[i].name;\n          activeStepSubName = step.name;\n          break;\n        }\n      }\n    }\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n    onClick: () => onNavToggle(!isNavOpen),\n    className: css(styles.wizardToggle, isNavOpen && 'pf-m-expanded'),\n    \"aria-label\": ariaLabel,\n    \"aria-expanded\": isNavOpen\n  }, React.createElement(\"ol\", {\n    className: css(styles.wizardToggleList)\n  }, React.createElement(\"li\", {\n    className: css(styles.wizardToggleListItem)\n  }, React.createElement(\"span\", {\n    className: css(styles.wizardToggleNum)\n  }, activeStepIndex), \" \", activeStepName, activeStepSubName && React.createElement(AngleRightIcon, {\n    className: css(styles.wizardToggleSeparator),\n    \"aria-hidden\": \"true\"\n  })), activeStepSubName && React.createElement(\"li\", {\n    className: css(styles.wizardToggleListItem)\n  }, activeStepSubName)), React.createElement(\"span\", {\n    className: css(styles.wizardToggleIcon)\n  }, React.createElement(CaretDownIcon, {\n    \"aria-hidden\": \"true\"\n  }))), React.createElement(\"div\", {\n    className: css(styles.wizardOuterWrap)\n  }, React.createElement(\"div\", {\n    className: css(styles.wizardInnerWrap)\n  }, nav(isNavOpen), React.createElement(WizardBody, {\n    mainComponent: isInPage ? 'div' : 'main',\n    \"aria-label\": mainAriaLabel,\n    \"aria-labelledby\": mainAriaLabelledBy,\n    hasNoBodyPadding: hasNoBodyPadding\n  }, activeStep.component)), children));\n};\nWizardToggle.displayName = 'WizardToggle';","map":{"version":3,"sources":["../../../../src/components/Wizard/WizardToggle.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,uDAAnB;AACA,OAAO,cAAP,MAAqB,yDAArB;AACA,OAAO,aAAP,MAAoB,wDAApB;AAEA,SAAS,UAAT,QAA2B,cAA3B;AA2BA,OAAO,MAAM,YAAY,GAA+C,CAAC;AACvE,EAAA,SADuE;AAEvE,EAAA,WAFuE;AAGvE,EAAA,GAHuE;AAIvE,EAAA,KAJuE;AAKvE,EAAA,UALuE;AAMvE,EAAA,QANuE;AAOvE,EAAA,gBAAgB,GAAG,KAPoD;AAQvE,gBAAc,SAAS,GAAG,eAR6C;AASvE,EAAA,kBAAkB,GAAG,IATkD;AAUvE,EAAA,aAAa,GAAG,IAVuD;AAWvE,EAAA,QAAQ,GAAG;AAX4D,CAAD,KAYhD;AACtB,MAAI,eAAJ;AACA,MAAI,cAAJ;AACA,MAAI,iBAAJ;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,QAAK,UAAU,CAAC,EAAX,IAAiB,KAAK,CAAC,CAAD,CAAL,CAAS,EAAT,KAAgB,UAAU,CAAC,EAA7C,IAAoD,KAAK,CAAC,CAAD,CAAL,CAAS,IAAT,KAAkB,UAAU,CAAC,IAArF,EAA2F;AACzF,MAAA,eAAe,GAAG,CAAC,GAAG,CAAtB;AACA,MAAA,cAAc,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,IAA1B;AACA;AACD,KAJD,MAIO,IAAI,KAAK,CAAC,CAAD,CAAL,CAAS,KAAb,EAAoB;AACzB,WAAK,MAAM,IAAX,IAAmB,KAAK,CAAC,CAAD,CAAL,CAAS,KAA5B,EAAmC;AACjC,YAAK,UAAU,CAAC,EAAX,IAAiB,IAAI,CAAC,EAAL,KAAY,UAAU,CAAC,EAAzC,IAAgD,IAAI,CAAC,IAAL,KAAc,UAAU,CAAC,IAA7E,EAAmF;AACjF,UAAA,eAAe,GAAG,CAAC,GAAG,CAAtB;AACA,UAAA,cAAc,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,IAA1B;AACA,UAAA,iBAAiB,GAAG,IAAI,CAAC,IAAzB;AACA;AACD;AACF;AACF;AACF;;AAED,SACE,KAAA,CAAA,aAAA,CAAC,KAAK,CAAC,QAAP,EAAe,IAAf,EACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AACE,IAAA,OAAO,EAAE,MAAM,WAAW,CAAC,CAAC,SAAF,CAD5B;AAEE,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,YAAR,EAAsB,SAAS,IAAI,eAAnC,CAFhB;AAEmE,kBACrD,SAHd;AAGuB,qBACN;AAJjB,GAAA,EAME,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAI,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,gBAAR;AAAlB,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAI,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,oBAAR;AAAlB,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,eAAR;AAApB,GAAA,EAA+C,eAA/C,CADF,E,GAAA,EAC0E,cAD1E,EAEG,iBAAiB,IAAI,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe;AAAC,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,qBAAR,CAAf;AAA6C,mBAAc;AAA3D,GAAf,CAFxB,CADF,EAKG,iBAAiB,IAAI,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAI,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,oBAAR;AAAlB,GAAA,EAAkD,iBAAlD,CALxB,CANF,EAaE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,gBAAR;AAApB,GAAA,EACE,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc;AAAA,mBAAa;AAAb,GAAd,CADF,CAbF,CADF,EAkBE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,eAAR;AAAnB,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,eAAR;AAAnB,GAAA,EACG,GAAG,CAAC,SAAD,CADN,EAEE,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AACT,IAAA,aAAa,EAAE,QAAQ,GAAG,KAAH,GAAW,MADzB;AAC+B,kBAC5B,aAFH;AAEgB,uBACR,kBAHR;AAIT,IAAA,gBAAgB,EAAE;AAJT,GAAX,EAMG,UAAU,CAAC,SANd,CAFF,CADF,EAYG,QAZH,CAlBF,CADF;AAmCD,CApEM;AAqEP,YAAY,CAAC,WAAb,GAA2B,cAA3B","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport AngleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-right-icon\";\nimport CaretDownIcon from \"@patternfly/react-icons/dist/esm/icons/caret-down-icon\";\nimport { WizardBody } from './WizardBody';\nexport const WizardToggle = ({ isNavOpen, onNavToggle, nav, steps, activeStep, children, hasNoBodyPadding = false, 'aria-label': ariaLabel = 'Wizard Toggle', mainAriaLabelledBy = null, mainAriaLabel = null, isInPage = true }) => {\n    let activeStepIndex;\n    let activeStepName;\n    let activeStepSubName;\n    for (let i = 0; i < steps.length; i++) {\n        if ((activeStep.id && steps[i].id === activeStep.id) || steps[i].name === activeStep.name) {\n            activeStepIndex = i + 1;\n            activeStepName = steps[i].name;\n            break;\n        }\n        else if (steps[i].steps) {\n            for (const step of steps[i].steps) {\n                if ((activeStep.id && step.id === activeStep.id) || step.name === activeStep.name) {\n                    activeStepIndex = i + 1;\n                    activeStepName = steps[i].name;\n                    activeStepSubName = step.name;\n                    break;\n                }\n            }\n        }\n    }\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"button\", { onClick: () => onNavToggle(!isNavOpen), className: css(styles.wizardToggle, isNavOpen && 'pf-m-expanded'), \"aria-label\": ariaLabel, \"aria-expanded\": isNavOpen },\n            React.createElement(\"ol\", { className: css(styles.wizardToggleList) },\n                React.createElement(\"li\", { className: css(styles.wizardToggleListItem) },\n                    React.createElement(\"span\", { className: css(styles.wizardToggleNum) }, activeStepIndex),\n                    \" \",\n                    activeStepName,\n                    activeStepSubName && React.createElement(AngleRightIcon, { className: css(styles.wizardToggleSeparator), \"aria-hidden\": \"true\" })),\n                activeStepSubName && React.createElement(\"li\", { className: css(styles.wizardToggleListItem) }, activeStepSubName)),\n            React.createElement(\"span\", { className: css(styles.wizardToggleIcon) },\n                React.createElement(CaretDownIcon, { \"aria-hidden\": \"true\" }))),\n        React.createElement(\"div\", { className: css(styles.wizardOuterWrap) },\n            React.createElement(\"div\", { className: css(styles.wizardInnerWrap) },\n                nav(isNavOpen),\n                React.createElement(WizardBody, { mainComponent: isInPage ? 'div' : 'main', \"aria-label\": mainAriaLabel, \"aria-labelledby\": mainAriaLabelledBy, hasNoBodyPadding: hasNoBodyPadding }, activeStep.component)),\n            children)));\n};\nWizardToggle.displayName = 'WizardToggle';\n//# sourceMappingURL=WizardToggle.js.map"]},"metadata":{},"sourceType":"module"}