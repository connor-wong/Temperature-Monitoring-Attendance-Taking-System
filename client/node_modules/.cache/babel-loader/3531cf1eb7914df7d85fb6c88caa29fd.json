{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { DualListSelectorTreeItem } from './DualListSelectorTreeItem';\nexport const DualListSelectorTree = _a => {\n  var {\n    data,\n    isChosen,\n    hasBadges = false,\n    isNested = false,\n    defaultAllExpanded = false,\n    parentItem,\n    onOptionSelect,\n    onOptionCheck,\n    selectedOptions = []\n  } = _a,\n      props = __rest(_a, [\"data\", \"isChosen\", \"hasBadges\", \"isNested\", \"defaultAllExpanded\", \"parentItem\", \"onOptionSelect\", \"onOptionCheck\", \"selectedOptions\"]);\n\n  return React.createElement(\"ul\", Object.assign({\n    className: css(styles.dualListSelectorList),\n    role: isNested ? 'group' : 'tree'\n  }, props), data.map(item => React.createElement(DualListSelectorTreeItem, Object.assign({\n    key: item.id,\n    text: item.text,\n    id: item.id,\n    isChosen: isChosen,\n    isSelected: selectedOptions.includes(item.id),\n    defaultExpanded: item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded,\n    onOptionSelect: onOptionSelect,\n    onOptionCheck: onOptionCheck,\n    isChecked: item.isChecked,\n    checkProps: item.checkProps,\n    hasBadge: item.hasBadge !== undefined ? item.hasBadge : hasBadges,\n    badgeProps: item.badgeProps,\n    parentItem: parentItem,\n    itemData: item\n  }, item.children && {\n    children: React.createElement(DualListSelectorTree, {\n      isNested: true,\n      data: item.children,\n      parentItem: item,\n      hasBadges: hasBadges,\n      isChosen: isChosen,\n      defaultAllExpanded: defaultAllExpanded,\n      onOptionSelect: onOptionSelect,\n      onOptionCheck: onOptionCheck,\n      selectedOptions: selectedOptions\n    })\n  }))));\n};\nDualListSelectorTree.displayName = 'DualListSelectorTree';","map":{"version":3,"sources":["../../../../src/components/DualListSelector/DualListSelectorTree.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,6EAAnB;AACA,SAAS,wBAAT,QAAyC,4BAAzC;AAgFA,OAAO,MAAM,oBAAoB,GAAwD,EAAD,IAWxD;MAXyD;AACvF,IAAA,IADuF;AAEvF,IAAA,QAFuF;AAGvF,IAAA,SAAS,GAAG,KAH2E;AAIvF,IAAA,QAAQ,GAAG,KAJ4E;AAKvF,IAAA,kBAAkB,GAAG,KALkE;AAMvF,IAAA,UANuF;AAOvF,IAAA,cAPuF;AAQvF,IAAA,aARuF;AASvF,IAAA,eAAe,GAAG;AATqE,MASnE,E;MACjB,KAAK,GAAA,MAAA,CAAA,EAAA,EAV+E,CAAA,MAAA,EAAA,UAAA,EAAA,WAAA,EAAA,UAAA,EAAA,oBAAA,EAAA,YAAA,EAAA,gBAAA,EAAA,eAAA,EAAA,iBAAA,CAU/E,C;;AACuB,SAC/B,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AAAI,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,oBAAR,CAAlB;AAAiD,IAAA,IAAI,EAAE,QAAQ,GAAG,OAAH,GAAa;AAA5E,GAAA,EAAwF,KAAxF,CAAA,EACG,IAAI,CAAC,GAAL,CAAS,IAAI,IACZ,KAAA,CAAA,aAAA,CAAC,wBAAD,EAAyB,MAAA,CAAA,MAAA,CAAA;AACvB,IAAA,GAAG,EAAE,IAAI,CAAC,EADa;AAEvB,IAAA,IAAI,EAAE,IAAI,CAAC,IAFY;AAGvB,IAAA,EAAE,EAAE,IAAI,CAAC,EAHc;AAIvB,IAAA,QAAQ,EAAE,QAJa;AAKvB,IAAA,UAAU,EAAE,eAAe,CAAC,QAAhB,CAAyB,IAAI,CAAC,EAA9B,CALW;AAMvB,IAAA,eAAe,EAAE,IAAI,CAAC,eAAL,KAAyB,SAAzB,GAAqC,IAAI,CAAC,eAA1C,GAA4D,kBANtD;AAOvB,IAAA,cAAc,EAAE,cAPO;AAQvB,IAAA,aAAa,EAAE,aARQ;AASvB,IAAA,SAAS,EAAE,IAAI,CAAC,SATO;AAUvB,IAAA,UAAU,EAAE,IAAI,CAAC,UAVM;AAWvB,IAAA,QAAQ,EAAE,IAAI,CAAC,QAAL,KAAkB,SAAlB,GAA8B,IAAI,CAAC,QAAnC,GAA8C,SAXjC;AAYvB,IAAA,UAAU,EAAE,IAAI,CAAC,UAZM;AAavB,IAAA,UAAU,EAAE,UAbW;AAcvB,IAAA,QAAQ,EAAE;AAda,GAAA,EAelB,IAAI,CAAC,QAAL,IAAiB;AACpB,IAAA,QAAQ,EACN,KAAA,CAAA,aAAA,CAAC,oBAAD,EAAqB;AACnB,MAAA,QAAQ,EAAA,IADW;AAEnB,MAAA,IAAI,EAAE,IAAI,CAAC,QAFQ;AAGnB,MAAA,UAAU,EAAE,IAHO;AAInB,MAAA,SAAS,EAAE,SAJQ;AAKnB,MAAA,QAAQ,EAAE,QALS;AAMnB,MAAA,kBAAkB,EAAE,kBAND;AAOnB,MAAA,cAAc,EAAE,cAPG;AAQnB,MAAA,aAAa,EAAE,aARI;AASnB,MAAA,eAAe,EAAE;AATE,KAArB;AAFkB,GAfC,CAAzB,CADD,CADH,CAD+B;AAoChC,CA/CM;AAiDP,oBAAoB,CAAC,WAArB,GAAmC,sBAAnC","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { DualListSelectorTreeItem } from './DualListSelectorTreeItem';\nexport const DualListSelectorTree = (_a) => {\n    var { data, isChosen, hasBadges = false, isNested = false, defaultAllExpanded = false, parentItem, onOptionSelect, onOptionCheck, selectedOptions = [] } = _a, props = __rest(_a, [\"data\", \"isChosen\", \"hasBadges\", \"isNested\", \"defaultAllExpanded\", \"parentItem\", \"onOptionSelect\", \"onOptionCheck\", \"selectedOptions\"]);\n    return (React.createElement(\"ul\", Object.assign({ className: css(styles.dualListSelectorList), role: isNested ? 'group' : 'tree' }, props), data.map(item => (React.createElement(DualListSelectorTreeItem, Object.assign({ key: item.id, text: item.text, id: item.id, isChosen: isChosen, isSelected: selectedOptions.includes(item.id), defaultExpanded: item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded, onOptionSelect: onOptionSelect, onOptionCheck: onOptionCheck, isChecked: item.isChecked, checkProps: item.checkProps, hasBadge: item.hasBadge !== undefined ? item.hasBadge : hasBadges, badgeProps: item.badgeProps, parentItem: parentItem, itemData: item }, (item.children && {\n        children: (React.createElement(DualListSelectorTree, { isNested: true, data: item.children, parentItem: item, hasBadges: hasBadges, isChosen: isChosen, defaultAllExpanded: defaultAllExpanded, onOptionSelect: onOptionSelect, onOptionCheck: onOptionCheck, selectedOptions: selectedOptions }))\n    })))))));\n};\nDualListSelectorTree.displayName = 'DualListSelectorTree';\n//# sourceMappingURL=DualListSelectorTree.js.map"]},"metadata":{},"sourceType":"module"}