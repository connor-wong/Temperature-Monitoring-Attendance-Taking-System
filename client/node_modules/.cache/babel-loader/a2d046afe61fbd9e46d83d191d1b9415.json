{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { DropdownContext } from './dropdownConstants';\nimport { KEYHANDLER_DIRECTION } from '../../helpers/constants';\nimport { preventedEvents } from '../../helpers/util';\nimport { Tooltip } from '../Tooltip';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nexport class InternalDropdownItem extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.ref = React.createRef();\n    this.additionalRef = React.createRef();\n\n    this.getInnerNode = node => node && node.childNodes && node.childNodes.length ? node.childNodes[0] : node;\n\n    this.onKeyDown = event => {\n      // Detected key press on this item, notify the menu parent so that the appropriate item can be focused\n      const innerIndex = event.target === this.ref.current ? 0 : 1;\n\n      if (!this.props.customChild) {\n        event.preventDefault();\n      }\n\n      if (event.key === 'ArrowUp') {\n        this.props.context.keyHandler(this.props.index, innerIndex, KEYHANDLER_DIRECTION.UP);\n      } else if (event.key === 'ArrowDown') {\n        this.props.context.keyHandler(this.props.index, innerIndex, KEYHANDLER_DIRECTION.DOWN);\n      } else if (event.key === 'ArrowRight') {\n        this.props.context.keyHandler(this.props.index, innerIndex, KEYHANDLER_DIRECTION.RIGHT);\n      } else if (event.key === 'ArrowLeft') {\n        this.props.context.keyHandler(this.props.index, innerIndex, KEYHANDLER_DIRECTION.LEFT);\n      } else if (event.key === 'Enter' || event.key === ' ') {\n        event.target.click();\n        this.props.enterTriggersArrowDown && this.props.context.keyHandler(this.props.index, innerIndex, KEYHANDLER_DIRECTION.DOWN);\n      }\n    };\n\n    this.componentRef = element => {\n      this.ref.current = element;\n      const {\n        component\n      } = this.props;\n      const ref = component.ref;\n\n      if (ref) {\n        if (typeof ref === 'function') {\n          ref(element);\n        } else {\n          ref.current = element;\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    const {\n      context,\n      index,\n      isDisabled,\n      role,\n      customChild,\n      autoFocus\n    } = this.props;\n    const customRef = customChild ? this.getInnerNode(this.ref.current) : this.ref.current;\n    context.sendRef(index, [customRef, customChild ? customRef : this.additionalRef.current], isDisabled, role === 'separator');\n    autoFocus && setTimeout(() => customRef.focus());\n  }\n\n  componentDidUpdate() {\n    const {\n      context,\n      index,\n      isDisabled,\n      role,\n      customChild\n    } = this.props;\n    const customRef = customChild ? this.getInnerNode(this.ref.current) : this.ref.current;\n    context.sendRef(index, [customRef, customChild ? customRef : this.additionalRef.current], isDisabled, role === 'separator');\n  }\n\n  extendAdditionalChildRef() {\n    const {\n      additionalChild\n    } = this.props;\n    return React.cloneElement(additionalChild, {\n      ref: this.additionalRef\n    });\n  }\n\n  render() {\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    const _a = this.props,\n          {\n      className,\n      children,\n      isHovered,\n      context,\n      onClick,\n      component,\n      role,\n      isDisabled,\n      isPlainText,\n      index,\n      href,\n      tooltip,\n      tooltipProps,\n      id,\n      componentID,\n      listItemClassName,\n      additionalChild,\n      customChild,\n      enterTriggersArrowDown,\n      icon,\n      autoFocus,\n      styleChildren,\n      description,\n      inoperableEvents\n    } = _a,\n          additionalProps = __rest(_a, [\"className\", \"children\", \"isHovered\", \"context\", \"onClick\", \"component\", \"role\", \"isDisabled\", \"isPlainText\", \"index\", \"href\", \"tooltip\", \"tooltipProps\", \"id\", \"componentID\", \"listItemClassName\", \"additionalChild\", \"customChild\", \"enterTriggersArrowDown\", \"icon\", \"autoFocus\", \"styleChildren\", \"description\", \"inoperableEvents\"]);\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n\n\n    let classes = css(icon && styles.modifiers.icon, className);\n\n    if (component === 'a') {\n      additionalProps['aria-disabled'] = isDisabled;\n    } else if (component === 'button') {\n      additionalProps['aria-disabled'] = isDisabled;\n      additionalProps.type = additionalProps.type || 'button';\n    }\n\n    const renderWithTooltip = childNode => tooltip ? React.createElement(Tooltip, Object.assign({\n      content: tooltip\n    }, tooltipProps), childNode) : childNode;\n\n    const renderClonedComponent = element => React.cloneElement(element, Object.assign(Object.assign({}, styleChildren && {\n      className: css(element.props.className, classes)\n    }), {\n      ref: this.componentRef\n    }));\n\n    const renderDefaultComponent = tag => {\n      const Component = tag;\n      const componentContent = description ? React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: styles.dropdownMenuItemMain\n      }, icon && React.createElement(\"span\", {\n        className: css(styles.dropdownMenuItemIcon)\n      }, icon), children), React.createElement(\"div\", {\n        className: styles.dropdownMenuItemDescription\n      }, description)) : React.createElement(React.Fragment, null, icon && React.createElement(\"span\", {\n        className: css(styles.dropdownMenuItemIcon)\n      }, icon), children);\n      return React.createElement(Component, Object.assign({}, additionalProps, isDisabled ? preventedEvents(inoperableEvents) : null, {\n        href: href,\n        ref: this.ref,\n        className: classes,\n        id: componentID\n      }), componentContent);\n    };\n\n    return React.createElement(DropdownContext.Consumer, null, ({\n      onSelect,\n      itemClass,\n      disabledClass,\n      plainTextClass\n    }) => {\n      if (this.props.role !== 'separator') {\n        classes = css(classes, isDisabled && disabledClass, isPlainText && plainTextClass, itemClass, description && styles.modifiers.description);\n      }\n\n      if (customChild) {\n        return React.cloneElement(customChild, {\n          ref: this.ref,\n          onKeyDown: this.onKeyDown\n        });\n      }\n\n      return React.createElement(\"li\", {\n        className: listItemClassName || null,\n        role: role,\n        onKeyDown: this.onKeyDown,\n        onClick: event => {\n          if (!isDisabled) {\n            onClick(event);\n            onSelect(event);\n          }\n        },\n        id: id\n      }, renderWithTooltip(React.isValidElement(component) ? renderClonedComponent(component) : renderDefaultComponent(component)), additionalChild && this.extendAdditionalChildRef());\n    });\n  }\n\n}\nInternalDropdownItem.displayName = 'InternalDropdownItem';\nInternalDropdownItem.defaultProps = {\n  className: '',\n  isHovered: false,\n  component: 'a',\n  role: 'none',\n  isDisabled: false,\n  isPlainText: false,\n  tooltipProps: {},\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onClick: event => undefined,\n  index: -1,\n  context: {\n    keyHandler: () => {},\n    sendRef: () => {}\n  },\n  enterTriggersArrowDown: false,\n  icon: null,\n  styleChildren: true,\n  description: null,\n  inoperableEvents: ['onClick', 'onKeyPress']\n};","map":{"version":3,"sources":["../../../../src/components/Dropdown/InternalDropdownItem.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { DropdownContext } from './dropdownConstants';\nimport { KEYHANDLER_DIRECTION } from '../../helpers/constants';\nimport { preventedEvents } from '../../helpers/util';\nimport { Tooltip } from '../Tooltip';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nexport class InternalDropdownItem extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.ref = React.createRef();\n        this.additionalRef = React.createRef();\n        this.getInnerNode = (node) => (node && node.childNodes && node.childNodes.length ? node.childNodes[0] : node);\n        this.onKeyDown = (event) => {\n            // Detected key press on this item, notify the menu parent so that the appropriate item can be focused\n            const innerIndex = event.target === this.ref.current ? 0 : 1;\n            if (!this.props.customChild) {\n                event.preventDefault();\n            }\n            if (event.key === 'ArrowUp') {\n                this.props.context.keyHandler(this.props.index, innerIndex, KEYHANDLER_DIRECTION.UP);\n            }\n            else if (event.key === 'ArrowDown') {\n                this.props.context.keyHandler(this.props.index, innerIndex, KEYHANDLER_DIRECTION.DOWN);\n            }\n            else if (event.key === 'ArrowRight') {\n                this.props.context.keyHandler(this.props.index, innerIndex, KEYHANDLER_DIRECTION.RIGHT);\n            }\n            else if (event.key === 'ArrowLeft') {\n                this.props.context.keyHandler(this.props.index, innerIndex, KEYHANDLER_DIRECTION.LEFT);\n            }\n            else if (event.key === 'Enter' || event.key === ' ') {\n                event.target.click();\n                this.props.enterTriggersArrowDown &&\n                    this.props.context.keyHandler(this.props.index, innerIndex, KEYHANDLER_DIRECTION.DOWN);\n            }\n        };\n        this.componentRef = (element) => {\n            this.ref.current = element;\n            const { component } = this.props;\n            const ref = component.ref;\n            if (ref) {\n                if (typeof ref === 'function') {\n                    ref(element);\n                }\n                else {\n                    ref.current = element;\n                }\n            }\n        };\n    }\n    componentDidMount() {\n        const { context, index, isDisabled, role, customChild, autoFocus } = this.props;\n        const customRef = customChild ? this.getInnerNode(this.ref.current) : this.ref.current;\n        context.sendRef(index, [customRef, customChild ? customRef : this.additionalRef.current], isDisabled, role === 'separator');\n        autoFocus && setTimeout(() => customRef.focus());\n    }\n    componentDidUpdate() {\n        const { context, index, isDisabled, role, customChild } = this.props;\n        const customRef = customChild ? this.getInnerNode(this.ref.current) : this.ref.current;\n        context.sendRef(index, [customRef, customChild ? customRef : this.additionalRef.current], isDisabled, role === 'separator');\n    }\n    extendAdditionalChildRef() {\n        const { additionalChild } = this.props;\n        return React.cloneElement(additionalChild, {\n            ref: this.additionalRef\n        });\n    }\n    render() {\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        const _a = this.props, { className, children, isHovered, context, onClick, component, role, isDisabled, isPlainText, index, href, tooltip, tooltipProps, id, componentID, listItemClassName, additionalChild, customChild, enterTriggersArrowDown, icon, autoFocus, styleChildren, description, inoperableEvents } = _a, additionalProps = __rest(_a, [\"className\", \"children\", \"isHovered\", \"context\", \"onClick\", \"component\", \"role\", \"isDisabled\", \"isPlainText\", \"index\", \"href\", \"tooltip\", \"tooltipProps\", \"id\", \"componentID\", \"listItemClassName\", \"additionalChild\", \"customChild\", \"enterTriggersArrowDown\", \"icon\", \"autoFocus\", \"styleChildren\", \"description\", \"inoperableEvents\"]);\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        let classes = css(icon && styles.modifiers.icon, className);\n        if (component === 'a') {\n            additionalProps['aria-disabled'] = isDisabled;\n        }\n        else if (component === 'button') {\n            additionalProps['aria-disabled'] = isDisabled;\n            additionalProps.type = additionalProps.type || 'button';\n        }\n        const renderWithTooltip = (childNode) => tooltip ? (React.createElement(Tooltip, Object.assign({ content: tooltip }, tooltipProps), childNode)) : (childNode);\n        const renderClonedComponent = (element) => React.cloneElement(element, Object.assign(Object.assign({}, (styleChildren && {\n            className: css(element.props.className, classes)\n        })), { ref: this.componentRef }));\n        const renderDefaultComponent = (tag) => {\n            const Component = tag;\n            const componentContent = description ? (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { className: styles.dropdownMenuItemMain },\n                    icon && React.createElement(\"span\", { className: css(styles.dropdownMenuItemIcon) }, icon),\n                    children),\n                React.createElement(\"div\", { className: styles.dropdownMenuItemDescription }, description))) : (React.createElement(React.Fragment, null,\n                icon && React.createElement(\"span\", { className: css(styles.dropdownMenuItemIcon) }, icon),\n                children));\n            return (React.createElement(Component, Object.assign({}, additionalProps, (isDisabled ? preventedEvents(inoperableEvents) : null), { href: href, ref: this.ref, className: classes, id: componentID }), componentContent));\n        };\n        return (React.createElement(DropdownContext.Consumer, null, ({ onSelect, itemClass, disabledClass, plainTextClass }) => {\n            if (this.props.role !== 'separator') {\n                classes = css(classes, isDisabled && disabledClass, isPlainText && plainTextClass, itemClass, description && styles.modifiers.description);\n            }\n            if (customChild) {\n                return React.cloneElement(customChild, {\n                    ref: this.ref,\n                    onKeyDown: this.onKeyDown\n                });\n            }\n            return (React.createElement(\"li\", { className: listItemClassName || null, role: role, onKeyDown: this.onKeyDown, onClick: (event) => {\n                    if (!isDisabled) {\n                        onClick(event);\n                        onSelect(event);\n                    }\n                }, id: id },\n                renderWithTooltip(React.isValidElement(component)\n                    ? renderClonedComponent(component)\n                    : renderDefaultComponent(component)),\n                additionalChild && this.extendAdditionalChildRef()));\n        }));\n    }\n}\nInternalDropdownItem.displayName = 'InternalDropdownItem';\nInternalDropdownItem.defaultProps = {\n    className: '',\n    isHovered: false,\n    component: 'a',\n    role: 'none',\n    isDisabled: false,\n    isPlainText: false,\n    tooltipProps: {},\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick: (event) => undefined,\n    index: -1,\n    context: {\n        keyHandler: () => { },\n        sendRef: () => { }\n    },\n    enterTriggersArrowDown: false,\n    icon: null,\n    styleChildren: true,\n    description: null,\n    inoperableEvents: ['onClick', 'onKeyPress']\n};\n//# sourceMappingURL=InternalDropdownItem.js.map"]},"metadata":{},"sourceType":"module"}