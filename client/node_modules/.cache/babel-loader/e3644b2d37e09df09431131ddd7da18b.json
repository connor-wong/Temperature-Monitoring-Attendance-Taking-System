{"ast":null,"code":"import getVariation from './getVariation';\nimport { variationPlacements, basePlacements, placements as allPlacements } from '../enums';\nimport detectOverflow from './detectOverflow';\nimport getBasePlacement from './getBasePlacement';\n/* :: type OverflowsMap = { [ComputedPlacement]: number }; */\n\n/* ;; type OverflowsMap = { [key in ComputedPlacement]: number }; */\n\n/**\n * @param state\n * @param options\n */\n\nexport default function computeAutoPlacement(state, options = {}) {\n  const {\n    placement,\n    boundary,\n    rootBoundary,\n    padding,\n    flipVariations,\n    allowedAutoPlacements = allPlacements\n  } = options;\n  const variation = getVariation(placement);\n  const placements = variation ? flipVariations ? variationPlacements : variationPlacements.filter(placement => getVariation(placement) === variation) : basePlacements; // $FlowFixMe\n\n  let allowedPlacements = placements.filter(placement => allowedAutoPlacements.indexOf(placement) >= 0);\n\n  if (allowedPlacements.length === 0) {\n    allowedPlacements = placements;\n\n    if (false\n    /* __DEV__*/\n    ) {\n        console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, \"auto\" cannot be used to allow \"bottom-start\".', 'Use \"auto-start\" instead.'].join(' '));\n      }\n  } // $FlowFixMe: Flow seems to have problems with two array unions...\n\n\n  const overflows = allowedPlacements.reduce((acc, placement) => {\n    acc[placement] = detectOverflow(state, {\n      placement,\n      boundary,\n      rootBoundary,\n      padding\n    })[getBasePlacement(placement)];\n    return acc;\n  }, {});\n  return Object.keys(overflows).sort((a, b) => overflows[a] - overflows[b]);\n}","map":{"version":3,"sources":["../../../../../../../src/helpers/Popper/thirdparty/popper-core/utils/computeAutoPlacement.ts"],"names":[],"mappings":"AAGA,OAAO,YAAP,MAAyB,gBAAzB;AACA,SAAS,mBAAT,EAA8B,cAA9B,EAA8C,UAAU,IAAI,aAA5D,QAAiF,UAAjF;AACA,OAAO,cAAP,MAA2B,kBAA3B;AACA,OAAO,gBAAP,MAA6B,oBAA7B;AAWA;;AAEA;;AAEA;;;AAGG;;AACH,eAAc,SAAU,oBAAV,CAA+B,KAA/B,EAAsD,OAAA,GAAmB,EAAzE,EAA2E;AACvF,QAAM;AAAE,IAAA,SAAF;AAAa,IAAA,QAAb;AAAuB,IAAA,YAAvB;AAAqC,IAAA,OAArC;AAA8C,IAAA,cAA9C;AAA8D,IAAA,qBAAqB,GAAG;AAAtF,MAAwG,OAA9G;AAEA,QAAM,SAAS,GAAG,YAAY,CAAC,SAAD,CAA9B;AAEA,QAAM,UAAU,GAAG,SAAS,GACxB,cAAc,GACZ,mBADY,GAEZ,mBAAmB,CAAC,MAApB,CAA2B,SAAS,IAAI,YAAY,CAAC,SAAD,CAAZ,KAA4B,SAApE,CAHsB,GAIxB,cAJJ,CALuF,CAWvF;;AACA,MAAI,iBAAiB,GAAG,UAAU,CAAC,MAAX,CAAkB,SAAS,IAAI,qBAAqB,CAAC,OAAtB,CAA8B,SAA9B,KAA4C,CAA3E,CAAxB;;AAEA,MAAI,iBAAiB,CAAC,MAAlB,KAA6B,CAAjC,EAAoC;AAClC,IAAA,iBAAiB,GAAG,UAApB;;AAEA,QAAI;AAAM;AAAV,MAAwB;AACtB,QAAA,OAAO,CAAC,KAAR,CACE,CACE,8DADF,EAEE,iEAFF,EAGE,4BAHF,EAIE,6DAJF,EAKE,2BALF,EAME,IANF,CAMO,GANP,CADF;AASD;AACF,GA5BsF,CA8BvF;;;AACA,QAAM,SAAS,GAAiB,iBAAiB,CAAC,MAAlB,CAAyB,CAAC,GAAD,EAAM,SAAN,KAAmB;AAC1E,IAAA,GAAG,CAAC,SAAD,CAAH,GAAiB,cAAc,CAAC,KAAD,EAAQ;AACrC,MAAA,SADqC;AAErC,MAAA,QAFqC;AAGrC,MAAA,YAHqC;AAIrC,MAAA;AAJqC,KAAR,CAAd,CAKd,gBAAgB,CAAC,SAAD,CALF,CAAjB;AAOA,WAAO,GAAP;AACD,GAT+B,EAS7B,EAT6B,CAAhC;AAWA,SAAO,MAAM,CAAC,IAAP,CAAY,SAAZ,EAAuB,IAAvB,CAA4B,CAAC,CAAD,EAAI,CAAJ,KAAU,SAAS,CAAC,CAAD,CAAT,GAAe,SAAS,CAAC,CAAD,CAA9D,CAAP;AACD","sourceRoot":"","sourcesContent":["import getVariation from './getVariation';\nimport { variationPlacements, basePlacements, placements as allPlacements } from '../enums';\nimport detectOverflow from './detectOverflow';\nimport getBasePlacement from './getBasePlacement';\n/* :: type OverflowsMap = { [ComputedPlacement]: number }; */\n/* ;; type OverflowsMap = { [key in ComputedPlacement]: number }; */\n/**\n * @param state\n * @param options\n */\nexport default function computeAutoPlacement(state, options = {}) {\n    const { placement, boundary, rootBoundary, padding, flipVariations, allowedAutoPlacements = allPlacements } = options;\n    const variation = getVariation(placement);\n    const placements = variation\n        ? flipVariations\n            ? variationPlacements\n            : variationPlacements.filter(placement => getVariation(placement) === variation)\n        : basePlacements;\n    // $FlowFixMe\n    let allowedPlacements = placements.filter(placement => allowedAutoPlacements.indexOf(placement) >= 0);\n    if (allowedPlacements.length === 0) {\n        allowedPlacements = placements;\n        if (false /* __DEV__*/) {\n            console.error([\n                'Popper: The `allowedAutoPlacements` option did not allow any',\n                'placements. Ensure the `placement` option matches the variation',\n                'of the allowed placements.',\n                'For example, \"auto\" cannot be used to allow \"bottom-start\".',\n                'Use \"auto-start\" instead.'\n            ].join(' '));\n        }\n    }\n    // $FlowFixMe: Flow seems to have problems with two array unions...\n    const overflows = allowedPlacements.reduce((acc, placement) => {\n        acc[placement] = detectOverflow(state, {\n            placement,\n            boundary,\n            rootBoundary,\n            padding\n        })[getBasePlacement(placement)];\n        return acc;\n    }, {});\n    return Object.keys(overflows).sort((a, b) => overflows[a] - overflows[b]);\n}\n//# sourceMappingURL=computeAutoPlacement.js.map"]},"metadata":{},"sourceType":"module"}