{"ast":null,"code":"import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\nimport { DropdownItem, DropdownDirection, DropdownWithContext, DropdownContext } from '../Dropdown';\nimport CheckIcon from \"@patternfly/react-icons/dist/esm/icons/check-icon\";\nimport { OptionsToggle } from './OptionsToggle';\nexport class PaginationOptionsMenu extends React.Component {\n  constructor(props) {\n    super(props);\n    this.parentRef = React.createRef();\n\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n\n    this.onSelect = () => {\n      this.setState(prevState => ({\n        isOpen: !prevState.isOpen\n      }));\n    };\n\n    this.handleNewPerPage = (_evt, newPerPage) => {\n      const {\n        page,\n        onPerPageSelect,\n        itemCount,\n        defaultToFullPage\n      } = this.props;\n      let newPage = page;\n\n      while (Math.ceil(itemCount / newPerPage) < newPage) {\n        newPage--;\n      }\n\n      if (defaultToFullPage) {\n        if (itemCount / newPerPage !== newPage) {\n          while (newPage > 1 && itemCount - newPerPage * newPage < 0) {\n            newPage--;\n          }\n        }\n      }\n\n      const startIdx = (newPage - 1) * newPerPage;\n      const endIdx = newPage * newPerPage;\n      return onPerPageSelect(_evt, newPerPage, newPage, startIdx, endIdx);\n    };\n\n    this.renderItems = () => {\n      const {\n        perPageOptions,\n        perPage,\n        perPageSuffix\n      } = this.props;\n      return perPageOptions.map(({\n        value,\n        title\n      }) => React.createElement(DropdownItem, {\n        key: value,\n        component: \"button\",\n        \"data-action\": `per-page-${value}`,\n        className: css(perPage === value && 'pf-m-selected'),\n        onClick: event => this.handleNewPerPage(event, value)\n      }, title, ` ${perPageSuffix}`, perPage === value && React.createElement(\"div\", {\n        className: css(styles.optionsMenuMenuItemIcon)\n      }, React.createElement(CheckIcon, null))));\n    };\n\n    this.state = {\n      isOpen: false\n    };\n  }\n\n  render() {\n    const {\n      widgetId,\n      isDisabled,\n      itemsPerPageTitle,\n      dropDirection,\n      optionsToggle,\n      perPageOptions,\n      toggleTemplate,\n      firstIndex,\n      lastIndex,\n      itemCount,\n      itemsTitle\n    } = this.props;\n    const {\n      isOpen\n    } = this.state;\n    return React.createElement(DropdownContext.Provider, {\n      value: {\n        id: widgetId,\n        onSelect: this.onSelect,\n        toggleIndicatorClass: styles.optionsMenuToggleButtonIcon,\n        toggleTextClass: styles.optionsMenuToggleText,\n        menuClass: styles.optionsMenuMenu,\n        itemClass: styles.optionsMenuMenuItem,\n        toggleClass: ' ',\n        baseClass: styles.optionsMenu,\n        disabledClass: styles.modifiers.disabled,\n        menuComponent: 'ul',\n        baseComponent: 'div',\n        ouiaComponentType: PaginationOptionsMenu.displayName\n      }\n    }, React.createElement(DropdownWithContext, {\n      direction: dropDirection,\n      isOpen: isOpen,\n      toggle: React.createElement(OptionsToggle, {\n        optionsToggle: optionsToggle,\n        itemsPerPageTitle: itemsPerPageTitle,\n        showToggle: perPageOptions && perPageOptions.length > 0,\n        onToggle: this.onToggle,\n        isOpen: isOpen,\n        widgetId: widgetId,\n        firstIndex: firstIndex,\n        lastIndex: lastIndex,\n        itemCount: itemCount,\n        itemsTitle: itemsTitle,\n        toggleTemplate: toggleTemplate,\n        parentRef: this.parentRef.current,\n        isDisabled: isDisabled\n      }),\n      dropdownItems: this.renderItems(),\n      isPlain: true\n    }));\n  }\n\n}\nPaginationOptionsMenu.displayName = 'PaginationOptionsMenu';\nPaginationOptionsMenu.defaultProps = {\n  className: '',\n  widgetId: '',\n  isDisabled: false,\n  dropDirection: DropdownDirection.down,\n  perPageOptions: [],\n  itemsPerPageTitle: 'Items per page',\n  perPageSuffix: 'per page',\n  optionsToggle: 'Select',\n  perPage: 0,\n  firstIndex: 0,\n  lastIndex: 0,\n  defaultToFullPage: false,\n  itemCount: 0,\n  itemsTitle: 'items',\n  toggleTemplate: ({\n    firstIndex,\n    lastIndex,\n    itemCount,\n    itemsTitle\n  }) => React.createElement(React.Fragment, null, React.createElement(\"b\", null, firstIndex, \" - \", lastIndex), ' ', \"of\", React.createElement(\"b\", null, itemCount), \" \", itemsTitle),\n  onPerPageSelect: () => null\n};","map":{"version":3,"sources":["../../../../src/components/Pagination/PaginationOptionsMenu.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\nimport { DropdownItem, DropdownDirection, DropdownWithContext, DropdownContext } from '../Dropdown';\nimport CheckIcon from \"@patternfly/react-icons/dist/esm/icons/check-icon\";\nimport { OptionsToggle } from './OptionsToggle';\nexport class PaginationOptionsMenu extends React.Component {\n    constructor(props) {\n        super(props);\n        this.parentRef = React.createRef();\n        this.onToggle = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.onSelect = () => {\n            this.setState((prevState) => ({ isOpen: !prevState.isOpen }));\n        };\n        this.handleNewPerPage = (_evt, newPerPage) => {\n            const { page, onPerPageSelect, itemCount, defaultToFullPage } = this.props;\n            let newPage = page;\n            while (Math.ceil(itemCount / newPerPage) < newPage) {\n                newPage--;\n            }\n            if (defaultToFullPage) {\n                if (itemCount / newPerPage !== newPage) {\n                    while (newPage > 1 && itemCount - newPerPage * newPage < 0) {\n                        newPage--;\n                    }\n                }\n            }\n            const startIdx = (newPage - 1) * newPerPage;\n            const endIdx = newPage * newPerPage;\n            return onPerPageSelect(_evt, newPerPage, newPage, startIdx, endIdx);\n        };\n        this.renderItems = () => {\n            const { perPageOptions, perPage, perPageSuffix } = this.props;\n            return perPageOptions.map(({ value, title }) => (React.createElement(DropdownItem, { key: value, component: \"button\", \"data-action\": `per-page-${value}`, className: css(perPage === value && 'pf-m-selected'), onClick: event => this.handleNewPerPage(event, value) },\n                title,\n                ` ${perPageSuffix}`,\n                perPage === value && (React.createElement(\"div\", { className: css(styles.optionsMenuMenuItemIcon) },\n                    React.createElement(CheckIcon, null))))));\n        };\n        this.state = {\n            isOpen: false\n        };\n    }\n    render() {\n        const { widgetId, isDisabled, itemsPerPageTitle, dropDirection, optionsToggle, perPageOptions, toggleTemplate, firstIndex, lastIndex, itemCount, itemsTitle } = this.props;\n        const { isOpen } = this.state;\n        return (React.createElement(DropdownContext.Provider, { value: {\n                id: widgetId,\n                onSelect: this.onSelect,\n                toggleIndicatorClass: styles.optionsMenuToggleButtonIcon,\n                toggleTextClass: styles.optionsMenuToggleText,\n                menuClass: styles.optionsMenuMenu,\n                itemClass: styles.optionsMenuMenuItem,\n                toggleClass: ' ',\n                baseClass: styles.optionsMenu,\n                disabledClass: styles.modifiers.disabled,\n                menuComponent: 'ul',\n                baseComponent: 'div',\n                ouiaComponentType: PaginationOptionsMenu.displayName\n            } },\n            React.createElement(DropdownWithContext, { direction: dropDirection, isOpen: isOpen, toggle: React.createElement(OptionsToggle, { optionsToggle: optionsToggle, itemsPerPageTitle: itemsPerPageTitle, showToggle: perPageOptions && perPageOptions.length > 0, onToggle: this.onToggle, isOpen: isOpen, widgetId: widgetId, firstIndex: firstIndex, lastIndex: lastIndex, itemCount: itemCount, itemsTitle: itemsTitle, toggleTemplate: toggleTemplate, parentRef: this.parentRef.current, isDisabled: isDisabled }), dropdownItems: this.renderItems(), isPlain: true })));\n    }\n}\nPaginationOptionsMenu.displayName = 'PaginationOptionsMenu';\nPaginationOptionsMenu.defaultProps = {\n    className: '',\n    widgetId: '',\n    isDisabled: false,\n    dropDirection: DropdownDirection.down,\n    perPageOptions: [],\n    itemsPerPageTitle: 'Items per page',\n    perPageSuffix: 'per page',\n    optionsToggle: 'Select',\n    perPage: 0,\n    firstIndex: 0,\n    lastIndex: 0,\n    defaultToFullPage: false,\n    itemCount: 0,\n    itemsTitle: 'items',\n    toggleTemplate: ({ firstIndex, lastIndex, itemCount, itemsTitle }) => (React.createElement(React.Fragment, null,\n        React.createElement(\"b\", null,\n            firstIndex,\n            \" - \",\n            lastIndex),\n        ' ',\n        \"of\",\n        React.createElement(\"b\", null, itemCount),\n        \" \",\n        itemsTitle)),\n    onPerPageSelect: () => null\n};\n//# sourceMappingURL=PaginationOptionsMenu.js.map"]},"metadata":{},"sourceType":"module"}