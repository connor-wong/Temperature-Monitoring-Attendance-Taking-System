{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { Button, ButtonVariant } from '../Button';\nimport AngleDoubleLeftIcon from \"@patternfly/react-icons/dist/esm/icons/angle-double-left-icon\";\nimport AngleLeftIcon from \"@patternfly/react-icons/dist/esm/icons/angle-left-icon\";\nimport AngleDoubleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-double-right-icon\";\nimport AngleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-right-icon\";\nimport { DualListSelectorPane } from './DualListSelectorPane';\nimport { getUniqueId } from '../../helpers';\nimport { flattenTree, flattenTreeWithFolders, filterFolders, filterTreeItems, filterTreeItemsWithoutFolders, filterRestTreeItems } from './treeUtils';\nexport class DualListSelector extends React.Component {\n  constructor(props) {\n    super(props);\n    this.controlsEl = React.createRef();\n    this.originalCopy = this.props.availableOptions;\n\n    this.addAll = () => {\n      this.setState(prevState => {\n        let newChosen = [];\n\n        if (this.props.isTree) {\n          newChosen = this.originalCopy;\n        } else {\n          newChosen = [...prevState.chosenOptions, ...prevState.availableOptions];\n        }\n\n        this.props.addAll && this.props.addAll([], newChosen);\n        this.props.onListChange && this.props.onListChange([], newChosen);\n        return {\n          availableOptions: [],\n          availableOptionsSelected: [],\n          chosenOptions: newChosen,\n          chosenOptionsSelected: []\n        };\n      });\n    };\n\n    this.removeAll = () => {\n      this.setState(prevState => {\n        let newAvailable = [];\n\n        if (this.props.isTree) {\n          newAvailable = this.originalCopy;\n        } else {\n          newAvailable = [...prevState.chosenOptions, ...prevState.availableOptions];\n        }\n\n        this.props.removeAll && this.props.removeAll(newAvailable, []);\n        this.props.onListChange && this.props.onListChange(newAvailable, []);\n        return {\n          availableOptions: newAvailable,\n          availableOptionsSelected: [],\n          chosenOptions: [],\n          chosenOptionsSelected: []\n        };\n      });\n    };\n\n    this.addSelected = () => {\n      this.setState(prevState => {\n        const itemsToRemove = [];\n        const newAvailable = [];\n        prevState.availableOptions.forEach((value, index) => {\n          if (prevState.availableOptionsSelected.indexOf(index) !== -1) {\n            itemsToRemove.push(value);\n          } else {\n            newAvailable.push(value);\n          }\n        });\n        const newChosen = [...prevState.chosenOptions, ...itemsToRemove];\n        this.props.addSelected && this.props.addSelected(newAvailable, newChosen);\n        this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n        return {\n          chosenOptionsSelected: [],\n          availableOptionsSelected: [],\n          chosenOptions: newChosen,\n          availableOptions: newAvailable\n        };\n      });\n    };\n\n    this.addTreeSelected = () => {\n      this.setState(prevState => {\n        // Remove selected available nodes from current available nodes\n        const newAvailable = prevState.availableOptions.map(opt => Object.assign({}, opt)).filter(item => filterRestTreeItems(item, prevState.availableTreeOptionsSelected)); // Get next chosen options from current + new nodes and remap from base\n\n        const currChosen = flattenTree(prevState.chosenOptions);\n        const nextChosenOptions = currChosen.concat(prevState.availableTreeOptionsSelected);\n        const newChosen = this.originalCopy.map(opt => Object.assign({}, opt)).filter(item => filterTreeItemsWithoutFolders(item, nextChosenOptions));\n        this.props.addSelected && this.props.addSelected(newAvailable, newChosen);\n        this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n        return {\n          availableTreeOptionsSelected: [],\n          chosenTreeOptionsSelected: [],\n          availableTreeOptionsChecked: [],\n          chosenTreeOptionsChecked: [],\n          availableOptions: newAvailable,\n          chosenOptions: newChosen\n        };\n      });\n    };\n\n    this.removeSelected = () => {\n      this.setState(prevState => {\n        const itemsToRemove = [];\n        const newChosen = [];\n        prevState.chosenOptions.forEach((value, index) => {\n          if (prevState.chosenOptionsSelected.indexOf(index) !== -1) {\n            itemsToRemove.push(value);\n          } else {\n            newChosen.push(value);\n          }\n        });\n        const newAvailable = [...prevState.availableOptions, ...itemsToRemove];\n        this.props.removeSelected && this.props.removeSelected(newAvailable, newChosen);\n        this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n        return {\n          chosenOptionsSelected: [],\n          availableOptionsSelected: [],\n          chosenOptions: newChosen,\n          availableOptions: newAvailable\n        };\n      });\n    };\n\n    this.removeTreeSelected = () => {\n      this.setState(prevState => {\n        // Remove selected chosen nodes from current chosen nodes\n        const newChosen = prevState.chosenOptions.map(opt => Object.assign({}, opt)).filter(item => filterRestTreeItems(item, prevState.chosenTreeOptionsSelected)); // Get next chosen options from current and remap from base\n\n        const currAvailable = flattenTree(prevState.availableOptions);\n        const nextAvailableOptions = currAvailable.concat(prevState.chosenTreeOptionsSelected);\n        const newAvailable = this.originalCopy.map(opt => Object.assign({}, opt)).filter(item => filterTreeItemsWithoutFolders(item, nextAvailableOptions));\n        this.props.removeSelected && this.props.removeSelected(newAvailable, newChosen);\n        this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n        return {\n          availableTreeOptionsSelected: [],\n          chosenTreeOptionsSelected: [],\n          availableTreeOptionsChecked: [],\n          chosenTreeOptionsChecked: [],\n          availableOptions: newAvailable,\n          chosenOptions: newChosen\n        };\n      });\n    };\n\n    this.onOptionSelect = (e, index, isChosen,\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    id, itemData, parentData\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ) => {\n      this.setState(prevState => {\n        const originalArray = isChosen ? prevState.chosenOptionsSelected : prevState.availableOptionsSelected;\n        let updatedArray = null;\n\n        if (originalArray.indexOf(index) !== -1) {\n          updatedArray = originalArray.filter(value => value !== index);\n        } else {\n          updatedArray = [...originalArray, index];\n        }\n\n        return {\n          chosenOptionsSelected: isChosen ? updatedArray : prevState.chosenOptionsSelected,\n          availableOptionsSelected: isChosen ? prevState.availableOptionsSelected : updatedArray\n        };\n      });\n      this.props.onOptionSelect && this.props.onOptionSelect(e);\n    };\n\n    this.onTreeOptionSelect = (e, index, isChosen, id, itemData,\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\n    parentData) => {\n      this.setState(prevState => {\n        const selectedOptions = isChosen ? prevState.chosenTreeOptionsSelected : prevState.availableTreeOptionsSelected;\n        let updatedArray = null;\n\n        if (itemData.children) {\n          const panelOptions = isChosen ? this.state.chosenOptions : this.state.availableOptions;\n          const selectedOptionTree = panelOptions.map(opt => Object.assign({}, opt)).filter(item => filterTreeItems(item, [id]));\n          const flatSelectedItems = flattenTreeWithFolders(selectedOptionTree);\n\n          if (selectedOptions.includes(id)) {\n            updatedArray = selectedOptions.filter(id => !flatSelectedItems.includes(id));\n          } else {\n            updatedArray = selectedOptions.concat(flatSelectedItems.filter(id => !selectedOptions.includes(id)));\n          }\n        } else {\n          if (selectedOptions.includes(id)) {\n            updatedArray = selectedOptions.filter(id => !selectedOptions.includes(id));\n          } else {\n            updatedArray = [...selectedOptions, id];\n          }\n        }\n\n        return {\n          chosenTreeOptionsSelected: isChosen ? updatedArray : prevState.chosenTreeOptionsSelected,\n          availableTreeOptionsSelected: isChosen ? prevState.availableTreeOptionsSelected : updatedArray\n        };\n      });\n      this.props.onOptionSelect && this.props.onOptionSelect(e);\n    };\n\n    this.isChecked = (treeItem, isChosen) => isChosen ? this.state.chosenTreeOptionsChecked.includes(treeItem.id) : this.state.availableTreeOptionsChecked.includes(treeItem.id);\n\n    this.areAllDescendantsChecked = (treeItem, isChosen) => treeItem.children ? treeItem.children.every(child => this.areAllDescendantsChecked(child, isChosen)) : this.isChecked(treeItem, isChosen);\n\n    this.areSomeDescendantsChecked = (treeItem, isChosen) => treeItem.children ? treeItem.children.some(child => this.areSomeDescendantsChecked(child, isChosen)) : this.isChecked(treeItem, isChosen);\n\n    this.mapChecked = (item, isChosen) => {\n      const hasCheck = this.areAllDescendantsChecked(item, isChosen);\n      item.isChecked = false;\n\n      if (hasCheck) {\n        item.isChecked = true;\n      } else {\n        const hasPartialCheck = this.areSomeDescendantsChecked(item, isChosen);\n\n        if (hasPartialCheck) {\n          item.isChecked = null;\n        }\n      }\n\n      if (item.children) {\n        return Object.assign(Object.assign({}, item), {\n          children: item.children.map(child => this.mapChecked(child, isChosen))\n        });\n      }\n\n      return item;\n    };\n\n    this.onTreeOptionCheck = (evt, isChecked, isChosen, itemData) => {\n      const checked = evt.target.checked ? evt.target.checked : isChecked;\n      const panelOptions = isChosen ? this.state.chosenOptions : this.state.availableOptions;\n      const checkedOptionTree = panelOptions.map(opt => Object.assign({}, opt)).filter(item => filterTreeItems(item, [itemData.id]));\n      const flatTree = flattenTreeWithFolders(checkedOptionTree);\n      const prevChecked = isChosen ? this.state.chosenTreeOptionsChecked : this.state.availableTreeOptionsChecked;\n      let updatedChecked = [];\n      let updatedSelected = [];\n      const selectedOptions = isChosen ? this.state.chosenTreeOptionsSelected : this.state.availableTreeOptionsSelected;\n\n      if (checked) {\n        updatedChecked = prevChecked.concat(flatTree.filter(id => !prevChecked.includes(id)));\n        updatedSelected = selectedOptions.concat(flatTree.filter(id => !selectedOptions.includes(id)));\n      } else {\n        updatedChecked = prevChecked.filter(id => !flatTree.includes(id));\n        updatedSelected = selectedOptions.filter(id => !flatTree.includes(id));\n      }\n\n      this.setState(prevState => ({\n        availableTreeOptionsChecked: isChosen ? prevState.availableTreeOptionsChecked : updatedChecked,\n        chosenTreeOptionsChecked: isChosen ? updatedChecked : prevState.chosenTreeOptionsChecked,\n        availableTreeOptionsSelected: isChosen ? prevState.availableTreeOptionsSelected : updatedSelected,\n        chosenTreeOptionsSelected: isChosen ? updatedSelected : prevState.chosenTreeOptionsSelected\n      }), () => {\n        this.props.onOptionCheck && this.props.onOptionCheck(evt, isChecked, itemData.id, updatedChecked);\n      });\n      this.props.onOptionSelect && this.props.onOptionSelect(evt);\n    };\n\n    this.handleKeys = event => {\n      const key = event.key;\n      let moveFocus = false;\n      let currentIndex = -1;\n      const controls = Array.from(this.controlsEl.current.getElementsByClassName('pf-c-button'));\n\n      if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {\n        if (document.activeElement === this.controlsEl.current) {\n          currentIndex = 0;\n\n          while (currentIndex < controls.length && currentIndex >= 0 && controls[currentIndex].classList.contains('pf-m-disabled')) {\n            currentIndex = currentIndex + 1;\n          }\n\n          moveFocus = true;\n          event.preventDefault();\n        } else {\n          controls.forEach((control, index) => {\n            if (document.activeElement === control) {\n              const increment = key === 'ArrowUp' || key === 'ArrowLeft' ? -1 : 1;\n              currentIndex = index + increment;\n\n              while (currentIndex < controls.length && currentIndex >= 0 && controls[currentIndex].classList.contains('pf-m-disabled')) {\n                currentIndex = currentIndex + increment;\n              }\n\n              moveFocus = true;\n              event.preventDefault();\n            }\n          });\n        }\n      }\n\n      if (moveFocus && controls[currentIndex]) {\n        controls[currentIndex].focus();\n      }\n    };\n\n    this.state = {\n      availableOptions: [...this.props.availableOptions],\n      availableOptionsSelected: [],\n      chosenOptions: [...this.props.chosenOptions],\n      chosenOptionsSelected: [],\n      availableTreeOptionsSelected: [],\n      chosenTreeOptionsSelected: [],\n      availableTreeOptionsChecked: [],\n      chosenTreeOptionsChecked: []\n    };\n  }\n\n  componentDidUpdate() {\n    if (JSON.stringify(this.props.availableOptions) !== JSON.stringify(this.state.availableOptions) || JSON.stringify(this.props.chosenOptions) !== JSON.stringify(this.state.chosenOptions)) {\n      this.setState({\n        availableOptions: [...this.props.availableOptions],\n        chosenOptions: [...this.props.chosenOptions]\n      });\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeys);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeys);\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      availableOptionsTitle,\n      availableOptionsActions,\n      availableOptionsSearchAriaLabel,\n      className,\n      chosenOptionsTitle,\n      chosenOptionsActions,\n      chosenOptionsSearchAriaLabel,\n      filterOption,\n      isSearchable,\n      chosenOptionsStatus,\n      availableOptionsStatus,\n      controlsAriaLabel,\n      addAllAriaLabel,\n      addSelectedAriaLabel,\n      removeSelectedAriaLabel,\n      removeAllAriaLabel,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      availableOptions: consumerPassedAvailableOptions,\n      chosenOptions: consumerPassedChosenOptions,\n      removeSelected,\n      addAll,\n      removeAll,\n      addSelected,\n      onListChange,\n      onAvailableOptionsSearchInputChanged,\n      onChosenOptionsSearchInputChanged,\n      onOptionSelect,\n      onOptionCheck,\n      id,\n      isTree\n    } = _a,\n          props = __rest(_a, [\"availableOptionsTitle\", \"availableOptionsActions\", \"availableOptionsSearchAriaLabel\", \"className\", \"chosenOptionsTitle\", \"chosenOptionsActions\", \"chosenOptionsSearchAriaLabel\", \"filterOption\", \"isSearchable\", \"chosenOptionsStatus\", \"availableOptionsStatus\", \"controlsAriaLabel\", \"addAllAriaLabel\", \"addSelectedAriaLabel\", \"removeSelectedAriaLabel\", \"removeAllAriaLabel\", \"availableOptions\", \"chosenOptions\", \"removeSelected\", \"addAll\", \"removeAll\", \"addSelected\", \"onListChange\", \"onAvailableOptionsSearchInputChanged\", \"onChosenOptionsSearchInputChanged\", \"onOptionSelect\", \"onOptionCheck\", \"id\", \"isTree\"]);\n\n    const {\n      availableOptions,\n      chosenOptions,\n      chosenOptionsSelected,\n      availableOptionsSelected,\n      chosenTreeOptionsSelected,\n      availableTreeOptionsSelected\n    } = this.state;\n    const availableOptionsStatusToDisplay = availableOptionsStatus || (isTree ? `${filterFolders(availableOptions, availableTreeOptionsSelected).length} of ${flattenTree(availableOptions).length} items selected` : `${availableOptionsSelected.length} of ${availableOptions.length} items selected`);\n    const chosenOptionsStatusToDisplay = chosenOptionsStatus || (isTree ? `${filterFolders(chosenOptions, chosenTreeOptionsSelected).length} of ${flattenTree(chosenOptions).length} items selected` : `${chosenOptionsSelected.length} of ${chosenOptions.length} items selected`);\n    const available = isTree ? availableOptions.map(item => this.mapChecked(item, false)) : availableOptions;\n    const chosen = isTree ? chosenOptions.map(item => this.mapChecked(item, true)) : chosenOptions;\n    return React.createElement(\"div\", Object.assign({\n      className: css(styles.dualListSelector, className),\n      id: id\n    }, props), React.createElement(DualListSelectorPane, {\n      isSearchable: isSearchable,\n      searchInputAriaLabel: availableOptionsSearchAriaLabel,\n      filterOption: filterOption,\n      onSearchInputChanged: onAvailableOptionsSearchInputChanged,\n      status: availableOptionsStatusToDisplay,\n      title: availableOptionsTitle,\n      options: available,\n      selectedOptions: isTree ? availableTreeOptionsSelected : availableOptionsSelected,\n      onOptionSelect: isTree ? this.onTreeOptionSelect : this.onOptionSelect,\n      onOptionCheck: this.onTreeOptionCheck,\n      actions: availableOptionsActions,\n      id: `${id}-available-pane`,\n      isTree: isTree\n    }), React.createElement(\"div\", {\n      className: css(styles.dualListSelectorControls),\n      tabIndex: 0,\n      ref: this.controlsEl,\n      \"aria-label\": controlsAriaLabel\n    }, React.createElement(\"div\", {\n      className: css('pf-c-dual-list-selector__controls-item')\n    }, React.createElement(Button, {\n      isDisabled: availableOptions.length === 0,\n      \"aria-disabled\": availableOptions.length === 0,\n      variant: ButtonVariant.plain,\n      onClick: this.addAll,\n      \"aria-label\": addAllAriaLabel,\n      tabIndex: -1\n    }, React.createElement(AngleDoubleRightIcon, null))), React.createElement(\"div\", {\n      className: css('pf-c-dual-list-selector__controls-item')\n    }, React.createElement(Button, {\n      isDisabled: isTree ? availableTreeOptionsSelected.length === 0 : availableOptionsSelected.length === 0,\n      \"aria-disabled\": isTree ? availableTreeOptionsSelected.length === 0 : availableOptionsSelected.length === 0,\n      variant: ButtonVariant.plain,\n      onClick: isTree ? this.addTreeSelected : this.addSelected,\n      \"aria-label\": addSelectedAriaLabel,\n      tabIndex: -1\n    }, React.createElement(AngleRightIcon, null))), React.createElement(\"div\", {\n      className: css('pf-c-dual-list-selector__controls-item')\n    }, React.createElement(Button, {\n      variant: ButtonVariant.plain,\n      onClick: isTree ? this.removeTreeSelected : this.removeSelected,\n      \"aria-label\": removeSelectedAriaLabel,\n      tabIndex: -1,\n      isDisabled: isTree ? chosenTreeOptionsSelected.length === 0 : chosenOptionsSelected.length === 0,\n      \"aria-disabled\": isTree ? chosenTreeOptionsSelected.length === 0 : chosenOptionsSelected.length === 0\n    }, React.createElement(AngleLeftIcon, null))), React.createElement(\"div\", {\n      className: css('pf-c-dual-list-selector__controls-item')\n    }, React.createElement(Button, {\n      isDisabled: chosenOptions.length === 0,\n      \"aria-disabled\": chosenOptions.length === 0,\n      variant: ButtonVariant.plain,\n      onClick: this.removeAll,\n      \"aria-label\": removeAllAriaLabel,\n      tabIndex: -1\n    }, React.createElement(AngleDoubleLeftIcon, null)))), React.createElement(DualListSelectorPane, {\n      isChosen: true,\n      isSearchable: isSearchable,\n      searchInputAriaLabel: chosenOptionsSearchAriaLabel,\n      filterOption: filterOption,\n      onSearchInputChanged: onChosenOptionsSearchInputChanged,\n      title: chosenOptionsTitle,\n      status: chosenOptionsStatusToDisplay,\n      options: chosen,\n      selectedOptions: isTree ? chosenTreeOptionsSelected : chosenOptionsSelected,\n      onOptionSelect: isTree ? this.onTreeOptionSelect : this.onOptionSelect,\n      onOptionCheck: this.onTreeOptionCheck,\n      actions: chosenOptionsActions,\n      id: `${id}-chosen-pane`,\n      isTree: isTree\n    }));\n  }\n\n}\nDualListSelector.displayName = 'DualListSelector';\nDualListSelector.defaultProps = {\n  availableOptions: [],\n  availableOptionsTitle: 'Available options',\n  availableOptionsSearchAriaLabel: 'Available search input',\n  chosenOptions: [],\n  chosenOptionsTitle: 'Chosen options',\n  chosenOptionsSearchAriaLabel: 'Chosen search input',\n  id: getUniqueId('dual-list-selector'),\n  controlsAriaLabel: 'Selector controls',\n  addAllAriaLabel: 'Add all',\n  addSelectedAriaLabel: 'Add selected',\n  removeSelectedAriaLabel: 'Remove selected',\n  removeAllAriaLabel: 'Remove all'\n};","map":{"version":3,"sources":["../../../../src/components/DualListSelector/DualListSelector.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { Button, ButtonVariant } from '../Button';\nimport AngleDoubleLeftIcon from \"@patternfly/react-icons/dist/esm/icons/angle-double-left-icon\";\nimport AngleLeftIcon from \"@patternfly/react-icons/dist/esm/icons/angle-left-icon\";\nimport AngleDoubleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-double-right-icon\";\nimport AngleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-right-icon\";\nimport { DualListSelectorPane } from './DualListSelectorPane';\nimport { getUniqueId } from '../../helpers';\nimport { flattenTree, flattenTreeWithFolders, filterFolders, filterTreeItems, filterTreeItemsWithoutFolders, filterRestTreeItems } from './treeUtils';\nexport class DualListSelector extends React.Component {\n    constructor(props) {\n        super(props);\n        this.controlsEl = React.createRef();\n        this.originalCopy = this.props.availableOptions;\n        this.addAll = () => {\n            this.setState(prevState => {\n                let newChosen = [];\n                if (this.props.isTree) {\n                    newChosen = this.originalCopy;\n                }\n                else {\n                    newChosen = [...prevState.chosenOptions, ...prevState.availableOptions];\n                }\n                this.props.addAll && this.props.addAll([], newChosen);\n                this.props.onListChange && this.props.onListChange([], newChosen);\n                return {\n                    availableOptions: [],\n                    availableOptionsSelected: [],\n                    chosenOptions: newChosen,\n                    chosenOptionsSelected: []\n                };\n            });\n        };\n        this.removeAll = () => {\n            this.setState(prevState => {\n                let newAvailable = [];\n                if (this.props.isTree) {\n                    newAvailable = this.originalCopy;\n                }\n                else {\n                    newAvailable = [...prevState.chosenOptions, ...prevState.availableOptions];\n                }\n                this.props.removeAll && this.props.removeAll(newAvailable, []);\n                this.props.onListChange && this.props.onListChange(newAvailable, []);\n                return {\n                    availableOptions: newAvailable,\n                    availableOptionsSelected: [],\n                    chosenOptions: [],\n                    chosenOptionsSelected: []\n                };\n            });\n        };\n        this.addSelected = () => {\n            this.setState(prevState => {\n                const itemsToRemove = [];\n                const newAvailable = [];\n                prevState.availableOptions.forEach((value, index) => {\n                    if (prevState.availableOptionsSelected.indexOf(index) !== -1) {\n                        itemsToRemove.push(value);\n                    }\n                    else {\n                        newAvailable.push(value);\n                    }\n                });\n                const newChosen = [...prevState.chosenOptions, ...itemsToRemove];\n                this.props.addSelected && this.props.addSelected(newAvailable, newChosen);\n                this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n                return {\n                    chosenOptionsSelected: [],\n                    availableOptionsSelected: [],\n                    chosenOptions: newChosen,\n                    availableOptions: newAvailable\n                };\n            });\n        };\n        this.addTreeSelected = () => {\n            this.setState(prevState => {\n                // Remove selected available nodes from current available nodes\n                const newAvailable = prevState.availableOptions\n                    .map(opt => Object.assign({}, opt))\n                    .filter(item => filterRestTreeItems(item, prevState.availableTreeOptionsSelected));\n                // Get next chosen options from current + new nodes and remap from base\n                const currChosen = flattenTree(prevState.chosenOptions);\n                const nextChosenOptions = currChosen.concat(prevState.availableTreeOptionsSelected);\n                const newChosen = this.originalCopy\n                    .map(opt => Object.assign({}, opt))\n                    .filter(item => filterTreeItemsWithoutFolders(item, nextChosenOptions));\n                this.props.addSelected && this.props.addSelected(newAvailable, newChosen);\n                this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n                return {\n                    availableTreeOptionsSelected: [],\n                    chosenTreeOptionsSelected: [],\n                    availableTreeOptionsChecked: [],\n                    chosenTreeOptionsChecked: [],\n                    availableOptions: newAvailable,\n                    chosenOptions: newChosen\n                };\n            });\n        };\n        this.removeSelected = () => {\n            this.setState(prevState => {\n                const itemsToRemove = [];\n                const newChosen = [];\n                prevState.chosenOptions.forEach((value, index) => {\n                    if (prevState.chosenOptionsSelected.indexOf(index) !== -1) {\n                        itemsToRemove.push(value);\n                    }\n                    else {\n                        newChosen.push(value);\n                    }\n                });\n                const newAvailable = [...prevState.availableOptions, ...itemsToRemove];\n                this.props.removeSelected && this.props.removeSelected(newAvailable, newChosen);\n                this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n                return {\n                    chosenOptionsSelected: [],\n                    availableOptionsSelected: [],\n                    chosenOptions: newChosen,\n                    availableOptions: newAvailable\n                };\n            });\n        };\n        this.removeTreeSelected = () => {\n            this.setState(prevState => {\n                // Remove selected chosen nodes from current chosen nodes\n                const newChosen = prevState.chosenOptions\n                    .map(opt => Object.assign({}, opt))\n                    .filter(item => filterRestTreeItems(item, prevState.chosenTreeOptionsSelected));\n                // Get next chosen options from current and remap from base\n                const currAvailable = flattenTree(prevState.availableOptions);\n                const nextAvailableOptions = currAvailable.concat(prevState.chosenTreeOptionsSelected);\n                const newAvailable = this.originalCopy\n                    .map(opt => Object.assign({}, opt))\n                    .filter(item => filterTreeItemsWithoutFolders(item, nextAvailableOptions));\n                this.props.removeSelected && this.props.removeSelected(newAvailable, newChosen);\n                this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n                return {\n                    availableTreeOptionsSelected: [],\n                    chosenTreeOptionsSelected: [],\n                    availableTreeOptionsChecked: [],\n                    chosenTreeOptionsChecked: [],\n                    availableOptions: newAvailable,\n                    chosenOptions: newChosen\n                };\n            });\n        };\n        this.onOptionSelect = (e, index, isChosen, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        id, itemData, parentData\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        ) => {\n            this.setState(prevState => {\n                const originalArray = isChosen ? prevState.chosenOptionsSelected : prevState.availableOptionsSelected;\n                let updatedArray = null;\n                if (originalArray.indexOf(index) !== -1) {\n                    updatedArray = originalArray.filter(value => value !== index);\n                }\n                else {\n                    updatedArray = [...originalArray, index];\n                }\n                return {\n                    chosenOptionsSelected: isChosen ? updatedArray : prevState.chosenOptionsSelected,\n                    availableOptionsSelected: isChosen ? prevState.availableOptionsSelected : updatedArray\n                };\n            });\n            this.props.onOptionSelect && this.props.onOptionSelect(e);\n        };\n        this.onTreeOptionSelect = (e, index, isChosen, id, itemData, \n        /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\n        parentData) => {\n            this.setState(prevState => {\n                const selectedOptions = isChosen ? prevState.chosenTreeOptionsSelected : prevState.availableTreeOptionsSelected;\n                let updatedArray = null;\n                if (itemData.children) {\n                    const panelOptions = isChosen ? this.state.chosenOptions : this.state.availableOptions;\n                    const selectedOptionTree = panelOptions\n                        .map(opt => Object.assign({}, opt))\n                        .filter(item => filterTreeItems(item, [id]));\n                    const flatSelectedItems = flattenTreeWithFolders(selectedOptionTree);\n                    if (selectedOptions.includes(id)) {\n                        updatedArray = selectedOptions.filter(id => !flatSelectedItems.includes(id));\n                    }\n                    else {\n                        updatedArray = selectedOptions.concat(flatSelectedItems.filter(id => !selectedOptions.includes(id)));\n                    }\n                }\n                else {\n                    if (selectedOptions.includes(id)) {\n                        updatedArray = selectedOptions.filter(id => !selectedOptions.includes(id));\n                    }\n                    else {\n                        updatedArray = [...selectedOptions, id];\n                    }\n                }\n                return {\n                    chosenTreeOptionsSelected: isChosen ? updatedArray : prevState.chosenTreeOptionsSelected,\n                    availableTreeOptionsSelected: isChosen ? prevState.availableTreeOptionsSelected : updatedArray\n                };\n            });\n            this.props.onOptionSelect && this.props.onOptionSelect(e);\n        };\n        this.isChecked = (treeItem, isChosen) => isChosen\n            ? this.state.chosenTreeOptionsChecked.includes(treeItem.id)\n            : this.state.availableTreeOptionsChecked.includes(treeItem.id);\n        this.areAllDescendantsChecked = (treeItem, isChosen) => treeItem.children\n            ? treeItem.children.every(child => this.areAllDescendantsChecked(child, isChosen))\n            : this.isChecked(treeItem, isChosen);\n        this.areSomeDescendantsChecked = (treeItem, isChosen) => treeItem.children\n            ? treeItem.children.some(child => this.areSomeDescendantsChecked(child, isChosen))\n            : this.isChecked(treeItem, isChosen);\n        this.mapChecked = (item, isChosen) => {\n            const hasCheck = this.areAllDescendantsChecked(item, isChosen);\n            item.isChecked = false;\n            if (hasCheck) {\n                item.isChecked = true;\n            }\n            else {\n                const hasPartialCheck = this.areSomeDescendantsChecked(item, isChosen);\n                if (hasPartialCheck) {\n                    item.isChecked = null;\n                }\n            }\n            if (item.children) {\n                return Object.assign(Object.assign({}, item), { children: item.children.map(child => this.mapChecked(child, isChosen)) });\n            }\n            return item;\n        };\n        this.onTreeOptionCheck = (evt, isChecked, isChosen, itemData) => {\n            const checked = evt.target.checked\n                ? evt.target.checked\n                : isChecked;\n            const panelOptions = isChosen ? this.state.chosenOptions : this.state.availableOptions;\n            const checkedOptionTree = panelOptions\n                .map(opt => Object.assign({}, opt))\n                .filter(item => filterTreeItems(item, [itemData.id]));\n            const flatTree = flattenTreeWithFolders(checkedOptionTree);\n            const prevChecked = isChosen ? this.state.chosenTreeOptionsChecked : this.state.availableTreeOptionsChecked;\n            let updatedChecked = [];\n            let updatedSelected = [];\n            const selectedOptions = isChosen ? this.state.chosenTreeOptionsSelected : this.state.availableTreeOptionsSelected;\n            if (checked) {\n                updatedChecked = prevChecked.concat(flatTree.filter(id => !prevChecked.includes(id)));\n                updatedSelected = selectedOptions.concat(flatTree.filter(id => !selectedOptions.includes(id)));\n            }\n            else {\n                updatedChecked = prevChecked.filter(id => !flatTree.includes(id));\n                updatedSelected = selectedOptions.filter(id => !flatTree.includes(id));\n            }\n            this.setState(prevState => ({\n                availableTreeOptionsChecked: isChosen ? prevState.availableTreeOptionsChecked : updatedChecked,\n                chosenTreeOptionsChecked: isChosen ? updatedChecked : prevState.chosenTreeOptionsChecked,\n                availableTreeOptionsSelected: isChosen ? prevState.availableTreeOptionsSelected : updatedSelected,\n                chosenTreeOptionsSelected: isChosen ? updatedSelected : prevState.chosenTreeOptionsSelected\n            }), () => {\n                this.props.onOptionCheck && this.props.onOptionCheck(evt, isChecked, itemData.id, updatedChecked);\n            });\n            this.props.onOptionSelect && this.props.onOptionSelect(evt);\n        };\n        this.handleKeys = (event) => {\n            const key = event.key;\n            let moveFocus = false;\n            let currentIndex = -1;\n            const controls = Array.from(this.controlsEl.current.getElementsByClassName('pf-c-button'));\n            if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {\n                if (document.activeElement === this.controlsEl.current) {\n                    currentIndex = 0;\n                    while (currentIndex < controls.length &&\n                        currentIndex >= 0 &&\n                        controls[currentIndex].classList.contains('pf-m-disabled')) {\n                        currentIndex = currentIndex + 1;\n                    }\n                    moveFocus = true;\n                    event.preventDefault();\n                }\n                else {\n                    controls.forEach((control, index) => {\n                        if (document.activeElement === control) {\n                            const increment = key === 'ArrowUp' || key === 'ArrowLeft' ? -1 : 1;\n                            currentIndex = index + increment;\n                            while (currentIndex < controls.length &&\n                                currentIndex >= 0 &&\n                                controls[currentIndex].classList.contains('pf-m-disabled')) {\n                                currentIndex = currentIndex + increment;\n                            }\n                            moveFocus = true;\n                            event.preventDefault();\n                        }\n                    });\n                }\n            }\n            if (moveFocus && controls[currentIndex]) {\n                controls[currentIndex].focus();\n            }\n        };\n        this.state = {\n            availableOptions: [...this.props.availableOptions],\n            availableOptionsSelected: [],\n            chosenOptions: [...this.props.chosenOptions],\n            chosenOptionsSelected: [],\n            availableTreeOptionsSelected: [],\n            chosenTreeOptionsSelected: [],\n            availableTreeOptionsChecked: [],\n            chosenTreeOptionsChecked: []\n        };\n    }\n    componentDidUpdate() {\n        if (JSON.stringify(this.props.availableOptions) !== JSON.stringify(this.state.availableOptions) ||\n            JSON.stringify(this.props.chosenOptions) !== JSON.stringify(this.state.chosenOptions)) {\n            this.setState({\n                availableOptions: [...this.props.availableOptions],\n                chosenOptions: [...this.props.chosenOptions]\n            });\n        }\n    }\n    componentDidMount() {\n        window.addEventListener('keydown', this.handleKeys);\n    }\n    componentWillUnmount() {\n        window.removeEventListener('keydown', this.handleKeys);\n    }\n    render() {\n        const _a = this.props, { availableOptionsTitle, availableOptionsActions, availableOptionsSearchAriaLabel, className, chosenOptionsTitle, chosenOptionsActions, chosenOptionsSearchAriaLabel, filterOption, isSearchable, chosenOptionsStatus, availableOptionsStatus, controlsAriaLabel, addAllAriaLabel, addSelectedAriaLabel, removeSelectedAriaLabel, removeAllAriaLabel, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        availableOptions: consumerPassedAvailableOptions, chosenOptions: consumerPassedChosenOptions, removeSelected, addAll, removeAll, addSelected, onListChange, onAvailableOptionsSearchInputChanged, onChosenOptionsSearchInputChanged, onOptionSelect, onOptionCheck, id, isTree } = _a, props = __rest(_a, [\"availableOptionsTitle\", \"availableOptionsActions\", \"availableOptionsSearchAriaLabel\", \"className\", \"chosenOptionsTitle\", \"chosenOptionsActions\", \"chosenOptionsSearchAriaLabel\", \"filterOption\", \"isSearchable\", \"chosenOptionsStatus\", \"availableOptionsStatus\", \"controlsAriaLabel\", \"addAllAriaLabel\", \"addSelectedAriaLabel\", \"removeSelectedAriaLabel\", \"removeAllAriaLabel\", \"availableOptions\", \"chosenOptions\", \"removeSelected\", \"addAll\", \"removeAll\", \"addSelected\", \"onListChange\", \"onAvailableOptionsSearchInputChanged\", \"onChosenOptionsSearchInputChanged\", \"onOptionSelect\", \"onOptionCheck\", \"id\", \"isTree\"]);\n        const { availableOptions, chosenOptions, chosenOptionsSelected, availableOptionsSelected, chosenTreeOptionsSelected, availableTreeOptionsSelected } = this.state;\n        const availableOptionsStatusToDisplay = availableOptionsStatus ||\n            (isTree\n                ? `${filterFolders(availableOptions, availableTreeOptionsSelected).length} of ${flattenTree(availableOptions).length} items selected`\n                : `${availableOptionsSelected.length} of ${availableOptions.length} items selected`);\n        const chosenOptionsStatusToDisplay = chosenOptionsStatus ||\n            (isTree\n                ? `${filterFolders(chosenOptions, chosenTreeOptionsSelected).length} of ${flattenTree(chosenOptions).length} items selected`\n                : `${chosenOptionsSelected.length} of ${chosenOptions.length} items selected`);\n        const available = isTree\n            ? availableOptions.map(item => this.mapChecked(item, false))\n            : availableOptions;\n        const chosen = isTree\n            ? chosenOptions.map(item => this.mapChecked(item, true))\n            : chosenOptions;\n        return (React.createElement(\"div\", Object.assign({ className: css(styles.dualListSelector, className), id: id }, props),\n            React.createElement(DualListSelectorPane, { isSearchable: isSearchable, searchInputAriaLabel: availableOptionsSearchAriaLabel, filterOption: filterOption, onSearchInputChanged: onAvailableOptionsSearchInputChanged, status: availableOptionsStatusToDisplay, title: availableOptionsTitle, options: available, selectedOptions: isTree ? availableTreeOptionsSelected : availableOptionsSelected, onOptionSelect: isTree ? this.onTreeOptionSelect : this.onOptionSelect, onOptionCheck: this.onTreeOptionCheck, actions: availableOptionsActions, id: `${id}-available-pane`, isTree: isTree }),\n            React.createElement(\"div\", { className: css(styles.dualListSelectorControls), tabIndex: 0, ref: this.controlsEl, \"aria-label\": controlsAriaLabel },\n                React.createElement(\"div\", { className: css('pf-c-dual-list-selector__controls-item') },\n                    React.createElement(Button, { isDisabled: availableOptions.length === 0, \"aria-disabled\": availableOptions.length === 0, variant: ButtonVariant.plain, onClick: this.addAll, \"aria-label\": addAllAriaLabel, tabIndex: -1 },\n                        React.createElement(AngleDoubleRightIcon, null))),\n                React.createElement(\"div\", { className: css('pf-c-dual-list-selector__controls-item') },\n                    React.createElement(Button, { isDisabled: isTree ? availableTreeOptionsSelected.length === 0 : availableOptionsSelected.length === 0, \"aria-disabled\": isTree ? availableTreeOptionsSelected.length === 0 : availableOptionsSelected.length === 0, variant: ButtonVariant.plain, onClick: isTree ? this.addTreeSelected : this.addSelected, \"aria-label\": addSelectedAriaLabel, tabIndex: -1 },\n                        React.createElement(AngleRightIcon, null))),\n                React.createElement(\"div\", { className: css('pf-c-dual-list-selector__controls-item') },\n                    React.createElement(Button, { variant: ButtonVariant.plain, onClick: isTree ? this.removeTreeSelected : this.removeSelected, \"aria-label\": removeSelectedAriaLabel, tabIndex: -1, isDisabled: isTree ? chosenTreeOptionsSelected.length === 0 : chosenOptionsSelected.length === 0, \"aria-disabled\": isTree ? chosenTreeOptionsSelected.length === 0 : chosenOptionsSelected.length === 0 },\n                        React.createElement(AngleLeftIcon, null))),\n                React.createElement(\"div\", { className: css('pf-c-dual-list-selector__controls-item') },\n                    React.createElement(Button, { isDisabled: chosenOptions.length === 0, \"aria-disabled\": chosenOptions.length === 0, variant: ButtonVariant.plain, onClick: this.removeAll, \"aria-label\": removeAllAriaLabel, tabIndex: -1 },\n                        React.createElement(AngleDoubleLeftIcon, null)))),\n            React.createElement(DualListSelectorPane, { isChosen: true, isSearchable: isSearchable, searchInputAriaLabel: chosenOptionsSearchAriaLabel, filterOption: filterOption, onSearchInputChanged: onChosenOptionsSearchInputChanged, title: chosenOptionsTitle, status: chosenOptionsStatusToDisplay, options: chosen, selectedOptions: isTree ? chosenTreeOptionsSelected : chosenOptionsSelected, onOptionSelect: isTree ? this.onTreeOptionSelect : this.onOptionSelect, onOptionCheck: this.onTreeOptionCheck, actions: chosenOptionsActions, id: `${id}-chosen-pane`, isTree: isTree })));\n    }\n}\nDualListSelector.displayName = 'DualListSelector';\nDualListSelector.defaultProps = {\n    availableOptions: [],\n    availableOptionsTitle: 'Available options',\n    availableOptionsSearchAriaLabel: 'Available search input',\n    chosenOptions: [],\n    chosenOptionsTitle: 'Chosen options',\n    chosenOptionsSearchAriaLabel: 'Chosen search input',\n    id: getUniqueId('dual-list-selector'),\n    controlsAriaLabel: 'Selector controls',\n    addAllAriaLabel: 'Add all',\n    addSelectedAriaLabel: 'Add selected',\n    removeSelectedAriaLabel: 'Remove selected',\n    removeAllAriaLabel: 'Remove all'\n};\n//# sourceMappingURL=DualListSelector.js.map"]},"metadata":{},"sourceType":"module"}