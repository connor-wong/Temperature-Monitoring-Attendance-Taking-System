{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ExpandableSection/expandable-section';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-right-icon\";\nexport class ExpandableSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isExpanded: props.isExpanded\n    };\n  }\n\n  calculateToggleText(toggleText, toggleTextExpanded, toggleTextCollapsed, propOrStateIsExpanded) {\n    if (propOrStateIsExpanded && toggleTextExpanded !== '') {\n      return toggleTextExpanded;\n    }\n\n    if (!propOrStateIsExpanded && toggleTextCollapsed !== '') {\n      return toggleTextCollapsed;\n    }\n\n    return toggleText;\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      onToggle: onToggleProp,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isActive,\n      className,\n      toggleText,\n      toggleTextExpanded,\n      toggleTextCollapsed,\n      children,\n      isExpanded,\n      isDetached,\n      contentId\n    } = _a,\n          props = __rest(_a, [\"onToggle\", \"isActive\", \"className\", \"toggleText\", \"toggleTextExpanded\", \"toggleTextCollapsed\", \"children\", \"isExpanded\", \"isDetached\", \"contentId\"]);\n\n    let onToggle = onToggleProp;\n    let propOrStateIsExpanded = isExpanded; // uncontrolled\n\n    if (isExpanded === undefined) {\n      propOrStateIsExpanded = this.state.isExpanded;\n\n      onToggle = isOpen => {\n        this.setState({\n          isExpanded: isOpen\n        }, () => onToggleProp(this.state.isExpanded));\n      };\n    }\n\n    const computedToggleText = this.calculateToggleText(toggleText, toggleTextExpanded, toggleTextCollapsed, propOrStateIsExpanded);\n    return React.createElement(\"div\", Object.assign({}, props, {\n      className: css(styles.expandableSection, propOrStateIsExpanded && styles.modifiers.expanded, isActive && styles.modifiers.active, isDetached && styles.modifiers.detached, className)\n    }), !isDetached && React.createElement(\"button\", {\n      className: css(styles.expandableSectionToggle),\n      type: \"button\",\n      \"aria-expanded\": propOrStateIsExpanded,\n      onClick: () => onToggle(!propOrStateIsExpanded)\n    }, React.createElement(\"span\", {\n      className: css(styles.expandableSectionToggleIcon)\n    }, React.createElement(AngleRightIcon, {\n      \"aria-hidden\": true\n    })), React.createElement(\"span\", {\n      className: css(styles.expandableSectionToggleText)\n    }, computedToggleText)), React.createElement(\"div\", {\n      className: css(styles.expandableSectionContent),\n      hidden: !propOrStateIsExpanded,\n      id: contentId\n    }, children));\n  }\n\n}\nExpandableSection.displayName = 'ExpandableSection';\nExpandableSection.defaultProps = {\n  className: '',\n  toggleText: '',\n  toggleTextExpanded: '',\n  toggleTextCollapsed: '',\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onToggle: isExpanded => undefined,\n  isActive: false,\n  isDetached: false,\n  contentId: ''\n};","map":{"version":3,"sources":["../../../../src/components/ExpandableSection/ExpandableSection.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ExpandableSection/expandable-section';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-right-icon\";\nexport class ExpandableSection extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isExpanded: props.isExpanded\n        };\n    }\n    calculateToggleText(toggleText, toggleTextExpanded, toggleTextCollapsed, propOrStateIsExpanded) {\n        if (propOrStateIsExpanded && toggleTextExpanded !== '') {\n            return toggleTextExpanded;\n        }\n        if (!propOrStateIsExpanded && toggleTextCollapsed !== '') {\n            return toggleTextCollapsed;\n        }\n        return toggleText;\n    }\n    render() {\n        const _a = this.props, { onToggle: onToggleProp, \n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        isActive, className, toggleText, toggleTextExpanded, toggleTextCollapsed, children, isExpanded, isDetached, contentId } = _a, props = __rest(_a, [\"onToggle\", \"isActive\", \"className\", \"toggleText\", \"toggleTextExpanded\", \"toggleTextCollapsed\", \"children\", \"isExpanded\", \"isDetached\", \"contentId\"]);\n        let onToggle = onToggleProp;\n        let propOrStateIsExpanded = isExpanded;\n        // uncontrolled\n        if (isExpanded === undefined) {\n            propOrStateIsExpanded = this.state.isExpanded;\n            onToggle = isOpen => {\n                this.setState({ isExpanded: isOpen }, () => onToggleProp(this.state.isExpanded));\n            };\n        }\n        const computedToggleText = this.calculateToggleText(toggleText, toggleTextExpanded, toggleTextCollapsed, propOrStateIsExpanded);\n        return (React.createElement(\"div\", Object.assign({}, props, { className: css(styles.expandableSection, propOrStateIsExpanded && styles.modifiers.expanded, isActive && styles.modifiers.active, isDetached && styles.modifiers.detached, className) }),\n            !isDetached && (React.createElement(\"button\", { className: css(styles.expandableSectionToggle), type: \"button\", \"aria-expanded\": propOrStateIsExpanded, onClick: () => onToggle(!propOrStateIsExpanded) },\n                React.createElement(\"span\", { className: css(styles.expandableSectionToggleIcon) },\n                    React.createElement(AngleRightIcon, { \"aria-hidden\": true })),\n                React.createElement(\"span\", { className: css(styles.expandableSectionToggleText) }, computedToggleText))),\n            React.createElement(\"div\", { className: css(styles.expandableSectionContent), hidden: !propOrStateIsExpanded, id: contentId }, children)));\n    }\n}\nExpandableSection.displayName = 'ExpandableSection';\nExpandableSection.defaultProps = {\n    className: '',\n    toggleText: '',\n    toggleTextExpanded: '',\n    toggleTextCollapsed: '',\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onToggle: (isExpanded) => undefined,\n    isActive: false,\n    isDetached: false,\n    contentId: ''\n};\n//# sourceMappingURL=ExpandableSection.js.map"]},"metadata":{},"sourceType":"module"}