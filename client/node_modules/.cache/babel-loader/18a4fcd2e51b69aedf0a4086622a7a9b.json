{"ast":null,"code":"export function flattenTree(tree) {\n  let result = [];\n  tree.forEach(item => {\n    if (item.children) {\n      result = result.concat(flattenTree(item.children));\n    } else {\n      result.push(item.id);\n    }\n  });\n  return result;\n}\nexport function flattenTreeWithFolders(tree) {\n  let result = [];\n  tree.forEach(item => {\n    result.push(item.id);\n\n    if (item.children) {\n      result = result.concat(flattenTreeWithFolders(item.children));\n    }\n  });\n  return result;\n}\nexport function filterFolders(tree, inputList) {\n  let result = [];\n  tree.forEach(item => {\n    if (item.children) {\n      result = result.concat(filterFolders(item.children, inputList));\n    } else {\n      if (inputList.includes(item.id)) {\n        result.push(item.id);\n      }\n    }\n  });\n  return result;\n}\nexport function filterTreeItems(item, inputList) {\n  if (inputList.includes(item.id)) {\n    return true;\n  }\n\n  if (item.children) {\n    return (item.children = item.children.map(opt => Object.assign({}, opt)).filter(child => filterTreeItems(child, inputList))).length > 0;\n  }\n}\nexport function filterTreeItemsWithoutFolders(item, inputList) {\n  if (item.children) {\n    return (item.children = item.children.map(opt => Object.assign({}, opt)).filter(child => filterTreeItems(child, inputList))).length > 0;\n  }\n\n  if (inputList.includes(item.id)) {\n    return true;\n  }\n}\nexport function filterRestTreeItems(item, inputList) {\n  if (item.children) {\n    const child = (item.children = item.children.map(opt => Object.assign({}, opt)).filter(child => filterRestTreeItems(child, inputList))).length > 0;\n    return child;\n  }\n\n  if (!inputList.includes(item.id)) {\n    return true;\n  }\n}","map":{"version":3,"sources":["../../../../src/components/DualListSelector/treeUtils.ts"],"names":[],"mappings":"AAEA,OAAM,SAAU,WAAV,CAAsB,IAAtB,EAA0D;AAC9D,MAAI,MAAM,GAAG,EAAb;AACA,EAAA,IAAI,CAAC,OAAL,CAAa,IAAI,IAAG;AAClB,QAAI,IAAI,CAAC,QAAT,EAAmB;AACjB,MAAA,MAAM,GAAG,MAAM,CAAC,MAAP,CAAc,WAAW,CAAC,IAAI,CAAC,QAAN,CAAzB,CAAT;AACD,KAFD,MAEO;AACL,MAAA,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,EAAjB;AACD;AACF,GAND;AAOA,SAAO,MAAP;AACD;AAED,OAAM,SAAU,sBAAV,CAAiC,IAAjC,EAAqE;AACzE,MAAI,MAAM,GAAG,EAAb;AACA,EAAA,IAAI,CAAC,OAAL,CAAa,IAAI,IAAG;AAClB,IAAA,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,EAAjB;;AACA,QAAI,IAAI,CAAC,QAAT,EAAmB;AACjB,MAAA,MAAM,GAAG,MAAM,CAAC,MAAP,CAAc,sBAAsB,CAAC,IAAI,CAAC,QAAN,CAApC,CAAT;AACD;AACF,GALD;AAMA,SAAO,MAAP;AACD;AAED,OAAM,SAAU,aAAV,CAAwB,IAAxB,EAA8D,SAA9D,EAAiF;AACrF,MAAI,MAAM,GAAG,EAAb;AACA,EAAA,IAAI,CAAC,OAAL,CAAa,IAAI,IAAG;AAClB,QAAI,IAAI,CAAC,QAAT,EAAmB;AACjB,MAAA,MAAM,GAAG,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,IAAI,CAAC,QAAN,EAAgB,SAAhB,CAA3B,CAAT;AACD,KAFD,MAEO;AACL,UAAI,SAAS,CAAC,QAAV,CAAmB,IAAI,CAAC,EAAxB,CAAJ,EAAiC;AAC/B,QAAA,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,EAAjB;AACD;AACF;AACF,GARD;AASA,SAAO,MAAP;AACD;AAED,OAAM,SAAU,eAAV,CAA0B,IAA1B,EAA8D,SAA9D,EAAiF;AACrF,MAAI,SAAS,CAAC,QAAV,CAAmB,IAAI,CAAC,EAAxB,CAAJ,EAAiC;AAC/B,WAAO,IAAP;AACD;;AACD,MAAI,IAAI,CAAC,QAAT,EAAmB;AACjB,WACE,CAAC,IAAI,CAAC,QAAL,GAAgB,IAAI,CAAC,QAAL,CACd,GADc,CACV,GAAG,IAAI,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,GAAlB,CADG,EAEd,MAFc,CAEP,KAAK,IAAI,eAAe,CAAC,KAAD,EAAQ,SAAR,CAFjB,CAAjB,EAEuD,MAFvD,GAEgE,CAHlE;AAKD;AACF;AAED,OAAM,SAAU,6BAAV,CAAwC,IAAxC,EAA4E,SAA5E,EAA+F;AACnG,MAAI,IAAI,CAAC,QAAT,EAAmB;AACjB,WACE,CAAC,IAAI,CAAC,QAAL,GAAgB,IAAI,CAAC,QAAL,CACd,GADc,CACV,GAAG,IAAI,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,GAAlB,CADG,EAEd,MAFc,CAEP,KAAK,IAAI,eAAe,CAAC,KAAD,EAAQ,SAAR,CAFjB,CAAjB,EAEuD,MAFvD,GAEgE,CAHlE;AAKD;;AAED,MAAI,SAAS,CAAC,QAAV,CAAmB,IAAI,CAAC,EAAxB,CAAJ,EAAiC;AAC/B,WAAO,IAAP;AACD;AACF;AAED,OAAM,SAAU,mBAAV,CAA8B,IAA9B,EAAkE,SAAlE,EAAqF;AACzF,MAAI,IAAI,CAAC,QAAT,EAAmB;AACjB,UAAM,KAAK,GACT,CAAC,IAAI,CAAC,QAAL,GAAgB,IAAI,CAAC,QAAL,CACd,GADc,CACV,GAAG,IAAI,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,GAAlB,CADG,EAEd,MAFc,CAEP,KAAK,IAAI,mBAAmB,CAAC,KAAD,EAAQ,SAAR,CAFrB,CAAjB,EAE2D,MAF3D,GAEoE,CAHtE;AAIA,WAAO,KAAP;AACD;;AAED,MAAI,CAAC,SAAS,CAAC,QAAV,CAAmB,IAAI,CAAC,EAAxB,CAAL,EAAkC;AAChC,WAAO,IAAP;AACD;AACF","sourceRoot":"","sourcesContent":["export function flattenTree(tree) {\n    let result = [];\n    tree.forEach(item => {\n        if (item.children) {\n            result = result.concat(flattenTree(item.children));\n        }\n        else {\n            result.push(item.id);\n        }\n    });\n    return result;\n}\nexport function flattenTreeWithFolders(tree) {\n    let result = [];\n    tree.forEach(item => {\n        result.push(item.id);\n        if (item.children) {\n            result = result.concat(flattenTreeWithFolders(item.children));\n        }\n    });\n    return result;\n}\nexport function filterFolders(tree, inputList) {\n    let result = [];\n    tree.forEach(item => {\n        if (item.children) {\n            result = result.concat(filterFolders(item.children, inputList));\n        }\n        else {\n            if (inputList.includes(item.id)) {\n                result.push(item.id);\n            }\n        }\n    });\n    return result;\n}\nexport function filterTreeItems(item, inputList) {\n    if (inputList.includes(item.id)) {\n        return true;\n    }\n    if (item.children) {\n        return ((item.children = item.children\n            .map(opt => Object.assign({}, opt))\n            .filter(child => filterTreeItems(child, inputList))).length > 0);\n    }\n}\nexport function filterTreeItemsWithoutFolders(item, inputList) {\n    if (item.children) {\n        return ((item.children = item.children\n            .map(opt => Object.assign({}, opt))\n            .filter(child => filterTreeItems(child, inputList))).length > 0);\n    }\n    if (inputList.includes(item.id)) {\n        return true;\n    }\n}\nexport function filterRestTreeItems(item, inputList) {\n    if (item.children) {\n        const child = (item.children = item.children\n            .map(opt => Object.assign({}, opt))\n            .filter(child => filterRestTreeItems(child, inputList))).length > 0;\n        return child;\n    }\n    if (!inputList.includes(item.id)) {\n        return true;\n    }\n}\n//# sourceMappingURL=treeUtils.js.map"]},"metadata":{},"sourceType":"module"}