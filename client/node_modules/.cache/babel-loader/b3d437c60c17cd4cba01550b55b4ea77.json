{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { createFocusTrap } from 'focus-trap';\nexport class FocusTrap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.divRef = React.createRef();\n\n    if (typeof document !== 'undefined') {\n      this.previouslyFocusedElement = document.activeElement;\n    }\n  }\n\n  componentDidMount() {\n    // We need to hijack the returnFocusOnDeactivate option,\n    // because React can move focus into the element before we arrived at\n    // this lifecycle hook (e.g. with autoFocus inputs). So the component\n    // captures the previouslyFocusedElement in componentWillMount,\n    // then (optionally) returns focus to it in componentWillUnmount.\n    this.focusTrap = createFocusTrap(this.divRef.current, Object.assign(Object.assign({}, this.props.focusTrapOptions), {\n      returnFocusOnDeactivate: false\n    }));\n\n    if (this.props.active) {\n      this.focusTrap.activate();\n    }\n\n    if (this.props.paused) {\n      this.focusTrap.pause();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.active && !this.props.active) {\n      this.focusTrap.deactivate();\n    } else if (!prevProps.active && this.props.active) {\n      this.focusTrap.activate();\n    }\n\n    if (prevProps.paused && !this.props.paused) {\n      this.focusTrap.unpause();\n    } else if (!prevProps.paused && this.props.paused) {\n      this.focusTrap.pause();\n    }\n  }\n\n  componentWillUnmount() {\n    this.focusTrap.deactivate();\n\n    if (this.props.focusTrapOptions.returnFocusOnDeactivate !== false && this.previouslyFocusedElement && this.previouslyFocusedElement.focus) {\n      this.previouslyFocusedElement.focus({\n        preventScroll: this.props.preventScrollOnDeactivate\n      });\n    }\n  }\n\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _a = this.props,\n          {\n      children,\n      className,\n      focusTrapOptions,\n      active,\n      paused,\n      preventScrollOnDeactivate\n    } = _a,\n          rest = __rest(_a, [\"children\", \"className\", \"focusTrapOptions\", \"active\", \"paused\", \"preventScrollOnDeactivate\"]);\n\n    return React.createElement(\"div\", Object.assign({\n      ref: this.divRef,\n      className: className\n    }, rest), children);\n  }\n\n}\nFocusTrap.displayName = 'FocusTrap';\nFocusTrap.defaultProps = {\n  active: true,\n  paused: false,\n  focusTrapOptions: {},\n  preventScrollOnDeactivate: false\n};","map":{"version":3,"sources":["../../../../src/helpers/FocusTrap/FocusTrap.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,eAAT,QAAsF,YAAtF;AAYA,OAAM,MAAO,SAAP,SAAyB,KAAK,CAAC,SAA/B,CAAwD;AAa5D,EAAA,WAAA,CAAY,KAAZ,EAAiC;AAC/B,UAAM,KAAN;AAVF,SAAA,MAAA,GAAS,KAAK,CAAC,SAAN,EAAT;;AAYE,QAAI,OAAO,QAAP,KAAoB,WAAxB,EAAqC;AACnC,WAAK,wBAAL,GAAgC,QAAQ,CAAC,aAAzC;AACD;AACF;;AAED,EAAA,iBAAiB,GAAA;AACf;AACA;AACA;AACA;AACA;AACA,SAAK,SAAL,GAAiB,eAAe,CAAC,KAAK,MAAL,CAAY,OAAb,EAAoB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAC/C,KAAK,KAAL,CAAW,gBADoC,CAAA,EACpB;AAC9B,MAAA,uBAAuB,EAAE;AADK,KADoB,CAApB,CAAhC;;AAIA,QAAI,KAAK,KAAL,CAAW,MAAf,EAAuB;AACrB,WAAK,SAAL,CAAe,QAAf;AACD;;AACD,QAAI,KAAK,KAAL,CAAW,MAAf,EAAuB;AACrB,WAAK,SAAL,CAAe,KAAf;AACD;AACF;;AAED,EAAA,kBAAkB,CAAC,SAAD,EAA0B;AAC1C,QAAI,SAAS,CAAC,MAAV,IAAoB,CAAC,KAAK,KAAL,CAAW,MAApC,EAA4C;AAC1C,WAAK,SAAL,CAAe,UAAf;AACD,KAFD,MAEO,IAAI,CAAC,SAAS,CAAC,MAAX,IAAqB,KAAK,KAAL,CAAW,MAApC,EAA4C;AACjD,WAAK,SAAL,CAAe,QAAf;AACD;;AAED,QAAI,SAAS,CAAC,MAAV,IAAoB,CAAC,KAAK,KAAL,CAAW,MAApC,EAA4C;AAC1C,WAAK,SAAL,CAAe,OAAf;AACD,KAFD,MAEO,IAAI,CAAC,SAAS,CAAC,MAAX,IAAqB,KAAK,KAAL,CAAW,MAApC,EAA4C;AACjD,WAAK,SAAL,CAAe,KAAf;AACD;AACF;;AAED,EAAA,oBAAoB,GAAA;AAClB,SAAK,SAAL,CAAe,UAAf;;AACA,QACE,KAAK,KAAL,CAAW,gBAAX,CAA4B,uBAA5B,KAAwD,KAAxD,IACA,KAAK,wBADL,IAEA,KAAK,wBAAL,CAA8B,KAHhC,EAIE;AACA,WAAK,wBAAL,CAA8B,KAA9B,CAAoC;AAAE,QAAA,aAAa,EAAE,KAAK,KAAL,CAAW;AAA5B,OAApC;AACD;AACF;;AAED,EAAA,MAAM,GAAA;AACJ;AACA,UAAM,EAAA,GAAgG,KAAK,KAA3G;AAAA,UAAM;AAAE,MAAA,QAAF;AAAY,MAAA,SAAZ;AAAuB,MAAA,gBAAvB;AAAyC,MAAA,MAAzC;AAAiD,MAAA,MAAjD;AAAyD,MAAA;AAAzD,QAAkF,EAAxF;AAAA,UAA6F,IAAI,GAAA,MAAA,CAAA,EAAA,EAA3F,CAAA,UAAA,EAAA,WAAA,EAAA,kBAAA,EAAA,QAAA,EAAA,QAAA,EAAA,2BAAA,CAA2F,CAAjG;;AACA,WACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AAAK,MAAA,GAAG,EAAE,KAAK,MAAf;AAAuB,MAAA,SAAS,EAAE;AAAlC,KAAA,EAAiD,IAAjD,CAAA,EACG,QADH,CADF;AAKD;;AAxE2D;AACrD,SAAA,CAAA,WAAA,GAAc,WAAd;AAKA,SAAA,CAAA,YAAA,GAAe;AACpB,EAAA,MAAM,EAAE,IADY;AAEpB,EAAA,MAAM,EAAE,KAFY;AAGpB,EAAA,gBAAgB,EAAE,EAHE;AAIpB,EAAA,yBAAyB,EAAE;AAJP,CAAf","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { createFocusTrap } from 'focus-trap';\nexport class FocusTrap extends React.Component {\n    constructor(props) {\n        super(props);\n        this.divRef = React.createRef();\n        if (typeof document !== 'undefined') {\n            this.previouslyFocusedElement = document.activeElement;\n        }\n    }\n    componentDidMount() {\n        // We need to hijack the returnFocusOnDeactivate option,\n        // because React can move focus into the element before we arrived at\n        // this lifecycle hook (e.g. with autoFocus inputs). So the component\n        // captures the previouslyFocusedElement in componentWillMount,\n        // then (optionally) returns focus to it in componentWillUnmount.\n        this.focusTrap = createFocusTrap(this.divRef.current, Object.assign(Object.assign({}, this.props.focusTrapOptions), { returnFocusOnDeactivate: false }));\n        if (this.props.active) {\n            this.focusTrap.activate();\n        }\n        if (this.props.paused) {\n            this.focusTrap.pause();\n        }\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.active && !this.props.active) {\n            this.focusTrap.deactivate();\n        }\n        else if (!prevProps.active && this.props.active) {\n            this.focusTrap.activate();\n        }\n        if (prevProps.paused && !this.props.paused) {\n            this.focusTrap.unpause();\n        }\n        else if (!prevProps.paused && this.props.paused) {\n            this.focusTrap.pause();\n        }\n    }\n    componentWillUnmount() {\n        this.focusTrap.deactivate();\n        if (this.props.focusTrapOptions.returnFocusOnDeactivate !== false &&\n            this.previouslyFocusedElement &&\n            this.previouslyFocusedElement.focus) {\n            this.previouslyFocusedElement.focus({ preventScroll: this.props.preventScrollOnDeactivate });\n        }\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _a = this.props, { children, className, focusTrapOptions, active, paused, preventScrollOnDeactivate } = _a, rest = __rest(_a, [\"children\", \"className\", \"focusTrapOptions\", \"active\", \"paused\", \"preventScrollOnDeactivate\"]);\n        return (React.createElement(\"div\", Object.assign({ ref: this.divRef, className: className }, rest), children));\n    }\n}\nFocusTrap.displayName = 'FocusTrap';\nFocusTrap.defaultProps = {\n    active: true,\n    paused: false,\n    focusTrapOptions: {},\n    preventScrollOnDeactivate: false\n};\n//# sourceMappingURL=FocusTrap.js.map"]},"metadata":{},"sourceType":"module"}