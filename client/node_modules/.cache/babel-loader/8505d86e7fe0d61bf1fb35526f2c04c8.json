{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nvar isLocalhost=Boolean(window.location.hostname===\"localhost\"||// [::1] is the IPv6 localhost address.\nwindow.location.hostname===\"[::1]\"||// 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));export function register(config){if(\"serviceWorker\"in navigator){// The URL constructor is available in all browsers that support SW.\nvar publicUrl=new URL(process.env.PUBLIC_URL,window.location.href);if(publicUrl.origin!==window.location.origin){// Our service worker won't work if PUBLIC_URL is on a different origin\n// from what our page is served on. This might happen if a CDN is used to\n// serve assets; see https://github.com/facebook/create-react-app/issues/2374\nreturn;}window.addEventListener(\"load\",function(){var swFileName=process.env.NODE_ENV===\"production\"?\"service-worker.js\":\"custom-sw.js\";var swUrl=\"\".concat(process.env.PUBLIC_URL,\"/\").concat(swFileName);if(isLocalhost){// This is running on localhost. Let's check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl,config);// Add some additional logging to localhost, pointing developers to the\n// service worker/PWA documentation.\nnavigator.serviceWorker.ready.then(function(){console.log(\"This web app is being served cache-first by a service \"+\"worker. To learn more, visit https://bit.ly/CRA-PWA\");});}else{// Is not localhost. Just register service worker\nregisterValidSW(swUrl,config);}});}}function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=function(){if(installingWorker.state===\"installed\"){if(navigator.serviceWorker.controller){// At this point, the updated precached content has been fetched,\n// but the previous service worker will still serve the older\n// content until all client tabs are closed.\nconsole.log(\"New content is available and will be used when all \"+\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\");// Execute callback\nif(config&&config.onUpdate){config.onUpdate(registration);}}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log(\"Content is cached for offline use.\");// Execute callback\nif(config&&config.onSuccess){config.onSuccess(registration);}}}};};}).catch(function(error){console.error(\"Error during service worker registration:\",error);});}function checkValidServiceWorker(swUrl,config){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl).then(function(response){// Ensure service worker exists, and that we really are getting a JS file.\nvar contentType=response.headers.get(\"content-type\");if(response.status===404||contentType!=null&&contentType.indexOf(\"javascript\")===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl,config);}}).catch(function(){console.log(\"No internet connection found. App is running in offline mode.\");});}export function unregister(){if(\"serviceWorker\"in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();});}}export function displayNotification(){if(Notification.permission===\"granted\"){navigator.serviceWorker.getRegistration().then(function(reg){var options={body:\"This Is A Push Notification Test\",icon:\"/img/icon-192x192.png\",data:{dateOfArrival:Date.now(),primaryKey:1}};reg.showNotification(\"It's A TEST!\",options);});}}","map":{"version":3,"sources":["C:/School Stuff/Modules/2021 Sem One/Final Year Project/Temperature Monitoring And Attendance Taking System/Web Interface Prototype/raspitar/client/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","publicUrl","URL","process","env","PUBLIC_URL","href","origin","addEventListener","swFileName","NODE_ENV","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","response","contentType","headers","get","status","indexOf","unregister","reload","displayNotification","Notification","permission","getRegistration","reg","options","body","icon","data","dateOfArrival","Date","now","primaryKey","showNotification"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (\"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swFileName =\n        process.env.NODE_ENV === \"production\"\n          ? \"service-worker.js\"\n          : \"custom-sw.js\";\n      const swUrl = `${process.env.PUBLIC_URL}/${swFileName}`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n\nexport function displayNotification() {\n  if (Notification.permission === \"granted\") {\n    navigator.serviceWorker.getRegistration().then(function (reg) {\n      var options = {\n        body: \"This Is A Push Notification Test\",\n        icon: \"/img/icon-192x192.png\",\n        data: {\n          dateOfArrival: Date.now(),\n          primaryKey: 1,\n        },\n      };\n      reg.showNotification(\"It's A TEST!\", options);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}