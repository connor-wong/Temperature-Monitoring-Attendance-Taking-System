{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy';\nimport { css } from '@patternfly/react-styles';\nimport { TextInput } from '../TextInput';\nimport { TooltipPosition } from '../Tooltip';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { ClipboardCopyButton } from './ClipboardCopyButton';\nimport { ClipboardCopyToggle } from './ClipboardCopyToggle';\nimport { ClipboardCopyExpanded } from './ClipboardCopyExpanded';\nexport const clipboardCopyFunc = (event, text) => {\n  const clipboard = event.currentTarget.parentElement;\n  const el = document.createElement('textarea');\n  el.value = text.toString();\n  clipboard.appendChild(el);\n  el.select();\n  document.execCommand('copy');\n  clipboard.removeChild(el);\n};\nexport var ClipboardCopyVariant;\n\n(function (ClipboardCopyVariant) {\n  ClipboardCopyVariant[\"inline\"] = \"inline\";\n  ClipboardCopyVariant[\"expansion\"] = \"expansion\";\n  ClipboardCopyVariant[\"inlineCompact\"] = \"inline-compact\";\n})(ClipboardCopyVariant || (ClipboardCopyVariant = {}));\n\nexport class ClipboardCopy extends React.Component {\n  constructor(props) {\n    super(props);\n    this.timer = null; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (prevProps.children !== this.props.children) {\n        this.updateText(this.props.children);\n      }\n    }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n    this.expandContent = _event => {\n      this.setState(prevState => ({\n        expanded: !prevState.expanded\n      }));\n    };\n\n    this.updateText = text => {\n      this.setState({\n        text\n      });\n      this.props.onChange(text);\n    };\n\n    this.render = () => {\n      const _a = this.props,\n            {\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        isExpanded,\n        onChange,\n        // Don't pass to <div>\n\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        isReadOnly,\n        isCode,\n        isBlock,\n        exitDelay,\n        maxWidth,\n        entryDelay,\n        switchDelay,\n        onCopy,\n        hoverTip,\n        clickTip,\n        textAriaLabel,\n        toggleAriaLabel,\n        variant,\n        position,\n        className,\n        additionalActions\n      } = _a,\n            divProps = __rest(_a, [\"isExpanded\", \"onChange\", \"isReadOnly\", \"isCode\", \"isBlock\", \"exitDelay\", \"maxWidth\", \"entryDelay\", \"switchDelay\", \"onCopy\", \"hoverTip\", \"clickTip\", \"textAriaLabel\", \"toggleAriaLabel\", \"variant\", \"position\", \"className\", \"additionalActions\"]);\n\n      const textIdPrefix = 'text-input-';\n      const toggleIdPrefix = 'toggle-';\n      const contentIdPrefix = 'content-';\n      return React.createElement(\"div\", Object.assign({\n        className: css(styles.clipboardCopy, variant === 'inline-compact' && styles.modifiers.inline, isBlock && styles.modifiers.block, this.state.expanded && styles.modifiers.expanded, className)\n      }, divProps), variant === 'inline-compact' && React.createElement(GenerateId, {\n        prefix: \"\"\n      }, id => React.createElement(React.Fragment, null, !isCode && React.createElement(\"span\", {\n        className: css(styles.clipboardCopyText),\n        id: `${textIdPrefix}${id}`\n      }, this.state.text), isCode && React.createElement(\"code\", {\n        className: css(styles.clipboardCopyText, styles.modifiers.code),\n        id: `${textIdPrefix}${id}`\n      }, this.state.text), React.createElement(\"span\", {\n        className: css(styles.clipboardCopyActions)\n      }, React.createElement(\"span\", {\n        className: css(styles.clipboardCopyActionsItem)\n      }, React.createElement(ClipboardCopyButton, {\n        variant: \"plain\",\n        exitDelay: exitDelay,\n        entryDelay: entryDelay,\n        maxWidth: maxWidth,\n        position: position,\n        id: `copy-button-${id}`,\n        textId: `text-input-${id}`,\n        \"aria-label\": hoverTip,\n        onClick: event => {\n          if (this.timer) {\n            window.clearTimeout(this.timer);\n            this.setState({\n              copied: false\n            });\n          }\n\n          onCopy(event, this.state.text);\n          this.setState({\n            copied: true\n          }, () => {\n            this.timer = window.setTimeout(() => {\n              this.setState({\n                copied: false\n              });\n              this.timer = null;\n            }, switchDelay);\n          });\n        }\n      }, this.state.copied ? clickTip : hoverTip)), additionalActions && additionalActions))), variant !== 'inline-compact' && React.createElement(GenerateId, {\n        prefix: \"\"\n      }, id => React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: css(styles.clipboardCopyGroup)\n      }, variant === 'expansion' && React.createElement(ClipboardCopyToggle, {\n        isExpanded: this.state.expanded,\n        onClick: this.expandContent,\n        id: `${toggleIdPrefix}${id}`,\n        textId: `${textIdPrefix}${id}`,\n        contentId: `${contentIdPrefix}${id}`,\n        \"aria-label\": toggleAriaLabel\n      }), React.createElement(TextInput, {\n        isReadOnly: isReadOnly || this.state.expanded,\n        onChange: this.updateText,\n        value: this.state.text,\n        id: `text-input-${id}`,\n        \"aria-label\": textAriaLabel\n      }), React.createElement(ClipboardCopyButton, {\n        exitDelay: exitDelay,\n        entryDelay: entryDelay,\n        maxWidth: maxWidth,\n        position: position,\n        id: `copy-button-${id}`,\n        textId: `text-input-${id}`,\n        \"aria-label\": hoverTip,\n        onClick: event => {\n          if (this.timer) {\n            window.clearTimeout(this.timer);\n            this.setState({\n              copied: false\n            });\n          }\n\n          onCopy(event, this.state.text);\n          this.setState({\n            copied: true\n          }, () => {\n            this.timer = window.setTimeout(() => {\n              this.setState({\n                copied: false\n              });\n              this.timer = null;\n            }, switchDelay);\n          });\n        }\n      }, this.state.copied ? clickTip : hoverTip)), this.state.expanded && React.createElement(ClipboardCopyExpanded, {\n        isReadOnly: isReadOnly,\n        isCode: isCode,\n        id: `content-${id}`,\n        onChange: this.updateText\n      }, this.state.text))));\n    };\n\n    this.state = {\n      text: this.props.children,\n      expanded: this.props.isExpanded,\n      copied: false\n    };\n  }\n\n}\nClipboardCopy.displayName = 'ClipboardCopy';\nClipboardCopy.defaultProps = {\n  hoverTip: 'Copy to clipboard',\n  clickTip: 'Successfully copied to clipboard!',\n  isReadOnly: false,\n  isExpanded: false,\n  isCode: false,\n  variant: 'inline',\n  position: TooltipPosition.top,\n  maxWidth: '150px',\n  exitDelay: 1600,\n  entryDelay: 100,\n  switchDelay: 2000,\n  onCopy: clipboardCopyFunc,\n  onChange: () => undefined,\n  textAriaLabel: 'Copyable input',\n  toggleAriaLabel: 'Show content',\n  additionalActions: null\n};","map":{"version":3,"sources":["../../../../src/components/ClipboardCopy/ClipboardCopy.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy';\nimport { css } from '@patternfly/react-styles';\nimport { TextInput } from '../TextInput';\nimport { TooltipPosition } from '../Tooltip';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { ClipboardCopyButton } from './ClipboardCopyButton';\nimport { ClipboardCopyToggle } from './ClipboardCopyToggle';\nimport { ClipboardCopyExpanded } from './ClipboardCopyExpanded';\nexport const clipboardCopyFunc = (event, text) => {\n    const clipboard = event.currentTarget.parentElement;\n    const el = document.createElement('textarea');\n    el.value = text.toString();\n    clipboard.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    clipboard.removeChild(el);\n};\nexport var ClipboardCopyVariant;\n(function (ClipboardCopyVariant) {\n    ClipboardCopyVariant[\"inline\"] = \"inline\";\n    ClipboardCopyVariant[\"expansion\"] = \"expansion\";\n    ClipboardCopyVariant[\"inlineCompact\"] = \"inline-compact\";\n})(ClipboardCopyVariant || (ClipboardCopyVariant = {}));\nexport class ClipboardCopy extends React.Component {\n    constructor(props) {\n        super(props);\n        this.timer = null;\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this.componentDidUpdate = (prevProps, prevState) => {\n            if (prevProps.children !== this.props.children) {\n                this.updateText(this.props.children);\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this.expandContent = (_event) => {\n            this.setState(prevState => ({\n                expanded: !prevState.expanded\n            }));\n        };\n        this.updateText = (text) => {\n            this.setState({ text });\n            this.props.onChange(text);\n        };\n        this.render = () => {\n            const _a = this.props, { \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            isExpanded, onChange, // Don't pass to <div>\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            isReadOnly, isCode, isBlock, exitDelay, maxWidth, entryDelay, switchDelay, onCopy, hoverTip, clickTip, textAriaLabel, toggleAriaLabel, variant, position, className, additionalActions } = _a, divProps = __rest(_a, [\"isExpanded\", \"onChange\", \"isReadOnly\", \"isCode\", \"isBlock\", \"exitDelay\", \"maxWidth\", \"entryDelay\", \"switchDelay\", \"onCopy\", \"hoverTip\", \"clickTip\", \"textAriaLabel\", \"toggleAriaLabel\", \"variant\", \"position\", \"className\", \"additionalActions\"]);\n            const textIdPrefix = 'text-input-';\n            const toggleIdPrefix = 'toggle-';\n            const contentIdPrefix = 'content-';\n            return (React.createElement(\"div\", Object.assign({ className: css(styles.clipboardCopy, variant === 'inline-compact' && styles.modifiers.inline, isBlock && styles.modifiers.block, this.state.expanded && styles.modifiers.expanded, className) }, divProps),\n                variant === 'inline-compact' && (React.createElement(GenerateId, { prefix: \"\" }, id => (React.createElement(React.Fragment, null,\n                    !isCode && (React.createElement(\"span\", { className: css(styles.clipboardCopyText), id: `${textIdPrefix}${id}` }, this.state.text)),\n                    isCode && (React.createElement(\"code\", { className: css(styles.clipboardCopyText, styles.modifiers.code), id: `${textIdPrefix}${id}` }, this.state.text)),\n                    React.createElement(\"span\", { className: css(styles.clipboardCopyActions) },\n                        React.createElement(\"span\", { className: css(styles.clipboardCopyActionsItem) },\n                            React.createElement(ClipboardCopyButton, { variant: \"plain\", exitDelay: exitDelay, entryDelay: entryDelay, maxWidth: maxWidth, position: position, id: `copy-button-${id}`, textId: `text-input-${id}`, \"aria-label\": hoverTip, onClick: (event) => {\n                                    if (this.timer) {\n                                        window.clearTimeout(this.timer);\n                                        this.setState({ copied: false });\n                                    }\n                                    onCopy(event, this.state.text);\n                                    this.setState({ copied: true }, () => {\n                                        this.timer = window.setTimeout(() => {\n                                            this.setState({ copied: false });\n                                            this.timer = null;\n                                        }, switchDelay);\n                                    });\n                                } }, this.state.copied ? clickTip : hoverTip)),\n                        additionalActions && additionalActions))))),\n                variant !== 'inline-compact' && (React.createElement(GenerateId, { prefix: \"\" }, id => (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { className: css(styles.clipboardCopyGroup) },\n                        variant === 'expansion' && (React.createElement(ClipboardCopyToggle, { isExpanded: this.state.expanded, onClick: this.expandContent, id: `${toggleIdPrefix}${id}`, textId: `${textIdPrefix}${id}`, contentId: `${contentIdPrefix}${id}`, \"aria-label\": toggleAriaLabel })),\n                        React.createElement(TextInput, { isReadOnly: isReadOnly || this.state.expanded, onChange: this.updateText, value: this.state.text, id: `text-input-${id}`, \"aria-label\": textAriaLabel }),\n                        React.createElement(ClipboardCopyButton, { exitDelay: exitDelay, entryDelay: entryDelay, maxWidth: maxWidth, position: position, id: `copy-button-${id}`, textId: `text-input-${id}`, \"aria-label\": hoverTip, onClick: (event) => {\n                                if (this.timer) {\n                                    window.clearTimeout(this.timer);\n                                    this.setState({ copied: false });\n                                }\n                                onCopy(event, this.state.text);\n                                this.setState({ copied: true }, () => {\n                                    this.timer = window.setTimeout(() => {\n                                        this.setState({ copied: false });\n                                        this.timer = null;\n                                    }, switchDelay);\n                                });\n                            } }, this.state.copied ? clickTip : hoverTip)),\n                    this.state.expanded && (React.createElement(ClipboardCopyExpanded, { isReadOnly: isReadOnly, isCode: isCode, id: `content-${id}`, onChange: this.updateText }, this.state.text))))))));\n        };\n        this.state = {\n            text: this.props.children,\n            expanded: this.props.isExpanded,\n            copied: false\n        };\n    }\n}\nClipboardCopy.displayName = 'ClipboardCopy';\nClipboardCopy.defaultProps = {\n    hoverTip: 'Copy to clipboard',\n    clickTip: 'Successfully copied to clipboard!',\n    isReadOnly: false,\n    isExpanded: false,\n    isCode: false,\n    variant: 'inline',\n    position: TooltipPosition.top,\n    maxWidth: '150px',\n    exitDelay: 1600,\n    entryDelay: 100,\n    switchDelay: 2000,\n    onCopy: clipboardCopyFunc,\n    onChange: () => undefined,\n    textAriaLabel: 'Copyable input',\n    toggleAriaLabel: 'Show content',\n    additionalActions: null\n};\n//# sourceMappingURL=ClipboardCopy.js.map"]},"metadata":{},"sourceType":"module"}