{"ast":null,"code":"import getBasePlacement from '../utils/getBasePlacement';\nimport { top, left, right, placements } from '../enums';\n/**\n * @param placement\n * @param rects\n * @param offset\n */\n\nexport function distanceAndSkiddingToXY(placement, rects, offset) {\n  const basePlacement = getBasePlacement(placement);\n  const invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;\n  let [skidding, distance] = typeof offset === 'function' ? offset(Object.assign(Object.assign({}, rects), {\n    placement\n  })) : offset;\n  skidding = skidding || 0;\n  distance = (distance || 0) * invertDistance;\n  return [left, right].indexOf(basePlacement) >= 0 ? {\n    x: distance,\n    y: skidding\n  } : {\n    x: skidding,\n    y: distance\n  };\n}\n/**\n *\n */\n\nfunction offset({\n  state,\n  options,\n  name\n}) {\n  const {\n    offset = [0, 0]\n  } = options;\n  const data = placements.reduce((acc, placement) => {\n    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);\n    return acc;\n  }, {});\n  const {\n    x,\n    y\n  } = data[state.placement];\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.modifiersData.popperOffsets.x += x;\n    state.modifiersData.popperOffsets.y += y;\n  }\n\n  state.modifiersData[name] = data;\n}\n\nexport default {\n  name: 'offset',\n  enabled: true,\n  phase: 'main',\n  requires: ['popperOffsets'],\n  fn: offset\n};","map":{"version":3,"sources":["../../../../../../../src/helpers/Popper/thirdparty/popper-core/modifiers/offset.ts"],"names":[],"mappings":"AAGA,OAAO,gBAAP,MAA6B,2BAA7B;AACA,SAAS,GAAT,EAAc,IAAd,EAAoB,KAApB,EAA2B,UAA3B,QAA6C,UAA7C;AAeA;;;;AAIG;;AACH,OAAM,SAAU,uBAAV,CACJ,SADI,EAEJ,KAFI,EAGJ,MAHI,EAGU;AAEd,QAAM,aAAa,GAAG,gBAAgB,CAAC,SAAD,CAAtC;AACA,QAAM,cAAc,GAAG,CAAC,IAAD,EAAO,GAAP,EAAY,OAAZ,CAAoB,aAApB,KAAsC,CAAtC,GAA0C,CAAC,CAA3C,GAA+C,CAAtE;AAEA,MAAI,CAAC,QAAD,EAAW,QAAX,IACF,OAAO,MAAP,KAAkB,UAAlB,GACI,MAAM,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACD,KADC,CAAA,EACI;AACR,IAAA;AADQ,GADJ,CAAA,CADV,GAKI,MANN;AAQA,EAAA,QAAQ,GAAG,QAAQ,IAAI,CAAvB;AACA,EAAA,QAAQ,GAAG,CAAC,QAAQ,IAAI,CAAb,IAAkB,cAA7B;AAEA,SAAO,CAAC,IAAD,EAAO,KAAP,EAAc,OAAd,CAAsB,aAAtB,KAAwC,CAAxC,GAA4C;AAAE,IAAA,CAAC,EAAE,QAAL;AAAe,IAAA,CAAC,EAAE;AAAlB,GAA5C,GAA2E;AAAE,IAAA,CAAC,EAAE,QAAL;AAAe,IAAA,CAAC,EAAE;AAAlB,GAAlF;AACD;AAED;;AAEG;;AACH,SAAS,MAAT,CAAgB;AAAE,EAAA,KAAF;AAAS,EAAA,OAAT;AAAkB,EAAA;AAAlB,CAAhB,EAAoE;AAClE,QAAM;AAAE,IAAA,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ;AAAX,MAAsB,OAA5B;AAEA,QAAM,IAAI,GAAG,UAAU,CAAC,MAAX,CAAkB,CAAC,GAAD,EAAM,SAAN,KAAmB;AAChD,IAAA,GAAG,CAAC,SAAD,CAAH,GAAiB,uBAAuB,CAAC,SAAD,EAAY,KAAK,CAAC,KAAlB,EAAyB,MAAzB,CAAxC;AACA,WAAO,GAAP;AACD,GAHY,EAGV,EAHU,CAAb;AAKA,QAAM;AAAE,IAAA,CAAF;AAAK,IAAA;AAAL,MAAW,IAAI,CAAC,KAAK,CAAC,SAAP,CAArB;;AAEA,MAAI,KAAK,CAAC,aAAN,CAAoB,aAApB,IAAqC,IAAzC,EAA+C;AAC7C,IAAA,KAAK,CAAC,aAAN,CAAoB,aAApB,CAAkC,CAAlC,IAAuC,CAAvC;AACA,IAAA,KAAK,CAAC,aAAN,CAAoB,aAApB,CAAkC,CAAlC,IAAuC,CAAvC;AACD;;AAED,EAAA,KAAK,CAAC,aAAN,CAAoB,IAApB,IAA4B,IAA5B;AACD;;AAID,eAAe;AACb,EAAA,IAAI,EAAE,QADO;AAEb,EAAA,OAAO,EAAE,IAFI;AAGb,EAAA,KAAK,EAAE,MAHM;AAIb,EAAA,QAAQ,EAAE,CAAC,eAAD,CAJG;AAKb,EAAA,EAAE,EAAE;AALS,CAAf","sourceRoot":"","sourcesContent":["import getBasePlacement from '../utils/getBasePlacement';\nimport { top, left, right, placements } from '../enums';\n/**\n * @param placement\n * @param rects\n * @param offset\n */\nexport function distanceAndSkiddingToXY(placement, rects, offset) {\n    const basePlacement = getBasePlacement(placement);\n    const invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;\n    let [skidding, distance] = typeof offset === 'function'\n        ? offset(Object.assign(Object.assign({}, rects), { placement }))\n        : offset;\n    skidding = skidding || 0;\n    distance = (distance || 0) * invertDistance;\n    return [left, right].indexOf(basePlacement) >= 0 ? { x: distance, y: skidding } : { x: skidding, y: distance };\n}\n/**\n *\n */\nfunction offset({ state, options, name }) {\n    const { offset = [0, 0] } = options;\n    const data = placements.reduce((acc, placement) => {\n        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);\n        return acc;\n    }, {});\n    const { x, y } = data[state.placement];\n    if (state.modifiersData.popperOffsets != null) {\n        state.modifiersData.popperOffsets.x += x;\n        state.modifiersData.popperOffsets.y += y;\n    }\n    state.modifiersData[name] = data;\n}\nexport default {\n    name: 'offset',\n    enabled: true,\n    phase: 'main',\n    requires: ['popperOffsets'],\n    fn: offset\n};\n//# sourceMappingURL=offset.js.map"]},"metadata":{},"sourceType":"module"}