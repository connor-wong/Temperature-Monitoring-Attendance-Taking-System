{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/SimpleList/simple-list';\nimport { SimpleListGroup } from './SimpleListGroup';\nexport const SimpleListContext = React.createContext({});\nexport class SimpleList extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      currentRef: null\n    };\n\n    this.handleCurrentUpdate = (newCurrentRef, itemProps) => {\n      this.setState({\n        currentRef: newCurrentRef\n      });\n      const {\n        onSelect\n      } = this.props;\n      onSelect && onSelect(newCurrentRef, itemProps);\n    };\n  }\n\n  componentDidMount() {\n    if (!SimpleList.hasWarnBeta && process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.warn('This component is in beta and subject to change.');\n      SimpleList.hasWarnBeta = true;\n    }\n  }\n\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _a = this.props,\n          {\n      children,\n      className,\n      onSelect,\n      isControlled\n    } = _a,\n          props = __rest(_a, [\"children\", \"className\", \"onSelect\", \"isControlled\"]);\n\n    let isGrouped = false;\n\n    if (children) {\n      isGrouped = React.Children.toArray(children)[0].type === SimpleListGroup;\n    }\n\n    return React.createElement(SimpleListContext.Provider, {\n      value: {\n        currentRef: this.state.currentRef,\n        updateCurrentRef: this.handleCurrentUpdate,\n        isControlled\n      }\n    }, React.createElement(\"div\", Object.assign({\n      className: css(styles.simpleList, className)\n    }, props, isGrouped && {\n      role: 'list'\n    }), isGrouped && children, !isGrouped && React.createElement(\"ul\", null, children)));\n  }\n\n}\nSimpleList.displayName = 'SimpleList';\nSimpleList.hasWarnBeta = false;\nSimpleList.defaultProps = {\n  children: null,\n  className: '',\n  isControlled: true\n};","map":{"version":3,"sources":["../../../../src/components/SimpleList/SimpleList.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,gEAAnB;AACA,SAAS,eAAT,QAAgC,mBAAhC;AA+BA,OAAO,MAAM,iBAAiB,GAAG,KAAK,CAAC,aAAN,CAAqD,EAArD,CAA1B;AAEP,OAAM,MAAO,UAAP,SAA0B,KAAK,CAAC,SAAhC,CAA2E;AAAjF,EAAA,WAAA,GAAA;;AAGE,SAAA,KAAA,GAAQ;AACN,MAAA,UAAU,EAAE;AADN,KAAR;;AAkBA,SAAA,mBAAA,GAAsB,CACpB,aADoB,EAEpB,SAFoB,KAGlB;AACF,WAAK,QAAL,CAAc;AAAE,QAAA,UAAU,EAAE;AAAd,OAAd;AACA,YAAM;AAAE,QAAA;AAAF,UAAe,KAAK,KAA1B;AACA,MAAA,QAAQ,IAAI,QAAQ,CAAC,aAAD,EAAgB,SAAhB,CAApB;AACD,KAPD;AAiCD;;AAzCC,EAAA,iBAAiB,GAAA;AACf,QAAI,CAAC,UAAU,CAAC,WAAZ,IAA2B,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAAxD,EAAsE;AACpE;AACA,MAAA,OAAO,CAAC,IAAR,CAAa,kDAAb;AACA,MAAA,UAAU,CAAC,WAAX,GAAyB,IAAzB;AACD;AACF;;AAWD,EAAA,MAAM,GAAA;AACJ;AACA,UAAM,EAAA,GAA4D,KAAK,KAAvE;AAAA,UAAM;AAAE,MAAA,QAAF;AAAY,MAAA,SAAZ;AAAuB,MAAA,QAAvB;AAAiC,MAAA;AAAjC,QAA6C,EAAnD;AAAA,UAAwD,KAAK,GAAA,MAAA,CAAA,EAAA,EAAvD,CAAA,UAAA,EAAA,WAAA,EAAA,UAAA,EAAA,cAAA,CAAuD,CAA7D;;AAEA,QAAI,SAAS,GAAG,KAAhB;;AACA,QAAI,QAAJ,EAAc;AACZ,MAAA,SAAS,GAAI,KAAK,CAAC,QAAN,CAAe,OAAf,CAAuB,QAAvB,EAAiC,CAAjC,EAA2D,IAA3D,KAAoE,eAAjF;AACD;;AAED,WACE,KAAA,CAAA,aAAA,CAAC,iBAAiB,CAAC,QAAnB,EAA2B;AACzB,MAAA,KAAK,EAAE;AACL,QAAA,UAAU,EAAE,KAAK,KAAL,CAAW,UADlB;AAEL,QAAA,gBAAgB,EAAE,KAAK,mBAFlB;AAGL,QAAA;AAHK;AADkB,KAA3B,EAOE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AAAK,MAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,UAAR,EAAoB,SAApB;AAAnB,KAAA,EAAuD,KAAvD,EAAmE,SAAS,IAAI;AAAE,MAAA,IAAI,EAAE;AAAR,KAAhF,CAAA,EACG,SAAS,IAAI,QADhB,EAEG,CAAC,SAAD,IAAc,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EAAK,QAAL,CAFjB,CAPF,CADF;AAcD;;AArD8E;AACxE,UAAA,CAAA,WAAA,GAAc,YAAd;AACA,UAAA,CAAA,WAAA,GAAc,KAAd;AAKA,UAAA,CAAA,YAAA,GAAgC;AACrC,EAAA,QAAQ,EAAE,IAD2B;AAErC,EAAA,SAAS,EAAE,EAF0B;AAGrC,EAAA,YAAY,EAAE;AAHuB,CAAhC","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/SimpleList/simple-list';\nimport { SimpleListGroup } from './SimpleListGroup';\nexport const SimpleListContext = React.createContext({});\nexport class SimpleList extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            currentRef: null\n        };\n        this.handleCurrentUpdate = (newCurrentRef, itemProps) => {\n            this.setState({ currentRef: newCurrentRef });\n            const { onSelect } = this.props;\n            onSelect && onSelect(newCurrentRef, itemProps);\n        };\n    }\n    componentDidMount() {\n        if (!SimpleList.hasWarnBeta && process.env.NODE_ENV !== 'production') {\n            // eslint-disable-next-line no-console\n            console.warn('This component is in beta and subject to change.');\n            SimpleList.hasWarnBeta = true;\n        }\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _a = this.props, { children, className, onSelect, isControlled } = _a, props = __rest(_a, [\"children\", \"className\", \"onSelect\", \"isControlled\"]);\n        let isGrouped = false;\n        if (children) {\n            isGrouped = React.Children.toArray(children)[0].type === SimpleListGroup;\n        }\n        return (React.createElement(SimpleListContext.Provider, { value: {\n                currentRef: this.state.currentRef,\n                updateCurrentRef: this.handleCurrentUpdate,\n                isControlled\n            } },\n            React.createElement(\"div\", Object.assign({ className: css(styles.simpleList, className) }, props, (isGrouped && { role: 'list' })),\n                isGrouped && children,\n                !isGrouped && React.createElement(\"ul\", null, children))));\n    }\n}\nSimpleList.displayName = 'SimpleList';\nSimpleList.hasWarnBeta = false;\nSimpleList.defaultProps = {\n    children: null,\n    className: '',\n    isControlled: true\n};\n//# sourceMappingURL=SimpleList.js.map"]},"metadata":{},"sourceType":"module"}