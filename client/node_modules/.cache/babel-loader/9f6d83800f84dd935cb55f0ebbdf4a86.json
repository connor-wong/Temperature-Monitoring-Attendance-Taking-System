{"ast":null,"code":"import { modifierPhases } from '../enums'; // source: https://stackoverflow.com/questions/49875255\n\n/**\n * @param modifiers\n */\n\nfunction order(modifiers) {\n  const map = new Map();\n  const visited = new Set();\n  const result = [];\n  modifiers.forEach(modifier => {\n    map.set(modifier.name, modifier);\n  }); // On visiting object, check for its dependencies and visit them recursively\n\n  /**\n   * @param modifier\n   */\n\n  function sort(modifier) {\n    visited.add(modifier.name);\n    const requires = [...(modifier.requires || []), ...(modifier.requiresIfExists || [])];\n    requires.forEach(dep => {\n      if (!visited.has(dep)) {\n        const depModifier = map.get(dep);\n\n        if (depModifier) {\n          sort(depModifier);\n        }\n      }\n    });\n    result.push(modifier);\n  }\n\n  modifiers.forEach(modifier => {\n    if (!visited.has(modifier.name)) {\n      // check for visited object\n      sort(modifier);\n    }\n  });\n  return result;\n}\n/**\n * @param modifiers\n */\n\n\nexport default function orderModifiers(modifiers) {\n  // order based on dependencies\n  const orderedModifiers = order(modifiers); // order based on phase\n\n  return modifierPhases.reduce((acc, phase) => acc.concat(orderedModifiers.filter(modifier => modifier.phase === phase)), []);\n}","map":{"version":3,"sources":["../../../../../../../src/helpers/Popper/thirdparty/popper-core/utils/orderModifiers.ts"],"names":[],"mappings":"AAEA,SAAS,cAAT,QAA+B,UAA/B,C,CAEA;;AACA;;AAEG;;AACH,SAAS,KAAT,CAAe,SAAf,EAAwB;AACtB,QAAM,GAAG,GAAG,IAAI,GAAJ,EAAZ;AACA,QAAM,OAAO,GAAG,IAAI,GAAJ,EAAhB;AACA,QAAM,MAAM,GAAG,EAAf;AAEA,EAAA,SAAS,CAAC,OAAV,CAAkB,QAAQ,IAAG;AAC3B,IAAA,GAAG,CAAC,GAAJ,CAAQ,QAAQ,CAAC,IAAjB,EAAuB,QAAvB;AACD,GAFD,EALsB,CAStB;;AACA;;AAEG;;AACH,WAAS,IAAT,CAAc,QAAd,EAA0C;AACxC,IAAA,OAAO,CAAC,GAAR,CAAY,QAAQ,CAAC,IAArB;AAEA,UAAM,QAAQ,GAAG,CAAC,IAAI,QAAQ,CAAC,QAAT,IAAqB,EAAzB,CAAD,EAA+B,IAAI,QAAQ,CAAC,gBAAT,IAA6B,EAAjC,CAA/B,CAAjB;AAEA,IAAA,QAAQ,CAAC,OAAT,CAAiB,GAAG,IAAG;AACrB,UAAI,CAAC,OAAO,CAAC,GAAR,CAAY,GAAZ,CAAL,EAAuB;AACrB,cAAM,WAAW,GAAG,GAAG,CAAC,GAAJ,CAAQ,GAAR,CAApB;;AAEA,YAAI,WAAJ,EAAiB;AACf,UAAA,IAAI,CAAC,WAAD,CAAJ;AACD;AACF;AACF,KARD;AAUA,IAAA,MAAM,CAAC,IAAP,CAAY,QAAZ;AACD;;AAED,EAAA,SAAS,CAAC,OAAV,CAAkB,QAAQ,IAAG;AAC3B,QAAI,CAAC,OAAO,CAAC,GAAR,CAAY,QAAQ,CAAC,IAArB,CAAL,EAAiC;AAC/B;AACA,MAAA,IAAI,CAAC,QAAD,CAAJ;AACD;AACF,GALD;AAOA,SAAO,MAAP;AACD;AAED;;AAEG;;;AACH,eAAc,SAAU,cAAV,CAAyB,SAAzB,EAAwD;AACpE;AACA,QAAM,gBAAgB,GAAG,KAAK,CAAC,SAAD,CAA9B,CAFoE,CAIpE;;AACA,SAAO,cAAc,CAAC,MAAf,CACL,CAAC,GAAD,EAAM,KAAN,KAAgB,GAAG,CAAC,MAAJ,CAAW,gBAAgB,CAAC,MAAjB,CAAwB,QAAQ,IAAI,QAAQ,CAAC,KAAT,KAAmB,KAAvD,CAAX,CADX,EAEL,EAFK,CAAP;AAID","sourceRoot":"","sourcesContent":["import { modifierPhases } from '../enums';\n// source: https://stackoverflow.com/questions/49875255\n/**\n * @param modifiers\n */\nfunction order(modifiers) {\n    const map = new Map();\n    const visited = new Set();\n    const result = [];\n    modifiers.forEach(modifier => {\n        map.set(modifier.name, modifier);\n    });\n    // On visiting object, check for its dependencies and visit them recursively\n    /**\n     * @param modifier\n     */\n    function sort(modifier) {\n        visited.add(modifier.name);\n        const requires = [...(modifier.requires || []), ...(modifier.requiresIfExists || [])];\n        requires.forEach(dep => {\n            if (!visited.has(dep)) {\n                const depModifier = map.get(dep);\n                if (depModifier) {\n                    sort(depModifier);\n                }\n            }\n        });\n        result.push(modifier);\n    }\n    modifiers.forEach(modifier => {\n        if (!visited.has(modifier.name)) {\n            // check for visited object\n            sort(modifier);\n        }\n    });\n    return result;\n}\n/**\n * @param modifiers\n */\nexport default function orderModifiers(modifiers) {\n    // order based on dependencies\n    const orderedModifiers = order(modifiers);\n    // order based on phase\n    return modifierPhases.reduce((acc, phase) => acc.concat(orderedModifiers.filter(modifier => modifier.phase === phase)), []);\n}\n//# sourceMappingURL=orderModifiers.js.map"]},"metadata":{},"sourceType":"module"}