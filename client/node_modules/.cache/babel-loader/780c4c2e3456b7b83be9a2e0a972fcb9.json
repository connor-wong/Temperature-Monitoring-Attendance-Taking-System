{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { DataListContext } from './DataList';\nimport { KeyTypes } from '../Select';\nimport { DataListDragButton } from './DataListDragButton';\n\nfunction findDataListDragButton(node) {\n  if (!React.isValidElement(node)) {\n    return null;\n  }\n\n  if (node.type === DataListDragButton) {\n    return node;\n  }\n\n  if (node.props.children) {\n    for (const child of React.Children.toArray(node.props.children)) {\n      const button = findDataListDragButton(child);\n\n      if (button) {\n        return button;\n      }\n    }\n  }\n\n  return null;\n}\n\nexport class DataListItem extends React.Component {\n  render() {\n    const _a = this.props,\n          {\n      children,\n      isExpanded,\n      className,\n      id,\n      'aria-labelledby': ariaLabelledBy\n    } = _a,\n          props = __rest(_a, [\"children\", \"isExpanded\", \"className\", \"id\", 'aria-labelledby']);\n\n    return React.createElement(DataListContext.Consumer, null, ({\n      isSelectable,\n      selectedDataListItemId,\n      updateSelectedDataListItem,\n      isDraggable,\n      dragStart,\n      dragEnd,\n      drop\n    }) => {\n      const selectDataListItem = event => {\n        let target = event.target;\n\n        while (event.currentTarget !== target) {\n          if ('onclick' in target && target.onclick || target.parentNode.classList.contains(styles.dataListItemAction) || target.parentNode.classList.contains(styles.dataListItemControl)) {\n            // check other event handlers are not present.\n            return;\n          } else {\n            target = target.parentNode;\n          }\n        }\n\n        updateSelectedDataListItem(id);\n      };\n\n      const onKeyDown = event => {\n        if (event.key === KeyTypes.Enter) {\n          updateSelectedDataListItem(id);\n        }\n      }; // We made the DataListDragButton determine if the entire item is draggable instead of\n      // DataListItem like we should have.\n      // Recursively search children for the DataListDragButton and see if it's disabled...\n\n\n      const dragButton = findDataListDragButton(children);\n      const dragProps = isDraggable && {\n        draggable: dragButton ? !dragButton.props.isDisabled : true,\n        onDrop: drop,\n        onDragEnd: dragEnd,\n        onDragStart: dragStart\n      };\n      return React.createElement(\"li\", Object.assign({\n        id: id,\n        className: css(styles.dataListItem, isExpanded && styles.modifiers.expanded, isSelectable && styles.modifiers.selectable, selectedDataListItemId && selectedDataListItemId === id && styles.modifiers.selected, className),\n        \"aria-labelledby\": ariaLabelledBy\n      }, isSelectable && {\n        tabIndex: 0,\n        onClick: selectDataListItem,\n        onKeyDown\n      }, isSelectable && selectedDataListItemId === id && {\n        'aria-selected': true\n      }, props, dragProps), React.Children.map(children, child => React.isValidElement(child) && React.cloneElement(child, {\n        rowid: ariaLabelledBy\n      })));\n    });\n  }\n\n}\nDataListItem.displayName = 'DataListItem';\nDataListItem.defaultProps = {\n  isExpanded: false,\n  className: '',\n  id: '',\n  children: null,\n  'aria-labelledby': ''\n};","map":{"version":3,"sources":["../../../../src/components/DataList/DataListItem.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { DataListContext } from './DataList';\nimport { KeyTypes } from '../Select';\nimport { DataListDragButton } from './DataListDragButton';\nfunction findDataListDragButton(node) {\n    if (!React.isValidElement(node)) {\n        return null;\n    }\n    if (node.type === DataListDragButton) {\n        return node;\n    }\n    if (node.props.children) {\n        for (const child of React.Children.toArray(node.props.children)) {\n            const button = findDataListDragButton(child);\n            if (button) {\n                return button;\n            }\n        }\n    }\n    return null;\n}\nexport class DataListItem extends React.Component {\n    render() {\n        const _a = this.props, { children, isExpanded, className, id, 'aria-labelledby': ariaLabelledBy } = _a, props = __rest(_a, [\"children\", \"isExpanded\", \"className\", \"id\", 'aria-labelledby']);\n        return (React.createElement(DataListContext.Consumer, null, ({ isSelectable, selectedDataListItemId, updateSelectedDataListItem, isDraggable, dragStart, dragEnd, drop }) => {\n            const selectDataListItem = (event) => {\n                let target = event.target;\n                while (event.currentTarget !== target) {\n                    if (('onclick' in target && target.onclick) ||\n                        target.parentNode.classList.contains(styles.dataListItemAction) ||\n                        target.parentNode.classList.contains(styles.dataListItemControl)) {\n                        // check other event handlers are not present.\n                        return;\n                    }\n                    else {\n                        target = target.parentNode;\n                    }\n                }\n                updateSelectedDataListItem(id);\n            };\n            const onKeyDown = (event) => {\n                if (event.key === KeyTypes.Enter) {\n                    updateSelectedDataListItem(id);\n                }\n            };\n            // We made the DataListDragButton determine if the entire item is draggable instead of\n            // DataListItem like we should have.\n            // Recursively search children for the DataListDragButton and see if it's disabled...\n            const dragButton = findDataListDragButton(children);\n            const dragProps = isDraggable && {\n                draggable: dragButton ? !dragButton.props.isDisabled : true,\n                onDrop: drop,\n                onDragEnd: dragEnd,\n                onDragStart: dragStart\n            };\n            return (React.createElement(\"li\", Object.assign({ id: id, className: css(styles.dataListItem, isExpanded && styles.modifiers.expanded, isSelectable && styles.modifiers.selectable, selectedDataListItemId && selectedDataListItemId === id && styles.modifiers.selected, className), \"aria-labelledby\": ariaLabelledBy }, (isSelectable && { tabIndex: 0, onClick: selectDataListItem, onKeyDown }), (isSelectable && selectedDataListItemId === id && { 'aria-selected': true }), props, dragProps), React.Children.map(children, child => React.isValidElement(child) &&\n                React.cloneElement(child, {\n                    rowid: ariaLabelledBy\n                }))));\n        }));\n    }\n}\nDataListItem.displayName = 'DataListItem';\nDataListItem.defaultProps = {\n    isExpanded: false,\n    className: '',\n    id: '',\n    children: null,\n    'aria-labelledby': ''\n};\n//# sourceMappingURL=DataListItem.js.map"]},"metadata":{},"sourceType":"module"}