{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Drawer/drawer';\nimport { css } from '@patternfly/react-styles';\nimport { DrawerColorVariant, DrawerContext } from './Drawer';\nimport { formatBreakpointMods } from '../../helpers/util';\nlet isResizing = null;\nlet newSize = 0;\nexport const DrawerPanelContent = _a => {\n  var {\n    className = '',\n    id,\n    children,\n    hasNoBorder = false,\n    isResizable = false,\n    onResize,\n    minSize,\n    defaultSize,\n    maxSize,\n    increment = 5,\n    resizeAriaLabel = 'Resize',\n    resizeAriaDescribedBy = 'Press space to begin resizing, and use the arrow keys to grow or shrink the panel. Press enter or escape to finish resizing.',\n    widths,\n    colorVariant = DrawerColorVariant.default\n  } = _a,\n      props = __rest(_a, [\"className\", \"id\", \"children\", \"hasNoBorder\", \"isResizable\", \"onResize\", \"minSize\", \"defaultSize\", \"maxSize\", \"increment\", \"resizeAriaLabel\", \"resizeAriaDescribedBy\", \"widths\", \"colorVariant\"]);\n\n  const panel = React.useRef();\n  const {\n    position,\n    isExpanded,\n    isStatic,\n    onExpand,\n    drawerRef\n  } = React.useContext(DrawerContext);\n  const hidden = isStatic ? false : !isExpanded;\n  const [isExpandedInternal, setIsExpandedInternal] = React.useState(!hidden);\n  let currWidth = 0;\n  let panelRect;\n  let right;\n  let left;\n  let bottom;\n  let setInitialVals = true;\n  React.useEffect(() => {\n    if (!isStatic && isExpanded) {\n      setIsExpandedInternal(isExpanded);\n    }\n  }, [isStatic, isExpanded]);\n\n  const handleTouchStart = e => {\n    e.stopPropagation();\n    document.addEventListener('touchmove', callbackTouchMove, {\n      passive: false\n    });\n    document.addEventListener('touchend', callbackTouchEnd);\n    isResizing = true;\n  };\n\n  const handleMousedown = e => {\n    e.stopPropagation();\n    e.preventDefault();\n    document.addEventListener('mousemove', callbackMouseMove);\n    document.addEventListener('mouseup', callbackMouseUp);\n    drawerRef.current.classList.add(css(styles.modifiers.resizing));\n    isResizing = true;\n    setInitialVals = true;\n  };\n\n  const handleMouseMove = e => {\n    const mousePos = position === 'bottom' ? e.clientY : e.clientX;\n    handleControlMove(e, mousePos);\n  };\n\n  const handleTouchMove = e => {\n    e.preventDefault();\n    e.stopImmediatePropagation();\n    const touchPos = position === 'bottom' ? e.touches[0].clientY : e.touches[0].clientX;\n    handleControlMove(e, touchPos);\n  };\n\n  const handleControlMove = (e, controlPosition) => {\n    e.stopPropagation();\n\n    if (!isResizing) {\n      return;\n    }\n\n    if (setInitialVals) {\n      panelRect = panel.current.getBoundingClientRect();\n      right = panelRect.right;\n      left = panelRect.left;\n      bottom = panelRect.bottom;\n      setInitialVals = false;\n    }\n\n    const mousePos = controlPosition;\n    let newSize = 0;\n\n    if (position === 'right') {\n      newSize = right - mousePos;\n    } else if (position === 'left') {\n      newSize = mousePos - left;\n    } else {\n      newSize = bottom - mousePos;\n    }\n\n    if (position === 'bottom') {\n      panel.current.style.overflowAnchor = 'none';\n    }\n\n    panel.current.style.setProperty('--pf-c-drawer__panel--md--FlexBasis', newSize + 'px');\n    currWidth = newSize;\n  };\n\n  const handleMouseup = () => {\n    if (!isResizing) {\n      return;\n    }\n\n    drawerRef.current.classList.remove(css(styles.modifiers.resizing));\n    isResizing = false;\n    onResize && onResize(currWidth, id);\n    setInitialVals = true;\n    document.removeEventListener('mousemove', callbackMouseMove);\n    document.removeEventListener('mouseup', callbackMouseUp);\n  };\n\n  const handleTouchEnd = e => {\n    e.stopPropagation();\n\n    if (!isResizing) {\n      return;\n    }\n\n    isResizing = false;\n    onResize && onResize(currWidth, id);\n    document.removeEventListener('touchmove', callbackTouchMove);\n    document.removeEventListener('touchend', callbackTouchEnd);\n  };\n\n  const callbackMouseMove = React.useCallback(handleMouseMove, []);\n  const callbackTouchEnd = React.useCallback(handleTouchEnd, []);\n  const callbackTouchMove = React.useCallback(handleTouchMove, []);\n  const callbackMouseUp = React.useCallback(handleMouseup, []);\n\n  const handleKeys = e => {\n    const key = e.key;\n\n    if (key !== ' ' && key !== 'Escape' && key !== 'Enter' && key !== 'ArrowUp' && key !== 'ArrowDown' && key !== 'ArrowLeft' && key !== 'ArrowRight') {\n      if (isResizing) {\n        e.preventDefault();\n      }\n\n      return;\n    }\n\n    e.preventDefault();\n\n    if (key === ' ' || key === 'Escape' || key === 'Enter') {\n      if (key === ' ') {\n        isResizing = true;\n      } else {\n        isResizing = false;\n        onResize && onResize(currWidth, id);\n      }\n\n      const panelRect = panel.current.getBoundingClientRect();\n      newSize = position === 'bottom' ? panelRect.height : panelRect.width;\n    }\n\n    if (isResizing) {\n      let delta = 0;\n\n      if (key === 'ArrowRight') {\n        delta = position === 'left' ? increment : -increment;\n      } else if (key === 'ArrowLeft') {\n        delta = position === 'left' ? -increment : increment;\n      } else if (key === 'ArrowUp') {\n        delta = increment;\n      } else if (key === 'ArrowDown') {\n        delta = -increment;\n      }\n\n      newSize = newSize + delta;\n\n      if (position === 'bottom') {\n        panel.current.style.overflowAnchor = 'none';\n      }\n\n      panel.current.style.setProperty('--pf-c-drawer__panel--md--FlexBasis', newSize + 'px');\n      currWidth = newSize;\n    }\n  };\n\n  const boundaryCssVars = {};\n\n  if (defaultSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis'] = defaultSize;\n  }\n\n  if (minSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis--min'] = minSize;\n  }\n\n  if (maxSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis--max'] = maxSize;\n  }\n\n  return React.createElement(\"div\", Object.assign({\n    id: id,\n    className: css(styles.drawerPanel, isResizable && styles.modifiers.resizable, hasNoBorder && styles.modifiers.noBorder, formatBreakpointMods(widths, styles), colorVariant === DrawerColorVariant.light200 && styles.modifiers.light_200, className),\n    ref: panel,\n    onTransitionEnd: ev => {\n      if (!hidden && ev.nativeEvent.propertyName === 'transform') {\n        onExpand();\n      }\n\n      setIsExpandedInternal(!hidden);\n    },\n    hidden: hidden\n  }, (defaultSize || minSize || maxSize) && {\n    style: boundaryCssVars\n  }, props), isExpandedInternal && React.createElement(React.Fragment, null, isResizable && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: css(styles.drawerSplitter, position !== 'bottom' && styles.modifiers.vertical),\n    role: \"separator\",\n    tabIndex: 0,\n    \"aria-orientation\": position === 'bottom' ? 'horizontal' : 'vertical',\n    \"aria-label\": resizeAriaLabel,\n    \"aria-describedby\": resizeAriaDescribedBy,\n    onMouseDown: handleMousedown,\n    onKeyDown: handleKeys,\n    onTouchStart: handleTouchStart\n  }, React.createElement(\"div\", {\n    className: css(styles.drawerSplitterHandle),\n    \"aria-hidden\": true\n  })), React.createElement(\"div\", {\n    className: css(styles.drawerPanelMain)\n  }, children)), !isResizable && children));\n};\nDrawerPanelContent.displayName = 'DrawerPanelContent';","map":{"version":3,"sources":["../../../../src/components/Drawer/DrawerPanelContent.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Drawer/drawer';\nimport { css } from '@patternfly/react-styles';\nimport { DrawerColorVariant, DrawerContext } from './Drawer';\nimport { formatBreakpointMods } from '../../helpers/util';\nlet isResizing = null;\nlet newSize = 0;\nexport const DrawerPanelContent = (_a) => {\n    var { className = '', id, children, hasNoBorder = false, isResizable = false, onResize, minSize, defaultSize, maxSize, increment = 5, resizeAriaLabel = 'Resize', resizeAriaDescribedBy = 'Press space to begin resizing, and use the arrow keys to grow or shrink the panel. Press enter or escape to finish resizing.', widths, colorVariant = DrawerColorVariant.default } = _a, props = __rest(_a, [\"className\", \"id\", \"children\", \"hasNoBorder\", \"isResizable\", \"onResize\", \"minSize\", \"defaultSize\", \"maxSize\", \"increment\", \"resizeAriaLabel\", \"resizeAriaDescribedBy\", \"widths\", \"colorVariant\"]);\n    const panel = React.useRef();\n    const { position, isExpanded, isStatic, onExpand, drawerRef } = React.useContext(DrawerContext);\n    const hidden = isStatic ? false : !isExpanded;\n    const [isExpandedInternal, setIsExpandedInternal] = React.useState(!hidden);\n    let currWidth = 0;\n    let panelRect;\n    let right;\n    let left;\n    let bottom;\n    let setInitialVals = true;\n    React.useEffect(() => {\n        if (!isStatic && isExpanded) {\n            setIsExpandedInternal(isExpanded);\n        }\n    }, [isStatic, isExpanded]);\n    const handleTouchStart = (e) => {\n        e.stopPropagation();\n        document.addEventListener('touchmove', callbackTouchMove, { passive: false });\n        document.addEventListener('touchend', callbackTouchEnd);\n        isResizing = true;\n    };\n    const handleMousedown = (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        document.addEventListener('mousemove', callbackMouseMove);\n        document.addEventListener('mouseup', callbackMouseUp);\n        drawerRef.current.classList.add(css(styles.modifiers.resizing));\n        isResizing = true;\n        setInitialVals = true;\n    };\n    const handleMouseMove = (e) => {\n        const mousePos = position === 'bottom' ? e.clientY : e.clientX;\n        handleControlMove(e, mousePos);\n    };\n    const handleTouchMove = (e) => {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        const touchPos = position === 'bottom' ? e.touches[0].clientY : e.touches[0].clientX;\n        handleControlMove(e, touchPos);\n    };\n    const handleControlMove = (e, controlPosition) => {\n        e.stopPropagation();\n        if (!isResizing) {\n            return;\n        }\n        if (setInitialVals) {\n            panelRect = panel.current.getBoundingClientRect();\n            right = panelRect.right;\n            left = panelRect.left;\n            bottom = panelRect.bottom;\n            setInitialVals = false;\n        }\n        const mousePos = controlPosition;\n        let newSize = 0;\n        if (position === 'right') {\n            newSize = right - mousePos;\n        }\n        else if (position === 'left') {\n            newSize = mousePos - left;\n        }\n        else {\n            newSize = bottom - mousePos;\n        }\n        if (position === 'bottom') {\n            panel.current.style.overflowAnchor = 'none';\n        }\n        panel.current.style.setProperty('--pf-c-drawer__panel--md--FlexBasis', newSize + 'px');\n        currWidth = newSize;\n    };\n    const handleMouseup = () => {\n        if (!isResizing) {\n            return;\n        }\n        drawerRef.current.classList.remove(css(styles.modifiers.resizing));\n        isResizing = false;\n        onResize && onResize(currWidth, id);\n        setInitialVals = true;\n        document.removeEventListener('mousemove', callbackMouseMove);\n        document.removeEventListener('mouseup', callbackMouseUp);\n    };\n    const handleTouchEnd = (e) => {\n        e.stopPropagation();\n        if (!isResizing) {\n            return;\n        }\n        isResizing = false;\n        onResize && onResize(currWidth, id);\n        document.removeEventListener('touchmove', callbackTouchMove);\n        document.removeEventListener('touchend', callbackTouchEnd);\n    };\n    const callbackMouseMove = React.useCallback(handleMouseMove, []);\n    const callbackTouchEnd = React.useCallback(handleTouchEnd, []);\n    const callbackTouchMove = React.useCallback(handleTouchMove, []);\n    const callbackMouseUp = React.useCallback(handleMouseup, []);\n    const handleKeys = (e) => {\n        const key = e.key;\n        if (key !== ' ' &&\n            key !== 'Escape' &&\n            key !== 'Enter' &&\n            key !== 'ArrowUp' &&\n            key !== 'ArrowDown' &&\n            key !== 'ArrowLeft' &&\n            key !== 'ArrowRight') {\n            if (isResizing) {\n                e.preventDefault();\n            }\n            return;\n        }\n        e.preventDefault();\n        if (key === ' ' || key === 'Escape' || key === 'Enter') {\n            if (key === ' ') {\n                isResizing = true;\n            }\n            else {\n                isResizing = false;\n                onResize && onResize(currWidth, id);\n            }\n            const panelRect = panel.current.getBoundingClientRect();\n            newSize = position === 'bottom' ? panelRect.height : panelRect.width;\n        }\n        if (isResizing) {\n            let delta = 0;\n            if (key === 'ArrowRight') {\n                delta = position === 'left' ? increment : -increment;\n            }\n            else if (key === 'ArrowLeft') {\n                delta = position === 'left' ? -increment : increment;\n            }\n            else if (key === 'ArrowUp') {\n                delta = increment;\n            }\n            else if (key === 'ArrowDown') {\n                delta = -increment;\n            }\n            newSize = newSize + delta;\n            if (position === 'bottom') {\n                panel.current.style.overflowAnchor = 'none';\n            }\n            panel.current.style.setProperty('--pf-c-drawer__panel--md--FlexBasis', newSize + 'px');\n            currWidth = newSize;\n        }\n    };\n    const boundaryCssVars = {};\n    if (defaultSize) {\n        boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis'] = defaultSize;\n    }\n    if (minSize) {\n        boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis--min'] = minSize;\n    }\n    if (maxSize) {\n        boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis--max'] = maxSize;\n    }\n    return (React.createElement(\"div\", Object.assign({ id: id, className: css(styles.drawerPanel, isResizable && styles.modifiers.resizable, hasNoBorder && styles.modifiers.noBorder, formatBreakpointMods(widths, styles), colorVariant === DrawerColorVariant.light200 && styles.modifiers.light_200, className), ref: panel, onTransitionEnd: ev => {\n            if (!hidden && ev.nativeEvent.propertyName === 'transform') {\n                onExpand();\n            }\n            setIsExpandedInternal(!hidden);\n        }, hidden: hidden }, ((defaultSize || minSize || maxSize) && {\n        style: boundaryCssVars\n    }), props), isExpandedInternal && (React.createElement(React.Fragment, null,\n        isResizable && (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.drawerSplitter, position !== 'bottom' && styles.modifiers.vertical), role: \"separator\", tabIndex: 0, \"aria-orientation\": position === 'bottom' ? 'horizontal' : 'vertical', \"aria-label\": resizeAriaLabel, \"aria-describedby\": resizeAriaDescribedBy, onMouseDown: handleMousedown, onKeyDown: handleKeys, onTouchStart: handleTouchStart },\n                React.createElement(\"div\", { className: css(styles.drawerSplitterHandle), \"aria-hidden\": true })),\n            React.createElement(\"div\", { className: css(styles.drawerPanelMain) }, children))),\n        !isResizable && children))));\n};\nDrawerPanelContent.displayName = 'DrawerPanelContent';\n//# sourceMappingURL=DrawerPanelContent.js.map"]},"metadata":{},"sourceType":"module"}