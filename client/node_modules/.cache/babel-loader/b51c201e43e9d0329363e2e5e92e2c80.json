{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ToolbarItem } from './ToolbarItem';\nimport { ChipGroup, Chip } from '../ChipGroup';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nexport class ToolbarFilter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isMounted: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      categoryName,\n      chips\n    } = this.props;\n    this.context.updateNumberFilters(typeof categoryName === 'string' ? categoryName : categoryName.name, chips.length);\n    this.setState({\n      isMounted: true\n    });\n  }\n\n  componentDidUpdate() {\n    const {\n      categoryName,\n      chips\n    } = this.props;\n    this.context.updateNumberFilters(typeof categoryName === 'string' ? categoryName : categoryName.name, chips.length);\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      children,\n      chips,\n      deleteChipGroup,\n      deleteChip,\n      categoryName,\n      showToolbarItem\n    } = _a,\n          props = __rest(_a, [\"children\", \"chips\", \"deleteChipGroup\", \"deleteChip\", \"categoryName\", \"showToolbarItem\"]);\n\n    const {\n      isExpanded,\n      chipGroupContentRef\n    } = this.context;\n    const categoryKey = typeof categoryName !== 'string' && categoryName.hasOwnProperty('key') ? categoryName.key : categoryName.toString();\n    const chipGroup = chips.length ? React.createElement(ToolbarItem, {\n      variant: \"chip-group\"\n    }, React.createElement(ChipGroup, {\n      key: categoryKey,\n      categoryName: typeof categoryName === 'string' ? categoryName : categoryName.name,\n      isClosable: deleteChipGroup !== undefined,\n      onClick: () => deleteChipGroup(categoryName)\n    }, chips.map(chip => typeof chip === 'string' ? React.createElement(Chip, {\n      key: chip,\n      onClick: () => deleteChip(categoryKey, chip)\n    }, chip) : React.createElement(Chip, {\n      key: chip.key,\n      onClick: () => deleteChip(categoryKey, chip)\n    }, chip.node)))) : null;\n\n    if (!isExpanded && this.state.isMounted) {\n      return React.createElement(React.Fragment, null, showToolbarItem && React.createElement(ToolbarItem, Object.assign({}, props), children), ReactDOM.createPortal(chipGroup, chipGroupContentRef.current.firstElementChild));\n    }\n\n    return React.createElement(ToolbarContentContext.Consumer, null, ({\n      chipContainerRef\n    }) => React.createElement(React.Fragment, null, showToolbarItem && React.createElement(ToolbarItem, Object.assign({}, props), children), chipContainerRef.current && ReactDOM.createPortal(chipGroup, chipContainerRef.current)));\n  }\n\n}\nToolbarFilter.displayName = 'ToolbarFilter';\nToolbarFilter.contextType = ToolbarContext;\nToolbarFilter.defaultProps = {\n  chips: [],\n  showToolbarItem: true\n};","map":{"version":3,"sources":["../../../../src/components/Toolbar/ToolbarFilter.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ToolbarItem } from './ToolbarItem';\nimport { ChipGroup, Chip } from '../ChipGroup';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nexport class ToolbarFilter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isMounted: false\n        };\n    }\n    componentDidMount() {\n        const { categoryName, chips } = this.props;\n        this.context.updateNumberFilters(typeof categoryName === 'string' ? categoryName : categoryName.name, chips.length);\n        this.setState({ isMounted: true });\n    }\n    componentDidUpdate() {\n        const { categoryName, chips } = this.props;\n        this.context.updateNumberFilters(typeof categoryName === 'string' ? categoryName : categoryName.name, chips.length);\n    }\n    render() {\n        const _a = this.props, { children, chips, deleteChipGroup, deleteChip, categoryName, showToolbarItem } = _a, props = __rest(_a, [\"children\", \"chips\", \"deleteChipGroup\", \"deleteChip\", \"categoryName\", \"showToolbarItem\"]);\n        const { isExpanded, chipGroupContentRef } = this.context;\n        const categoryKey = typeof categoryName !== 'string' && categoryName.hasOwnProperty('key')\n            ? categoryName.key\n            : categoryName.toString();\n        const chipGroup = chips.length ? (React.createElement(ToolbarItem, { variant: \"chip-group\" },\n            React.createElement(ChipGroup, { key: categoryKey, categoryName: typeof categoryName === 'string' ? categoryName : categoryName.name, isClosable: deleteChipGroup !== undefined, onClick: () => deleteChipGroup(categoryName) }, chips.map(chip => typeof chip === 'string' ? (React.createElement(Chip, { key: chip, onClick: () => deleteChip(categoryKey, chip) }, chip)) : (React.createElement(Chip, { key: chip.key, onClick: () => deleteChip(categoryKey, chip) }, chip.node)))))) : null;\n        if (!isExpanded && this.state.isMounted) {\n            return (React.createElement(React.Fragment, null,\n                showToolbarItem && React.createElement(ToolbarItem, Object.assign({}, props), children),\n                ReactDOM.createPortal(chipGroup, chipGroupContentRef.current.firstElementChild)));\n        }\n        return (React.createElement(ToolbarContentContext.Consumer, null, ({ chipContainerRef }) => (React.createElement(React.Fragment, null,\n            showToolbarItem && React.createElement(ToolbarItem, Object.assign({}, props), children),\n            chipContainerRef.current && ReactDOM.createPortal(chipGroup, chipContainerRef.current)))));\n    }\n}\nToolbarFilter.displayName = 'ToolbarFilter';\nToolbarFilter.contextType = ToolbarContext;\nToolbarFilter.defaultProps = {\n    chips: [],\n    showToolbarItem: true\n};\n//# sourceMappingURL=ToolbarFilter.js.map"]},"metadata":{},"sourceType":"module"}