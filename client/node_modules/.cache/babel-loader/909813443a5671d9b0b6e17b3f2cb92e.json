{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/ToggleGroup/toggle-group';\nimport ToggleGroupContext from './ToggleGroupContext';\nimport { Divider } from '../Divider';\nexport var ToggleGroupVariant;\n\n(function (ToggleGroupVariant) {\n  ToggleGroupVariant[\"default\"] = \"default\";\n  ToggleGroupVariant[\"light\"] = \"light\";\n})(ToggleGroupVariant || (ToggleGroupVariant = {}));\n\nexport const ToggleGroup = _a => {\n  var {\n    className,\n    children,\n    variant = ToggleGroupVariant.default,\n    'aria-label': ariaLabel\n  } = _a,\n      props = __rest(_a, [\"className\", \"children\", \"variant\", 'aria-label']);\n\n  const toggleGroupItemList = [];\n  const length = React.Children.count(children);\n  React.Children.forEach(children, (child, index) => {\n    toggleGroupItemList.push(child);\n    const dividerKey = `${index} divider`;\n\n    if (index !== length - 1) {\n      toggleGroupItemList.push(React.createElement(Divider, {\n        key: dividerKey,\n        isVertical: true,\n        component: \"div\"\n      }));\n    }\n  });\n  return React.createElement(ToggleGroupContext.Provider, {\n    value: {\n      variant\n    }\n  }, React.createElement(\"div\", Object.assign({\n    className: css(styles.toggleGroup, className),\n    role: \"group\",\n    \"aria-label\": ariaLabel\n  }, props), toggleGroupItemList));\n};\nToggleGroup.displayName = 'ToggleGroup';","map":{"version":3,"sources":["../../../../src/components/ToggleGroup/ToggleGroup.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,kEAAnB;AACA,OAAO,kBAAP,MAA+B,sBAA/B;AACA,SAAS,OAAT,QAAwB,YAAxB;AAEA,OAAA,IAAY,kBAAZ;;AAAA,CAAA,UAAY,kBAAZ,EAA8B;AAC5B,EAAA,kBAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA,EAAA,kBAAA,CAAA,OAAA,CAAA,GAAA,OAAA;AACD,CAHD,EAAY,kBAAkB,KAAlB,kBAAkB,GAAA,EAAA,CAA9B;;AAgBA,OAAO,MAAM,WAAW,GAA+C,EAAD,IAM/C;MANgD;AACrE,IAAA,SADqE;AAErE,IAAA,QAFqE;AAGrE,IAAA,OAAO,GAAG,kBAAkB,CAAC,OAHwC;AAIrE,kBAAc;AAJuD,MAI9C,E;MACpB,KAAK,GAAA,MAAA,CAAA,EAAA,EAL6D,CAAA,WAAA,EAAA,UAAA,EAAA,SAAA,EAAA,YAAA,CAK7D,C;;AAER,QAAM,mBAAmB,GAAG,EAA5B;AACA,QAAM,MAAM,GAAG,KAAK,CAAC,QAAN,CAAe,KAAf,CAAqB,QAArB,CAAf;AACA,EAAA,KAAK,CAAC,QAAN,CAAe,OAAf,CAAuB,QAAvB,EAAiC,CAAC,KAAD,EAAQ,KAAR,KAAiB;AAChD,IAAA,mBAAmB,CAAC,IAApB,CAAyB,KAAzB;AACA,UAAM,UAAU,GAAG,GAAG,KAAK,UAA3B;;AACA,QAAI,KAAK,KAAK,MAAM,GAAG,CAAvB,EAA0B;AACxB,MAAA,mBAAmB,CAAC,IAApB,CAAyB,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ;AAAC,QAAA,GAAG,EAAE,UAAN;AAAkB,QAAA,UAAU,EAAA,IAA5B;AAA6B,QAAA,SAAS,EAAC;AAAvC,OAAR,CAAzB;AACD;AACF,GAND;AAQA,SACE,KAAA,CAAA,aAAA,CAAC,kBAAkB,CAAC,QAApB,EAA4B;AAAC,IAAA,KAAK,EAAE;AAAE,MAAA;AAAF;AAAR,GAA5B,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AAAK,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,WAAR,EAAqB,SAArB,CAAnB;AAAoD,IAAA,IAAI,EAAC,OAAzD;AAAgE,kBAAa;AAA7E,GAAA,EAA4F,KAA5F,CAAA,EACG,mBADH,CADF,CADF;AAOD,CAxBM;AAyBP,WAAW,CAAC,WAAZ,GAA0B,aAA1B","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/ToggleGroup/toggle-group';\nimport ToggleGroupContext from './ToggleGroupContext';\nimport { Divider } from '../Divider';\nexport var ToggleGroupVariant;\n(function (ToggleGroupVariant) {\n    ToggleGroupVariant[\"default\"] = \"default\";\n    ToggleGroupVariant[\"light\"] = \"light\";\n})(ToggleGroupVariant || (ToggleGroupVariant = {}));\nexport const ToggleGroup = (_a) => {\n    var { className, children, variant = ToggleGroupVariant.default, 'aria-label': ariaLabel } = _a, props = __rest(_a, [\"className\", \"children\", \"variant\", 'aria-label']);\n    const toggleGroupItemList = [];\n    const length = React.Children.count(children);\n    React.Children.forEach(children, (child, index) => {\n        toggleGroupItemList.push(child);\n        const dividerKey = `${index} divider`;\n        if (index !== length - 1) {\n            toggleGroupItemList.push(React.createElement(Divider, { key: dividerKey, isVertical: true, component: \"div\" }));\n        }\n    });\n    return (React.createElement(ToggleGroupContext.Provider, { value: { variant } },\n        React.createElement(\"div\", Object.assign({ className: css(styles.toggleGroup, className), role: \"group\", \"aria-label\": ariaLabel }, props), toggleGroupItemList)));\n};\nToggleGroup.displayName = 'ToggleGroup';\n//# sourceMappingURL=ToggleGroup.js.map"]},"metadata":{},"sourceType":"module"}