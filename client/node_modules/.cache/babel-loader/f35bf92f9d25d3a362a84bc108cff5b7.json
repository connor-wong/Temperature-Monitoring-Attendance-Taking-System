{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Tooltip } from '../Tooltip';\nimport TimesIcon from \"@patternfly/react-icons/dist/esm/icons/times-icon\";\nimport styles from '@patternfly/react-styles/css/components/Chip/chip';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { getOUIAProps, getDefaultOUIAId } from '../../helpers';\nexport class Chip extends React.Component {\n  constructor(props) {\n    super(props);\n    this.span = React.createRef();\n\n    this.renderOverflowChip = () => {\n      const {\n        children,\n        className,\n        onClick,\n        ouiaId\n      } = this.props;\n      const Component = this.props.component;\n      return React.createElement(Component, Object.assign({\n        onClick: onClick,\n        className: css(styles.chip, styles.modifiers.overflow, className)\n      }, this.props.component === 'button' ? {\n        type: 'button'\n      } : {}, getOUIAProps('OverflowChip', ouiaId !== undefined ? ouiaId : this.state.ouiaStateId)), React.createElement(\"span\", {\n        className: css(styles.chipText)\n      }, children));\n    };\n\n    this.renderChip = randomId => {\n      const {\n        children,\n        tooltipPosition\n      } = this.props;\n\n      if (this.state.isTooltipVisible) {\n        return React.createElement(Tooltip, {\n          position: tooltipPosition,\n          content: children\n        }, this.renderInnerChip(randomId));\n      }\n\n      return this.renderInnerChip(randomId);\n    };\n\n    this.state = {\n      isTooltipVisible: false,\n      ouiaStateId: getDefaultOUIAId(Chip.displayName)\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      isTooltipVisible: Boolean(this.span.current && this.span.current.offsetWidth < this.span.current.scrollWidth)\n    });\n  }\n\n  renderInnerChip(id) {\n    const {\n      children,\n      className,\n      onClick,\n      closeBtnAriaLabel,\n      isReadOnly,\n      component,\n      ouiaId\n    } = this.props;\n    const Component = component;\n    return React.createElement(Component, Object.assign({\n      className: css(styles.chip, className)\n    }, this.state.isTooltipVisible && {\n      tabIndex: 0\n    }, getOUIAProps(Chip.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId)), React.createElement(\"span\", {\n      ref: this.span,\n      className: css(styles.chipText),\n      id: id\n    }, children), !isReadOnly && React.createElement(Button, {\n      onClick: onClick,\n      variant: \"plain\",\n      \"aria-label\": closeBtnAriaLabel,\n      id: `remove_${id}`,\n      \"aria-labelledby\": `remove_${id} ${id}`,\n      ouiaId: ouiaId || closeBtnAriaLabel\n    }, React.createElement(TimesIcon, {\n      \"aria-hidden\": \"true\"\n    })));\n  }\n\n  render() {\n    const {\n      isOverflowChip\n    } = this.props;\n    return React.createElement(GenerateId, null, randomId => isOverflowChip ? this.renderOverflowChip() : this.renderChip(this.props.id || randomId));\n  }\n\n}\nChip.displayName = 'Chip';\nChip.defaultProps = {\n  closeBtnAriaLabel: 'close',\n  className: '',\n  isOverflowChip: false,\n  isReadOnly: false,\n  tooltipPosition: 'top',\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onClick: _e => undefined,\n  component: 'div'\n};","map":{"version":3,"sources":["../../../../src/components/ChipGroup/Chip.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Tooltip } from '../Tooltip';\nimport TimesIcon from \"@patternfly/react-icons/dist/esm/icons/times-icon\";\nimport styles from '@patternfly/react-styles/css/components/Chip/chip';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { getOUIAProps, getDefaultOUIAId } from '../../helpers';\nexport class Chip extends React.Component {\n    constructor(props) {\n        super(props);\n        this.span = React.createRef();\n        this.renderOverflowChip = () => {\n            const { children, className, onClick, ouiaId } = this.props;\n            const Component = this.props.component;\n            return (React.createElement(Component, Object.assign({ onClick: onClick, className: css(styles.chip, styles.modifiers.overflow, className) }, (this.props.component === 'button' ? { type: 'button' } : {}), getOUIAProps('OverflowChip', ouiaId !== undefined ? ouiaId : this.state.ouiaStateId)),\n                React.createElement(\"span\", { className: css(styles.chipText) }, children)));\n        };\n        this.renderChip = (randomId) => {\n            const { children, tooltipPosition } = this.props;\n            if (this.state.isTooltipVisible) {\n                return (React.createElement(Tooltip, { position: tooltipPosition, content: children }, this.renderInnerChip(randomId)));\n            }\n            return this.renderInnerChip(randomId);\n        };\n        this.state = {\n            isTooltipVisible: false,\n            ouiaStateId: getDefaultOUIAId(Chip.displayName)\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            isTooltipVisible: Boolean(this.span.current && this.span.current.offsetWidth < this.span.current.scrollWidth)\n        });\n    }\n    renderInnerChip(id) {\n        const { children, className, onClick, closeBtnAriaLabel, isReadOnly, component, ouiaId } = this.props;\n        const Component = component;\n        return (React.createElement(Component, Object.assign({ className: css(styles.chip, className) }, (this.state.isTooltipVisible && { tabIndex: 0 }), getOUIAProps(Chip.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId)),\n            React.createElement(\"span\", { ref: this.span, className: css(styles.chipText), id: id }, children),\n            !isReadOnly && (React.createElement(Button, { onClick: onClick, variant: \"plain\", \"aria-label\": closeBtnAriaLabel, id: `remove_${id}`, \"aria-labelledby\": `remove_${id} ${id}`, ouiaId: ouiaId || closeBtnAriaLabel },\n                React.createElement(TimesIcon, { \"aria-hidden\": \"true\" })))));\n    }\n    render() {\n        const { isOverflowChip } = this.props;\n        return (React.createElement(GenerateId, null, randomId => (isOverflowChip ? this.renderOverflowChip() : this.renderChip(this.props.id || randomId))));\n    }\n}\nChip.displayName = 'Chip';\nChip.defaultProps = {\n    closeBtnAriaLabel: 'close',\n    className: '',\n    isOverflowChip: false,\n    isReadOnly: false,\n    tooltipPosition: 'top',\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick: (_e) => undefined,\n    component: 'div'\n};\n//# sourceMappingURL=Chip.js.map"]},"metadata":{},"sourceType":"module"}