{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport CaretDownIcon from \"@patternfly/react-icons/dist/esm/icons/caret-down-icon\";\nimport { Toggle } from './Toggle';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { css } from '@patternfly/react-styles';\nimport { useOUIAProps } from '../../helpers';\nexport const DropdownToggle = _a => {\n  var {\n    id = '',\n    children = null,\n    className = '',\n    isOpen = false,\n    parentRef = null,\n    getMenuRef = null,\n    isDisabled = false,\n    isPlain = false,\n    isPrimary = false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isActive = false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onToggle = _isOpen => undefined,\n    icon = null,\n    toggleIndicator: ToggleIndicator = CaretDownIcon,\n    splitButtonItems,\n    splitButtonVariant = 'checkbox',\n    'aria-haspopup': ariaHasPopup,\n    ouiaId,\n    ouiaSafe,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref\n  } = _a,\n      // Types of Ref are different for React.FC vs React.Component\n  props = __rest(_a, [\"id\", \"children\", \"className\", \"isOpen\", \"parentRef\", \"getMenuRef\", \"isDisabled\", \"isPlain\", \"isPrimary\", \"isActive\", \"onToggle\", \"icon\", \"toggleIndicator\", \"splitButtonItems\", \"splitButtonVariant\", 'aria-haspopup', \"ouiaId\", \"ouiaSafe\", \"ref\"]);\n\n  const ouiaProps = useOUIAProps(DropdownToggle.displayName, ouiaId, ouiaSafe);\n  const toggle = React.createElement(DropdownContext.Consumer, null, ({\n    toggleTextClass,\n    toggleIndicatorClass,\n    toggleIconClass\n  }) => React.createElement(Toggle, Object.assign({}, props, {\n    id: id,\n    className: className,\n    isOpen: isOpen,\n    parentRef: parentRef,\n    getMenuRef: getMenuRef,\n    isActive: isActive,\n    isDisabled: isDisabled,\n    isPlain: isPlain,\n    isPrimary: isPrimary,\n    onToggle: onToggle,\n    \"aria-haspopup\": ariaHasPopup\n  }, ouiaProps, splitButtonItems && {\n    isSplitButton: true,\n    'aria-label': props['aria-label'] || 'Select'\n  }), icon && React.createElement(\"span\", {\n    className: css(toggleIconClass)\n  }, icon), children && React.createElement(\"span\", {\n    className: ToggleIndicator && css(toggleTextClass)\n  }, children), ToggleIndicator && React.createElement(\"span\", {\n    className: css(!splitButtonItems && toggleIndicatorClass)\n  }, React.createElement(ToggleIndicator, null))));\n\n  if (splitButtonItems) {\n    return React.createElement(\"div\", {\n      className: css(styles.dropdownToggle, styles.modifiers.splitButton, splitButtonVariant === 'action' && styles.modifiers.action, isDisabled && styles.modifiers.disabled)\n    }, splitButtonItems, toggle);\n  }\n\n  return toggle;\n};\nDropdownToggle.displayName = 'DropdownToggle';","map":{"version":3,"sources":["../../../../src/components/Dropdown/DropdownToggle.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport CaretDownIcon from \"@patternfly/react-icons/dist/esm/icons/caret-down-icon\";\nimport { Toggle } from './Toggle';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { css } from '@patternfly/react-styles';\nimport { useOUIAProps } from '../../helpers';\nexport const DropdownToggle = (_a) => {\n    var { id = '', children = null, className = '', isOpen = false, parentRef = null, getMenuRef = null, isDisabled = false, isPlain = false, isPrimary = false, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isActive = false, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onToggle = (_isOpen) => undefined, icon = null, toggleIndicator: ToggleIndicator = CaretDownIcon, splitButtonItems, splitButtonVariant = 'checkbox', 'aria-haspopup': ariaHasPopup, ouiaId, ouiaSafe, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref } = _a, // Types of Ref are different for React.FC vs React.Component\n    props = __rest(_a, [\"id\", \"children\", \"className\", \"isOpen\", \"parentRef\", \"getMenuRef\", \"isDisabled\", \"isPlain\", \"isPrimary\", \"isActive\", \"onToggle\", \"icon\", \"toggleIndicator\", \"splitButtonItems\", \"splitButtonVariant\", 'aria-haspopup', \"ouiaId\", \"ouiaSafe\", \"ref\"]);\n    const ouiaProps = useOUIAProps(DropdownToggle.displayName, ouiaId, ouiaSafe);\n    const toggle = (React.createElement(DropdownContext.Consumer, null, ({ toggleTextClass, toggleIndicatorClass, toggleIconClass }) => (React.createElement(Toggle, Object.assign({}, props, { id: id, className: className, isOpen: isOpen, parentRef: parentRef, getMenuRef: getMenuRef, isActive: isActive, isDisabled: isDisabled, isPlain: isPlain, isPrimary: isPrimary, onToggle: onToggle, \"aria-haspopup\": ariaHasPopup }, ouiaProps, (splitButtonItems && { isSplitButton: true, 'aria-label': props['aria-label'] || 'Select' })),\n        icon && React.createElement(\"span\", { className: css(toggleIconClass) }, icon),\n        children && React.createElement(\"span\", { className: ToggleIndicator && css(toggleTextClass) }, children),\n        ToggleIndicator && (React.createElement(\"span\", { className: css(!splitButtonItems && toggleIndicatorClass) },\n            React.createElement(ToggleIndicator, null)))))));\n    if (splitButtonItems) {\n        return (React.createElement(\"div\", { className: css(styles.dropdownToggle, styles.modifiers.splitButton, splitButtonVariant === 'action' && styles.modifiers.action, isDisabled && styles.modifiers.disabled) },\n            splitButtonItems,\n            toggle));\n    }\n    return toggle;\n};\nDropdownToggle.displayName = 'DropdownToggle';\n//# sourceMappingURL=DropdownToggle.js.map"]},"metadata":{},"sourceType":"module"}