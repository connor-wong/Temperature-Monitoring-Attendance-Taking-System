{"ast":null,"code":"export var fileReaderType;\n\n(function (fileReaderType) {\n  fileReaderType[\"text\"] = \"text\";\n  fileReaderType[\"dataURL\"] = \"dataURL\";\n})(fileReaderType || (fileReaderType = {}));\n/**\n * Read a file using the FileReader API, either as a plain text string or as a DataURL string.\n * Returns a promise which will resolve with the file contents as a string or reject with a DOMException.\n *\n * @param {File} fileHandle - File object to read\n * @param {fileReaderType} type - How to read it\n */\n\n\nexport function readFile(fileHandle, type) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = () => resolve(reader.result);\n\n    reader.onerror = () => reject(reader.error);\n\n    if (type === fileReaderType.text) {\n      reader.readAsText(fileHandle);\n    } else if (type === fileReaderType.dataURL) {\n      reader.readAsDataURL(fileHandle);\n    } else {\n      reject('unknown type');\n    }\n  });\n}","map":{"version":3,"sources":["../../../src/helpers/fileUtils.ts"],"names":[],"mappings":"AAAA,OAAA,IAAY,cAAZ;;AAAA,CAAA,UAAY,cAAZ,EAA0B;AACxB,EAAA,cAAA,CAAA,MAAA,CAAA,GAAA,MAAA;AACA,EAAA,cAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACD,CAHD,EAAY,cAAc,KAAd,cAAc,GAAA,EAAA,CAA1B;AAKA;;;;;;AAMG;;;AACH,OAAM,SAAU,QAAV,CAAmB,UAAnB,EAAqC,IAArC,EAAyD;AAC7D,SAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AACrC,UAAM,MAAM,GAAG,IAAI,UAAJ,EAAf;;AACA,IAAA,MAAM,CAAC,MAAP,GAAgB,MAAM,OAAO,CAAC,MAAM,CAAC,MAAR,CAA7B;;AACA,IAAA,MAAM,CAAC,OAAP,GAAiB,MAAM,MAAM,CAAC,MAAM,CAAC,KAAR,CAA7B;;AACA,QAAI,IAAI,KAAK,cAAc,CAAC,IAA5B,EAAkC;AAChC,MAAA,MAAM,CAAC,UAAP,CAAkB,UAAlB;AACD,KAFD,MAEO,IAAI,IAAI,KAAK,cAAc,CAAC,OAA5B,EAAqC;AAC1C,MAAA,MAAM,CAAC,aAAP,CAAqB,UAArB;AACD,KAFM,MAEA;AACL,MAAA,MAAM,CAAC,cAAD,CAAN;AACD;AACF,GAXM,CAAP;AAYD","sourceRoot":"","sourcesContent":["export var fileReaderType;\n(function (fileReaderType) {\n    fileReaderType[\"text\"] = \"text\";\n    fileReaderType[\"dataURL\"] = \"dataURL\";\n})(fileReaderType || (fileReaderType = {}));\n/**\n * Read a file using the FileReader API, either as a plain text string or as a DataURL string.\n * Returns a promise which will resolve with the file contents as a string or reject with a DOMException.\n *\n * @param {File} fileHandle - File object to read\n * @param {fileReaderType} type - How to read it\n */\nexport function readFile(fileHandle, type) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = () => reject(reader.error);\n        if (type === fileReaderType.text) {\n            reader.readAsText(fileHandle);\n        }\n        else if (type === fileReaderType.dataURL) {\n            reader.readAsDataURL(fileHandle);\n        }\n        else {\n            reject('unknown type');\n        }\n    });\n}\n//# sourceMappingURL=fileUtils.js.map"]},"metadata":{},"sourceType":"module"}