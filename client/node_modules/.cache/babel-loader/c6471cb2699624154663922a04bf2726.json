{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarGroup } from './ToolbarGroup';\nimport { ToolbarItem } from './ToolbarItem';\nimport { Button } from '../Button';\nimport { ToolbarContext } from './ToolbarUtils';\nexport class ToolbarExpandableContent extends React.Component {\n  render() {\n    const _a = this.props,\n          {\n      className,\n      expandableContentRef,\n      chipContainerRef,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isExpanded,\n      clearAllFilters,\n      clearFiltersButtonText,\n      showClearFiltersButton\n    } = _a,\n          props = __rest(_a, [\"className\", \"expandableContentRef\", \"chipContainerRef\", \"isExpanded\", \"clearAllFilters\", \"clearFiltersButtonText\", \"showClearFiltersButton\"]);\n\n    const {\n      numberOfFilters\n    } = this.context;\n\n    const clearChipGroups = () => {\n      clearAllFilters();\n    };\n\n    return React.createElement(\"div\", Object.assign({\n      className: css(styles.toolbarExpandableContent, className),\n      ref: expandableContentRef\n    }, props), React.createElement(ToolbarGroup, null), numberOfFilters > 0 && React.createElement(ToolbarGroup, {\n      className: styles.modifiers.chipContainer\n    }, React.createElement(ToolbarGroup, {\n      ref: chipContainerRef\n    }), showClearFiltersButton && React.createElement(ToolbarItem, null, React.createElement(Button, {\n      variant: \"link\",\n      onClick: clearChipGroups,\n      isInline: true\n    }, clearFiltersButtonText))));\n  }\n\n}\nToolbarExpandableContent.displayName = 'ToolbarExpandableContent';\nToolbarExpandableContent.contextType = ToolbarContext;\nToolbarExpandableContent.defaultProps = {\n  isExpanded: false,\n  clearFiltersButtonText: 'Clear all filters'\n};","map":{"version":3,"sources":["../../../../src/components/Toolbar/ToolbarExpandableContent.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,yDAAnB;AACA,SAAS,GAAT,QAAoB,0BAApB;AAGA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,WAAT,QAA4B,eAA5B;AACA,SAAS,MAAT,QAAuB,WAAvB;AACA,SAAS,cAAT,QAA+B,gBAA/B;AAoBA,OAAM,MAAO,wBAAP,SAAwC,KAAK,CAAC,SAA9C,CAAsF;AAQ1F,EAAA,MAAM,GAAA;AACJ,UAAM,EAAA,GAUF,KAAK,KAVT;AAAA,UAAM;AACJ,MAAA,SADI;AAEJ,MAAA,oBAFI;AAGJ,MAAA,gBAHI;AAIJ;AACA,MAAA,UALI;AAMJ,MAAA,eANI;AAOJ,MAAA,sBAPI;AAQJ,MAAA;AARI,QAQkB,EARxB;AAAA,UASK,KAAK,GAAA,MAAA,CAAA,EAAA,EATJ,CAAA,WAAA,EAAA,sBAAA,EAAA,kBAAA,EAAA,YAAA,EAAA,iBAAA,EAAA,wBAAA,EAAA,wBAAA,CASI,CATV;;AAWA,UAAM;AAAE,MAAA;AAAF,QAAsB,KAAK,OAAjC;;AAEA,UAAM,eAAe,GAAG,MAAK;AAC3B,MAAA,eAAe;AAChB,KAFD;;AAIA,WACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AAAK,MAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,wBAAR,EAAkC,SAAlC,CAAnB;AAAiE,MAAA,GAAG,EAAE;AAAtE,KAAA,EAAgG,KAAhG,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,CADF,EAEG,eAAe,GAAG,CAAlB,IACC,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AAAC,MAAA,SAAS,EAAE,MAAM,CAAC,SAAP,CAAiB;AAA7B,KAAb,EACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AAAC,MAAA,GAAG,EAAE;AAAN,KAAb,CADF,EAEG,sBAAsB,IACrB,KAAA,CAAA,aAAA,CAAC,WAAD,EAAY,IAAZ,EACE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO;AAAC,MAAA,OAAO,EAAC,MAAT;AAAgB,MAAA,OAAO,EAAE,eAAzB;AAA0C,MAAA,QAAQ,EAAA;AAAlD,KAAP,EACG,sBADH,CADF,CAHJ,CAHJ,CADF;AAiBD;;AA3CyF;AACnF,wBAAA,CAAA,WAAA,GAAc,0BAAd;AACA,wBAAA,CAAA,WAAA,GAAmB,cAAnB;AACA,wBAAA,CAAA,YAAA,GAA4D;AACjE,EAAA,UAAU,EAAE,KADqD;AAEjE,EAAA,sBAAsB,EAAE;AAFyC,CAA5D","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarGroup } from './ToolbarGroup';\nimport { ToolbarItem } from './ToolbarItem';\nimport { Button } from '../Button';\nimport { ToolbarContext } from './ToolbarUtils';\nexport class ToolbarExpandableContent extends React.Component {\n    render() {\n        const _a = this.props, { className, expandableContentRef, chipContainerRef, \n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        isExpanded, clearAllFilters, clearFiltersButtonText, showClearFiltersButton } = _a, props = __rest(_a, [\"className\", \"expandableContentRef\", \"chipContainerRef\", \"isExpanded\", \"clearAllFilters\", \"clearFiltersButtonText\", \"showClearFiltersButton\"]);\n        const { numberOfFilters } = this.context;\n        const clearChipGroups = () => {\n            clearAllFilters();\n        };\n        return (React.createElement(\"div\", Object.assign({ className: css(styles.toolbarExpandableContent, className), ref: expandableContentRef }, props),\n            React.createElement(ToolbarGroup, null),\n            numberOfFilters > 0 && (React.createElement(ToolbarGroup, { className: styles.modifiers.chipContainer },\n                React.createElement(ToolbarGroup, { ref: chipContainerRef }),\n                showClearFiltersButton && (React.createElement(ToolbarItem, null,\n                    React.createElement(Button, { variant: \"link\", onClick: clearChipGroups, isInline: true }, clearFiltersButtonText)))))));\n    }\n}\nToolbarExpandableContent.displayName = 'ToolbarExpandableContent';\nToolbarExpandableContent.contextType = ToolbarContext;\nToolbarExpandableContent.defaultProps = {\n    isExpanded: false,\n    clearFiltersButtonText: 'Clear all filters'\n};\n//# sourceMappingURL=ToolbarExpandableContent.js.map"]},"metadata":{},"sourceType":"module"}