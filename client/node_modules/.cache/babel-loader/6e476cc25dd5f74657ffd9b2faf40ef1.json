{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Nav/nav';\nimport { css } from '@patternfly/react-styles';\nimport AngleLeftIcon from \"@patternfly/react-icons/dist/esm/icons/angle-left-icon\";\nimport AngleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-right-icon\";\nimport { isElementInView } from '../../helpers/util';\nimport { NavContext } from './Nav';\nimport { PageSidebarContext } from '../Page/PageSidebar';\nexport class NavList extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      scrollViewAtStart: false,\n      scrollViewAtEnd: false\n    };\n    this.navList = React.createRef();\n\n    this.handleScrollButtons = () => {\n      const container = this.navList.current;\n\n      if (container) {\n        // check if it elements are in view\n        const scrollViewAtStart = isElementInView(container, container.firstChild, false);\n        const scrollViewAtEnd = isElementInView(container, container.lastChild, false);\n        this.setState({\n          scrollViewAtStart,\n          scrollViewAtEnd\n        });\n        this.context.updateIsScrollable(!scrollViewAtStart || !scrollViewAtEnd);\n      }\n    };\n\n    this.scrollLeft = () => {\n      // find first Element that is fully in view on the left, then scroll to the element before it\n      const container = this.navList.current;\n\n      if (container) {\n        const childrenArr = Array.from(container.children);\n        let firstElementInView;\n        let lastElementOutOfView;\n\n        for (let i = 0; i < childrenArr.length && !firstElementInView; i++) {\n          if (isElementInView(container, childrenArr[i], false)) {\n            firstElementInView = childrenArr[i];\n            lastElementOutOfView = childrenArr[i - 1];\n          }\n        }\n\n        if (lastElementOutOfView) {\n          container.scrollLeft -= lastElementOutOfView.scrollWidth;\n        }\n\n        this.handleScrollButtons();\n      }\n    };\n\n    this.scrollRight = () => {\n      // find last Element that is fully in view on the right, then scroll to the element after it\n      const container = this.navList.current;\n\n      if (container) {\n        const childrenArr = Array.from(container.children);\n        let lastElementInView;\n        let firstElementOutOfView;\n\n        for (let i = childrenArr.length - 1; i >= 0 && !lastElementInView; i--) {\n          if (isElementInView(container, childrenArr[i], false)) {\n            lastElementInView = childrenArr[i];\n            firstElementOutOfView = childrenArr[i + 1];\n          }\n        }\n\n        if (firstElementOutOfView) {\n          container.scrollLeft += firstElementOutOfView.scrollWidth;\n        }\n\n        this.handleScrollButtons();\n      }\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.handleScrollButtons, false);\n    this.handleScrollButtons();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleScrollButtons, false);\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      children,\n      className,\n      ariaLeftScroll,\n      ariaRightScroll\n    } = _a,\n          props = __rest(_a, [\"children\", \"className\", \"ariaLeftScroll\", \"ariaRightScroll\"]);\n\n    const {\n      scrollViewAtStart,\n      scrollViewAtEnd\n    } = this.state;\n    return React.createElement(NavContext.Consumer, null, ({\n      isHorizontal\n    }) => React.createElement(PageSidebarContext.Consumer, null, ({\n      isNavOpen\n    }) => React.createElement(React.Fragment, null, isHorizontal && React.createElement(\"button\", {\n      className: css(styles.navScrollButton),\n      \"aria-label\": ariaLeftScroll,\n      onClick: this.scrollLeft,\n      disabled: scrollViewAtStart,\n      tabIndex: isNavOpen ? null : -1\n    }, React.createElement(AngleLeftIcon, null)), React.createElement(\"ul\", Object.assign({\n      ref: this.navList,\n      className: css(styles.navList, className),\n      onScroll: this.handleScrollButtons\n    }, props), children), isHorizontal && React.createElement(\"button\", {\n      className: css(styles.navScrollButton),\n      \"aria-label\": ariaRightScroll,\n      onClick: this.scrollRight,\n      disabled: scrollViewAtEnd,\n      tabIndex: isNavOpen ? null : -1\n    }, React.createElement(AngleRightIcon, null)))));\n  }\n\n}\nNavList.displayName = 'NavList';\nNavList.contextType = NavContext;\nNavList.defaultProps = {\n  ariaLeftScroll: 'Scroll left',\n  ariaRightScroll: 'Scroll right'\n};","map":{"version":3,"sources":["../../../../src/components/Nav/NavList.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Nav/nav';\nimport { css } from '@patternfly/react-styles';\nimport AngleLeftIcon from \"@patternfly/react-icons/dist/esm/icons/angle-left-icon\";\nimport AngleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-right-icon\";\nimport { isElementInView } from '../../helpers/util';\nimport { NavContext } from './Nav';\nimport { PageSidebarContext } from '../Page/PageSidebar';\nexport class NavList extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            scrollViewAtStart: false,\n            scrollViewAtEnd: false\n        };\n        this.navList = React.createRef();\n        this.handleScrollButtons = () => {\n            const container = this.navList.current;\n            if (container) {\n                // check if it elements are in view\n                const scrollViewAtStart = isElementInView(container, container.firstChild, false);\n                const scrollViewAtEnd = isElementInView(container, container.lastChild, false);\n                this.setState({\n                    scrollViewAtStart,\n                    scrollViewAtEnd\n                });\n                this.context.updateIsScrollable(!scrollViewAtStart || !scrollViewAtEnd);\n            }\n        };\n        this.scrollLeft = () => {\n            // find first Element that is fully in view on the left, then scroll to the element before it\n            const container = this.navList.current;\n            if (container) {\n                const childrenArr = Array.from(container.children);\n                let firstElementInView;\n                let lastElementOutOfView;\n                for (let i = 0; i < childrenArr.length && !firstElementInView; i++) {\n                    if (isElementInView(container, childrenArr[i], false)) {\n                        firstElementInView = childrenArr[i];\n                        lastElementOutOfView = childrenArr[i - 1];\n                    }\n                }\n                if (lastElementOutOfView) {\n                    container.scrollLeft -= lastElementOutOfView.scrollWidth;\n                }\n                this.handleScrollButtons();\n            }\n        };\n        this.scrollRight = () => {\n            // find last Element that is fully in view on the right, then scroll to the element after it\n            const container = this.navList.current;\n            if (container) {\n                const childrenArr = Array.from(container.children);\n                let lastElementInView;\n                let firstElementOutOfView;\n                for (let i = childrenArr.length - 1; i >= 0 && !lastElementInView; i--) {\n                    if (isElementInView(container, childrenArr[i], false)) {\n                        lastElementInView = childrenArr[i];\n                        firstElementOutOfView = childrenArr[i + 1];\n                    }\n                }\n                if (firstElementOutOfView) {\n                    container.scrollLeft += firstElementOutOfView.scrollWidth;\n                }\n                this.handleScrollButtons();\n            }\n        };\n    }\n    componentDidMount() {\n        window.addEventListener('resize', this.handleScrollButtons, false);\n        this.handleScrollButtons();\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleScrollButtons, false);\n    }\n    render() {\n        const _a = this.props, { children, className, ariaLeftScroll, ariaRightScroll } = _a, props = __rest(_a, [\"children\", \"className\", \"ariaLeftScroll\", \"ariaRightScroll\"]);\n        const { scrollViewAtStart, scrollViewAtEnd } = this.state;\n        return (React.createElement(NavContext.Consumer, null, ({ isHorizontal }) => (React.createElement(PageSidebarContext.Consumer, null, ({ isNavOpen }) => (React.createElement(React.Fragment, null,\n            isHorizontal && (React.createElement(\"button\", { className: css(styles.navScrollButton), \"aria-label\": ariaLeftScroll, onClick: this.scrollLeft, disabled: scrollViewAtStart, tabIndex: isNavOpen ? null : -1 },\n                React.createElement(AngleLeftIcon, null))),\n            React.createElement(\"ul\", Object.assign({ ref: this.navList, className: css(styles.navList, className), onScroll: this.handleScrollButtons }, props), children),\n            isHorizontal && (React.createElement(\"button\", { className: css(styles.navScrollButton), \"aria-label\": ariaRightScroll, onClick: this.scrollRight, disabled: scrollViewAtEnd, tabIndex: isNavOpen ? null : -1 },\n                React.createElement(AngleRightIcon, null)))))))));\n    }\n}\nNavList.displayName = 'NavList';\nNavList.contextType = NavContext;\nNavList.defaultProps = {\n    ariaLeftScroll: 'Scroll left',\n    ariaRightScroll: 'Scroll right'\n};\n//# sourceMappingURL=NavList.js.map"]},"metadata":{},"sourceType":"module"}