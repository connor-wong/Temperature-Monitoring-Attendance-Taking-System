{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ExpandableSection/expandable-section';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-right-icon\";\nexport const ExpandableSectionToggle = _a => {\n  var {\n    children,\n    className = '',\n    isExpanded = false,\n    onToggle,\n    contentId,\n    direction = 'down'\n  } = _a,\n      props = __rest(_a, [\"children\", \"className\", \"isExpanded\", \"onToggle\", \"contentId\", \"direction\"]);\n\n  return React.createElement(\"div\", Object.assign({}, props, {\n    className: css(styles.expandableSection, isExpanded && styles.modifiers.expanded, styles.modifiers.detached, className)\n  }), React.createElement(\"button\", {\n    className: css(styles.expandableSectionToggle),\n    type: \"button\",\n    \"aria-expanded\": isExpanded,\n    \"aria-controls\": contentId,\n    onClick: () => onToggle(!isExpanded)\n  }, React.createElement(\"span\", {\n    className: css(styles.expandableSectionToggleIcon, isExpanded && direction === 'up' && styles.modifiers.expandTop)\n  }, React.createElement(AngleRightIcon, {\n    \"aria-hidden\": true\n  })), React.createElement(\"span\", {\n    className: css(styles.expandableSectionToggleText)\n  }, children)));\n};\nExpandableSectionToggle.displayName = 'ExpandableSectionToggle';","map":{"version":3,"sources":["../../../../src/components/ExpandableSection/ExpandableSectionToggle.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,8EAAnB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,cAAP,MAAqB,yDAArB;AAiBA,OAAO,MAAM,uBAAuB,GAA2D,EAAD,IAQ3D;MAR4D;AAC7F,IAAA,QAD6F;AAE7F,IAAA,SAAS,GAAG,EAFiF;AAG7F,IAAA,UAAU,GAAG,KAHgF;AAI7F,IAAA,QAJ6F;AAK7F,IAAA,SAL6F;AAM7F,IAAA,SAAS,GAAG;AANiF,MAM3E,E;MACf,KAAK,GAAA,MAAA,CAAA,EAAA,EAPqF,CAAA,UAAA,EAAA,WAAA,EAAA,YAAA,EAAA,UAAA,EAAA,WAAA,EAAA,WAAA,CAOrF,C;;AAC0B,SAClC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACM,KADN,EACW;AACT,IAAA,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,iBADK,EAEZ,UAAU,IAAI,MAAM,CAAC,SAAP,CAAiB,QAFnB,EAGZ,MAAM,CAAC,SAAP,CAAiB,QAHL,EAIZ,SAJY;AADL,GADX,CAAA,EASE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AACE,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,uBAAR,CADhB;AAEE,IAAA,IAAI,EAAC,QAFP;AAEe,qBACE,UAHjB;AAG2B,qBACV,SAJjB;AAKE,IAAA,OAAO,EAAE,MAAM,QAAQ,CAAC,CAAC,UAAF;AALzB,GAAA,EAOE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACE,IAAA,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,2BADK,EAEZ,UAAU,IAAI,SAAS,KAAK,IAA5B,IAAoC,MAAM,CAAC,SAAP,CAAiB,SAFzC;AADhB,GAAA,EAME,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe;AAAA,mBAAA;AAAA,GAAf,CANF,CAPF,EAeE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,2BAAR;AAApB,GAAA,EAA2D,QAA3D,CAfF,CATF,CADkC;AA4BnC,CApCM;AAsCP,uBAAuB,CAAC,WAAxB,GAAsC,yBAAtC","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ExpandableSection/expandable-section';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-right-icon\";\nexport const ExpandableSectionToggle = (_a) => {\n    var { children, className = '', isExpanded = false, onToggle, contentId, direction = 'down' } = _a, props = __rest(_a, [\"children\", \"className\", \"isExpanded\", \"onToggle\", \"contentId\", \"direction\"]);\n    return (React.createElement(\"div\", Object.assign({}, props, { className: css(styles.expandableSection, isExpanded && styles.modifiers.expanded, styles.modifiers.detached, className) }),\n        React.createElement(\"button\", { className: css(styles.expandableSectionToggle), type: \"button\", \"aria-expanded\": isExpanded, \"aria-controls\": contentId, onClick: () => onToggle(!isExpanded) },\n            React.createElement(\"span\", { className: css(styles.expandableSectionToggleIcon, isExpanded && direction === 'up' && styles.modifiers.expandTop) },\n                React.createElement(AngleRightIcon, { \"aria-hidden\": true })),\n            React.createElement(\"span\", { className: css(styles.expandableSectionToggleText) }, children))));\n};\nExpandableSectionToggle.displayName = 'ExpandableSectionToggle';\n//# sourceMappingURL=ExpandableSectionToggle.js.map"]},"metadata":{},"sourceType":"module"}