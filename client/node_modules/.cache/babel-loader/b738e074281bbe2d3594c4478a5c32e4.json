{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { css } from '@patternfly/react-styles';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { debounce, trimLeft } from '../../helpers/util';\nexport var TextInputTypes;\n\n(function (TextInputTypes) {\n  TextInputTypes[\"text\"] = \"text\";\n  TextInputTypes[\"date\"] = \"date\";\n  TextInputTypes[\"datetimeLocal\"] = \"datetime-local\";\n  TextInputTypes[\"email\"] = \"email\";\n  TextInputTypes[\"month\"] = \"month\";\n  TextInputTypes[\"number\"] = \"number\";\n  TextInputTypes[\"password\"] = \"password\";\n  TextInputTypes[\"search\"] = \"search\";\n  TextInputTypes[\"tel\"] = \"tel\";\n  TextInputTypes[\"time\"] = \"time\";\n  TextInputTypes[\"url\"] = \"url\";\n})(TextInputTypes || (TextInputTypes = {}));\n\nexport class TextInputBase extends React.Component {\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n\n    this.handleChange = event => {\n      if (this.props.onChange) {\n        this.props.onChange(event.currentTarget.value, event);\n      }\n    };\n\n    this.handleResize = () => {\n      const inputRef = this.props.innerRef || this.inputRef;\n\n      if (inputRef && inputRef.current) {\n        trimLeft(inputRef.current, String(this.props.value));\n      }\n    };\n\n    this.restoreText = () => {\n      const inputRef = this.props.innerRef || this.inputRef; // restore the value\n\n      inputRef.current.value = String(this.props.value); // make sure we still see the rightmost value to preserve cursor click position\n\n      inputRef.current.scrollLeft = inputRef.current.scrollWidth;\n    };\n\n    this.onFocus = event => {\n      const {\n        isLeftTruncated,\n        onFocus\n      } = this.props;\n\n      if (isLeftTruncated) {\n        this.restoreText();\n      }\n\n      onFocus && onFocus(event);\n    };\n\n    this.onBlur = event => {\n      const {\n        isLeftTruncated,\n        onBlur\n      } = this.props;\n\n      if (isLeftTruncated) {\n        this.handleResize();\n      }\n\n      onBlur && onBlur(event);\n    };\n\n    if (!props.id && !props['aria-label'] && !props['aria-labelledby']) {\n      // eslint-disable-next-line no-console\n      console.error('Text input:', 'Text input requires either an id or aria-label to be specified');\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.isLeftTruncated) {\n      this.handleResize();\n      window.addEventListener('resize', debounce(this.handleResize, 250));\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.props.isLeftTruncated) {\n      window.removeEventListener('resize', debounce(this.handleResize, 250));\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      innerRef,\n      className,\n      type,\n      value,\n      validated,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onChange,\n      onFocus,\n      onBlur,\n      isLeftTruncated,\n\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      isReadOnly,\n      isRequired,\n      isDisabled,\n      iconVariant,\n      customIconUrl,\n      customIconDimensions\n    } = _a,\n          props = __rest(_a, [\"innerRef\", \"className\", \"type\", \"value\", \"validated\", \"onChange\", \"onFocus\", \"onBlur\", \"isLeftTruncated\", \"isReadOnly\", \"isRequired\", \"isDisabled\", \"iconVariant\", \"customIconUrl\", \"customIconDimensions\"]);\n\n    const customIconStyle = {};\n\n    if (customIconUrl) {\n      customIconStyle.backgroundImage = `url('${customIconUrl}')`;\n    }\n\n    if (customIconDimensions) {\n      customIconStyle.backgroundSize = customIconDimensions;\n    }\n\n    return React.createElement(\"input\", Object.assign({}, props, {\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      className: css(styles.formControl, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning, (iconVariant && iconVariant !== 'search' || customIconUrl) && styles.modifiers.icon, iconVariant && styles.modifiers[iconVariant], className),\n      onChange: this.handleChange,\n      type: type,\n      value: value,\n      \"aria-invalid\": validated === ValidatedOptions.error,\n      required: isRequired,\n      disabled: isDisabled,\n      readOnly: isReadOnly,\n      ref: innerRef || this.inputRef\n    }, (customIconUrl || customIconDimensions) && {\n      style: customIconStyle\n    }));\n  }\n\n}\nTextInputBase.displayName = 'TextInputBase';\nTextInputBase.defaultProps = {\n  'aria-label': null,\n  className: '',\n  isRequired: false,\n  validated: 'default',\n  isDisabled: false,\n  isReadOnly: false,\n  type: TextInputTypes.text,\n  isLeftTruncated: false,\n  onChange: () => undefined\n};\nexport const TextInput = React.forwardRef((props, ref) => React.createElement(TextInputBase, Object.assign({}, props, {\n  innerRef: ref\n})));\nTextInput.displayName = 'TextInput';","map":{"version":3,"sources":["../../../../src/components/TextInput/TextInput.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { css } from '@patternfly/react-styles';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { debounce, trimLeft } from '../../helpers/util';\nexport var TextInputTypes;\n(function (TextInputTypes) {\n    TextInputTypes[\"text\"] = \"text\";\n    TextInputTypes[\"date\"] = \"date\";\n    TextInputTypes[\"datetimeLocal\"] = \"datetime-local\";\n    TextInputTypes[\"email\"] = \"email\";\n    TextInputTypes[\"month\"] = \"month\";\n    TextInputTypes[\"number\"] = \"number\";\n    TextInputTypes[\"password\"] = \"password\";\n    TextInputTypes[\"search\"] = \"search\";\n    TextInputTypes[\"tel\"] = \"tel\";\n    TextInputTypes[\"time\"] = \"time\";\n    TextInputTypes[\"url\"] = \"url\";\n})(TextInputTypes || (TextInputTypes = {}));\nexport class TextInputBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.inputRef = React.createRef();\n        this.handleChange = (event) => {\n            if (this.props.onChange) {\n                this.props.onChange(event.currentTarget.value, event);\n            }\n        };\n        this.handleResize = () => {\n            const inputRef = this.props.innerRef || this.inputRef;\n            if (inputRef && inputRef.current) {\n                trimLeft(inputRef.current, String(this.props.value));\n            }\n        };\n        this.restoreText = () => {\n            const inputRef = this.props.innerRef || this.inputRef;\n            // restore the value\n            inputRef.current.value = String(this.props.value);\n            // make sure we still see the rightmost value to preserve cursor click position\n            inputRef.current.scrollLeft = inputRef.current.scrollWidth;\n        };\n        this.onFocus = (event) => {\n            const { isLeftTruncated, onFocus } = this.props;\n            if (isLeftTruncated) {\n                this.restoreText();\n            }\n            onFocus && onFocus(event);\n        };\n        this.onBlur = (event) => {\n            const { isLeftTruncated, onBlur } = this.props;\n            if (isLeftTruncated) {\n                this.handleResize();\n            }\n            onBlur && onBlur(event);\n        };\n        if (!props.id && !props['aria-label'] && !props['aria-labelledby']) {\n            // eslint-disable-next-line no-console\n            console.error('Text input:', 'Text input requires either an id or aria-label to be specified');\n        }\n    }\n    componentDidMount() {\n        if (this.props.isLeftTruncated) {\n            this.handleResize();\n            window.addEventListener('resize', debounce(this.handleResize, 250));\n        }\n    }\n    componentWillUnmount() {\n        if (this.props.isLeftTruncated) {\n            window.removeEventListener('resize', debounce(this.handleResize, 250));\n        }\n    }\n    render() {\n        const _a = this.props, { innerRef, className, type, value, validated, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        onChange, onFocus, onBlur, isLeftTruncated, \n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        isReadOnly, isRequired, isDisabled, iconVariant, customIconUrl, customIconDimensions } = _a, props = __rest(_a, [\"innerRef\", \"className\", \"type\", \"value\", \"validated\", \"onChange\", \"onFocus\", \"onBlur\", \"isLeftTruncated\", \"isReadOnly\", \"isRequired\", \"isDisabled\", \"iconVariant\", \"customIconUrl\", \"customIconDimensions\"]);\n        const customIconStyle = {};\n        if (customIconUrl) {\n            customIconStyle.backgroundImage = `url('${customIconUrl}')`;\n        }\n        if (customIconDimensions) {\n            customIconStyle.backgroundSize = customIconDimensions;\n        }\n        return (React.createElement(\"input\", Object.assign({}, props, { onFocus: this.onFocus, onBlur: this.onBlur, className: css(styles.formControl, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning, ((iconVariant && iconVariant !== 'search') || customIconUrl) && styles.modifiers.icon, iconVariant && styles.modifiers[iconVariant], className), onChange: this.handleChange, type: type, value: value, \"aria-invalid\": validated === ValidatedOptions.error, required: isRequired, disabled: isDisabled, readOnly: isReadOnly, ref: innerRef || this.inputRef }, ((customIconUrl || customIconDimensions) && { style: customIconStyle }))));\n    }\n}\nTextInputBase.displayName = 'TextInputBase';\nTextInputBase.defaultProps = {\n    'aria-label': null,\n    className: '',\n    isRequired: false,\n    validated: 'default',\n    isDisabled: false,\n    isReadOnly: false,\n    type: TextInputTypes.text,\n    isLeftTruncated: false,\n    onChange: () => undefined\n};\nexport const TextInput = React.forwardRef((props, ref) => (React.createElement(TextInputBase, Object.assign({}, props, { innerRef: ref }))));\nTextInput.displayName = 'TextInput';\n//# sourceMappingURL=TextInput.js.map"]},"metadata":{},"sourceType":"module"}