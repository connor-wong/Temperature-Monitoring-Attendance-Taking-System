{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport Dropzone from 'react-dropzone';\nimport { FileUploadField } from './FileUploadField';\nimport { readFile, fileReaderType } from '../../helpers/fileUtils';\nexport const FileUpload = _a => {\n  var {\n    id,\n    type,\n    value = type === fileReaderType.text || type === fileReaderType.dataURL ? '' : null,\n    filename = '',\n    children = null,\n    onChange = () => {},\n    onReadStarted = () => {},\n    onReadFinished = () => {},\n    onReadFailed = () => {},\n    dropzoneProps = {}\n  } = _a,\n      props = __rest(_a, [\"id\", \"type\", \"value\", \"filename\", \"children\", \"onChange\", \"onReadStarted\", \"onReadFinished\", \"onReadFailed\", \"dropzoneProps\"]);\n\n  const onDropAccepted = (acceptedFiles, event) => {\n    if (acceptedFiles.length > 0) {\n      const fileHandle = acceptedFiles[0];\n\n      if (type === fileReaderType.text || type === fileReaderType.dataURL) {\n        onChange('', fileHandle.name, event); // Show the filename while reading\n\n        onReadStarted(fileHandle);\n        readFile(fileHandle, type).then(data => {\n          onReadFinished(fileHandle);\n          onChange(data, fileHandle.name, event);\n        }).catch(error => {\n          onReadFailed(error, fileHandle);\n          onReadFinished(fileHandle);\n          onChange('', '', event); // Clear the filename field on a failure\n        });\n      } else {\n        onChange(fileHandle, fileHandle.name, event);\n      }\n    }\n\n    dropzoneProps.onDropAccepted && dropzoneProps.onDropAccepted(acceptedFiles, event);\n  };\n\n  const onDropRejected = (rejectedFiles, event) => {\n    if (rejectedFiles.length > 0) {\n      onChange('', rejectedFiles[0].name, event);\n    }\n\n    dropzoneProps.onDropRejected && dropzoneProps.onDropRejected(rejectedFiles, event);\n  };\n\n  const onClearButtonClick = event => {\n    onChange('', '', event);\n  };\n\n  return React.createElement(Dropzone, Object.assign({\n    multiple: false\n  }, dropzoneProps, {\n    onDropAccepted: onDropAccepted,\n    onDropRejected: onDropRejected\n  }), ({\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    open\n  }) => React.createElement(FileUploadField, Object.assign({}, getRootProps(Object.assign(Object.assign({}, props), {\n    refKey: 'containerRef',\n    onClick: event => event.preventDefault() // Prevents clicking TextArea from opening file dialog\n\n  })), {\n    tabIndex: null,\n    id: id,\n    type: type,\n    filename: filename,\n    value: value,\n    onChange: onChange,\n    isDragActive: isDragActive,\n    onBrowseButtonClick: open,\n    onClearButtonClick: onClearButtonClick\n  }), React.createElement(\"input\", Object.assign({}, getInputProps())), children));\n};\nFileUpload.displayName = 'FileUpload';","map":{"version":3,"sources":["../../../../src/components/FileUpload/FileUpload.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport Dropzone from 'react-dropzone';\nimport { FileUploadField } from './FileUploadField';\nimport { readFile, fileReaderType } from '../../helpers/fileUtils';\nexport const FileUpload = (_a) => {\n    var { id, type, value = type === fileReaderType.text || type === fileReaderType.dataURL ? '' : null, filename = '', children = null, onChange = () => { }, onReadStarted = () => { }, onReadFinished = () => { }, onReadFailed = () => { }, dropzoneProps = {} } = _a, props = __rest(_a, [\"id\", \"type\", \"value\", \"filename\", \"children\", \"onChange\", \"onReadStarted\", \"onReadFinished\", \"onReadFailed\", \"dropzoneProps\"]);\n    const onDropAccepted = (acceptedFiles, event) => {\n        if (acceptedFiles.length > 0) {\n            const fileHandle = acceptedFiles[0];\n            if (type === fileReaderType.text || type === fileReaderType.dataURL) {\n                onChange('', fileHandle.name, event); // Show the filename while reading\n                onReadStarted(fileHandle);\n                readFile(fileHandle, type)\n                    .then(data => {\n                    onReadFinished(fileHandle);\n                    onChange(data, fileHandle.name, event);\n                })\n                    .catch((error) => {\n                    onReadFailed(error, fileHandle);\n                    onReadFinished(fileHandle);\n                    onChange('', '', event); // Clear the filename field on a failure\n                });\n            }\n            else {\n                onChange(fileHandle, fileHandle.name, event);\n            }\n        }\n        dropzoneProps.onDropAccepted && dropzoneProps.onDropAccepted(acceptedFiles, event);\n    };\n    const onDropRejected = (rejectedFiles, event) => {\n        if (rejectedFiles.length > 0) {\n            onChange('', rejectedFiles[0].name, event);\n        }\n        dropzoneProps.onDropRejected && dropzoneProps.onDropRejected(rejectedFiles, event);\n    };\n    const onClearButtonClick = (event) => {\n        onChange('', '', event);\n    };\n    return (React.createElement(Dropzone, Object.assign({ multiple: false }, dropzoneProps, { onDropAccepted: onDropAccepted, onDropRejected: onDropRejected }), ({ getRootProps, getInputProps, isDragActive, open }) => (React.createElement(FileUploadField, Object.assign({}, getRootProps(Object.assign(Object.assign({}, props), { refKey: 'containerRef', onClick: event => event.preventDefault() // Prevents clicking TextArea from opening file dialog\n     })), { tabIndex: null, id: id, type: type, filename: filename, value: value, onChange: onChange, isDragActive: isDragActive, onBrowseButtonClick: open, onClearButtonClick: onClearButtonClick }),\n        React.createElement(\"input\", Object.assign({}, getInputProps())),\n        children))));\n};\nFileUpload.displayName = 'FileUpload';\n//# sourceMappingURL=FileUpload.js.map"]},"metadata":{},"sourceType":"module"}