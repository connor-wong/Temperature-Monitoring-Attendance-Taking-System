{"ast":null,"code":"var _jsxFileName = \"C:\\\\School Stuff\\\\Modules\\\\2021 Sem One\\\\Final Year Project\\\\Temperature Monitoring And Attendance Taking System\\\\Web Interface Prototype\\\\raspitar\\\\client\\\\src\\\\components\\\\Dashboard\\\\AttendanceList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Row, Col, Container, ListGroup, Spinner } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AttendanceList = () => {\n  _s();\n\n  const [attendanceArray, setAttendanceArray] = useState([]);\n  const [attendanceList, setAttendanceList] = useState([]);\n  const [dates, setDates] = useState([]);\n  const [showAttendance, setShowAttendance] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    let mounted = true;\n    let dateArray = [];\n\n    const getData = async () => {\n      const response = await fetch(\"/aws/api\").then(res => res.json()); // Get Student Attendance\n\n      response.sort((a, b) => {\n        return new Date(b.Date) - new Date(a.Date);\n      });\n      response.forEach(data => {\n        dateArray.push(data.Date.split(\" \")[0]);\n      });\n      dateArray = [...new Set(dateArray)]; // Remove Duplicates\n\n      if (mounted) {\n        setAttendanceArray(response);\n        setDates(dateArray);\n        setIsLoading(false);\n      }\n    };\n\n    getData();\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  const getAttendanceList = date => {\n    setSelectedDate(date);\n    const selectedDate = date;\n    const attendance = attendanceArray.filter(res => res.Date.includes(selectedDate));\n    setAttendanceList(attendance);\n    setShowAttendance(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"text-center attendancelist\",\n      children: showAttendance ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              style: {\n                fontWeight: \"bold\",\n                color: \"white\",\n                textAlign: \"left\",\n                marginTop: \"10px\",\n                marginBottom: \"10px\"\n              },\n              children: selectedDate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              style: {\n                fontWeight: \"bold\",\n                color: \"white\",\n                textAlign: \"left\",\n                marginTop: \"10px\",\n                marginBottom: \"10px\"\n              },\n              children: \"Attendance List\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            children: isLoading ? /*#__PURE__*/_jsxDEV(Spinner, {\n              animation: \"border\",\n              style: {\n                color: \"white\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(ListGroup, {\n              children: dates.map(date => {\n                return /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n                  id: date,\n                  action: true,\n                  onClick: e => getAttendanceList(e.target.id),\n                  style: {\n                    fontWeight: \"bold\",\n                    color: \"#535353\"\n                  },\n                  children: date\n                }, date, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 25\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(AttendanceList, \"m1ikNNLgf0T7o0gqKH6Hf+OQonc=\");\n\n_c = AttendanceList;\nexport default AttendanceList;\n\nvar _c;\n\n$RefreshReg$(_c, \"AttendanceList\");","map":{"version":3,"sources":["C:/School Stuff/Modules/2021 Sem One/Final Year Project/Temperature Monitoring And Attendance Taking System/Web Interface Prototype/raspitar/client/src/components/Dashboard/AttendanceList.js"],"names":["React","useState","useEffect","Row","Col","Container","ListGroup","Spinner","AttendanceList","attendanceArray","setAttendanceArray","attendanceList","setAttendanceList","dates","setDates","showAttendance","setShowAttendance","selectedDate","setSelectedDate","isLoading","setIsLoading","mounted","dateArray","getData","response","fetch","then","res","json","sort","a","b","Date","forEach","data","push","split","Set","getAttendanceList","date","attendance","filter","includes","fontWeight","color","textAlign","marginTop","marginBottom","map","e","target","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Row, Col, Container, ListGroup, Spinner } from \"react-bootstrap\";\r\n\r\nconst AttendanceList = () => {\r\n  const [attendanceArray, setAttendanceArray] = useState([]);\r\n  const [attendanceList, setAttendanceList] = useState([]);\r\n  const [dates, setDates] = useState([]);\r\n  const [showAttendance, setShowAttendance] = useState(false);\r\n  const [selectedDate, setSelectedDate] = useState(\"\");\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    let dateArray = [];\r\n\r\n    const getData = async () => {\r\n      const response = await fetch(\"/aws/api\").then((res) => res.json()); // Get Student Attendance\r\n      response.sort((a, b) => {\r\n        return new Date(b.Date) - new Date(a.Date);\r\n      });\r\n\r\n      response.forEach((data) => {\r\n        dateArray.push(data.Date.split(\" \")[0]);\r\n      });\r\n\r\n      dateArray = [...new Set(dateArray)]; // Remove Duplicates\r\n\r\n      if (mounted) {\r\n        setAttendanceArray(response);\r\n        setDates(dateArray);\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    getData();\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const getAttendanceList = (date) => {\r\n    setSelectedDate(date);\r\n    const selectedDate = date;\r\n    const attendance = attendanceArray.filter((res) =>\r\n      res.Date.includes(selectedDate)\r\n    );\r\n    setAttendanceList(attendance);\r\n    setShowAttendance(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container className=\"text-center attendancelist\">\r\n        {showAttendance ? (\r\n          <>\r\n            <Row>\r\n              <Col>\r\n                <h3\r\n                  style={{\r\n                    fontWeight: \"bold\",\r\n                    color: \"white\",\r\n                    textAlign: \"left\",\r\n                    marginTop: \"10px\",\r\n                    marginBottom: \"10px\",\r\n                  }}\r\n                >\r\n                  {selectedDate}\r\n                </h3>\r\n              </Col>\r\n            </Row>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Row>\r\n              <Col>\r\n                <h3\r\n                  style={{\r\n                    fontWeight: \"bold\",\r\n                    color: \"white\",\r\n                    textAlign: \"left\",\r\n                    marginTop: \"10px\",\r\n                    marginBottom: \"10px\",\r\n                  }}\r\n                >\r\n                  Attendance List\r\n                </h3>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                {isLoading ? (\r\n                  <Spinner animation=\"border\" style={{ color: \"white\" }} />\r\n                ) : (\r\n                  <ListGroup>\r\n                    {dates.map((date) => {\r\n                      return (\r\n                        <ListGroup.Item\r\n                          key={date}\r\n                          id={date}\r\n                          action\r\n                          onClick={(e) => getAttendanceList(e.target.id)}\r\n                          style={{ fontWeight: \"bold\", color: \"#535353\" }}\r\n                        >\r\n                          {date}\r\n                        </ListGroup.Item>\r\n                      );\r\n                    })}\r\n                  </ListGroup>\r\n                )}\r\n              </Col>\r\n            </Row>\r\n          </>\r\n        )}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AttendanceList;\r\n"]},"metadata":{},"sourceType":"module"}