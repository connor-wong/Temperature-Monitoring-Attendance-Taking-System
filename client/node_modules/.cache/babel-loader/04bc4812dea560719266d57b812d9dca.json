{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport heightToken from \"@patternfly/react-tokens/dist/esm/c_form_control_textarea_Height\";\nimport { css } from '@patternfly/react-styles';\nimport { capitalize, ValidatedOptions } from '../../helpers';\nexport var TextAreResizeOrientation;\n\n(function (TextAreResizeOrientation) {\n  TextAreResizeOrientation[\"horizontal\"] = \"horizontal\";\n  TextAreResizeOrientation[\"vertical\"] = \"vertical\";\n  TextAreResizeOrientation[\"both\"] = \"both\";\n})(TextAreResizeOrientation || (TextAreResizeOrientation = {}));\n\nexport class TextAreaBase extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      // https://gomakethings.com/automatically-expand-a-textarea-as-the-user-types-using-vanilla-javascript/\n      const field = event.currentTarget;\n\n      if (this.props.autoResize) {\n        field.style.setProperty(heightToken.name, 'inherit');\n        const computed = window.getComputedStyle(field); // Calculate the height\n\n        const height = parseInt(computed.getPropertyValue('border-top-width')) + parseInt(computed.getPropertyValue('padding-top')) + field.scrollHeight + parseInt(computed.getPropertyValue('padding-bottom')) + parseInt(computed.getPropertyValue('border-bottom-width'));\n        field.style.setProperty(heightToken.name, `${height}px`);\n      }\n\n      if (this.props.onChange) {\n        this.props.onChange(field.value, event);\n      }\n    };\n\n    if (!props.id && !props['aria-label']) {\n      // eslint-disable-next-line no-console\n      console.error('TextArea: TextArea requires either an id or aria-label to be specified');\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      className,\n      value,\n      validated,\n      isRequired,\n      isDisabled,\n      isReadOnly,\n      resizeOrientation,\n      innerRef,\n      readOnly,\n      disabled,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      autoResize,\n      onChange\n    } = _a,\n\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    props = __rest(_a, [\"className\", \"value\", \"validated\", \"isRequired\", \"isDisabled\", \"isReadOnly\", \"resizeOrientation\", \"innerRef\", \"readOnly\", \"disabled\", \"autoResize\", \"onChange\"]);\n\n    const orientation = `resize${capitalize(resizeOrientation)}`;\n    return React.createElement(\"textarea\", Object.assign({\n      className: css(styles.formControl, className, resizeOrientation !== TextAreResizeOrientation.both && styles.modifiers[orientation], validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning),\n      onChange: this.handleChange\n    }, typeof this.props.defaultValue !== 'string' && {\n      value\n    }, {\n      \"aria-invalid\": validated === ValidatedOptions.error,\n      required: isRequired,\n      disabled: isDisabled || disabled,\n      readOnly: isReadOnly || readOnly,\n      ref: innerRef\n    }, props));\n  }\n\n}\nTextAreaBase.displayName = 'TextArea';\nTextAreaBase.defaultProps = {\n  innerRef: React.createRef(),\n  className: '',\n  isRequired: false,\n  isDisabled: false,\n  validated: 'default',\n  resizeOrientation: 'both',\n  'aria-label': null\n};\nexport const TextArea = React.forwardRef((props, ref) => React.createElement(TextAreaBase, Object.assign({}, props, {\n  innerRef: ref\n})));\nTextArea.displayName = 'TextArea';","map":{"version":3,"sources":["../../../../src/components/TextArea/TextArea.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport heightToken from \"@patternfly/react-tokens/dist/esm/c_form_control_textarea_Height\";\nimport { css } from '@patternfly/react-styles';\nimport { capitalize, ValidatedOptions } from '../../helpers';\nexport var TextAreResizeOrientation;\n(function (TextAreResizeOrientation) {\n    TextAreResizeOrientation[\"horizontal\"] = \"horizontal\";\n    TextAreResizeOrientation[\"vertical\"] = \"vertical\";\n    TextAreResizeOrientation[\"both\"] = \"both\";\n})(TextAreResizeOrientation || (TextAreResizeOrientation = {}));\nexport class TextAreaBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = (event) => {\n            // https://gomakethings.com/automatically-expand-a-textarea-as-the-user-types-using-vanilla-javascript/\n            const field = event.currentTarget;\n            if (this.props.autoResize) {\n                field.style.setProperty(heightToken.name, 'inherit');\n                const computed = window.getComputedStyle(field);\n                // Calculate the height\n                const height = parseInt(computed.getPropertyValue('border-top-width')) +\n                    parseInt(computed.getPropertyValue('padding-top')) +\n                    field.scrollHeight +\n                    parseInt(computed.getPropertyValue('padding-bottom')) +\n                    parseInt(computed.getPropertyValue('border-bottom-width'));\n                field.style.setProperty(heightToken.name, `${height}px`);\n            }\n            if (this.props.onChange) {\n                this.props.onChange(field.value, event);\n            }\n        };\n        if (!props.id && !props['aria-label']) {\n            // eslint-disable-next-line no-console\n            console.error('TextArea: TextArea requires either an id or aria-label to be specified');\n        }\n    }\n    render() {\n        const _a = this.props, { className, value, validated, isRequired, isDisabled, isReadOnly, resizeOrientation, innerRef, readOnly, disabled, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        autoResize, onChange } = _a, \n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        props = __rest(_a, [\"className\", \"value\", \"validated\", \"isRequired\", \"isDisabled\", \"isReadOnly\", \"resizeOrientation\", \"innerRef\", \"readOnly\", \"disabled\", \"autoResize\", \"onChange\"]);\n        const orientation = `resize${capitalize(resizeOrientation)}`;\n        return (React.createElement(\"textarea\", Object.assign({ className: css(styles.formControl, className, resizeOrientation !== TextAreResizeOrientation.both && styles.modifiers[orientation], validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning), onChange: this.handleChange }, (typeof this.props.defaultValue !== 'string' && { value }), { \"aria-invalid\": validated === ValidatedOptions.error, required: isRequired, disabled: isDisabled || disabled, readOnly: isReadOnly || readOnly, ref: innerRef }, props)));\n    }\n}\nTextAreaBase.displayName = 'TextArea';\nTextAreaBase.defaultProps = {\n    innerRef: React.createRef(),\n    className: '',\n    isRequired: false,\n    isDisabled: false,\n    validated: 'default',\n    resizeOrientation: 'both',\n    'aria-label': null\n};\nexport const TextArea = React.forwardRef((props, ref) => (React.createElement(TextAreaBase, Object.assign({}, props, { innerRef: ref }))));\nTextArea.displayName = 'TextArea';\n//# sourceMappingURL=TextArea.js.map"]},"metadata":{},"sourceType":"module"}