{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Spinner/spinner';\nimport { css } from '@patternfly/react-styles';\nexport var spinnerSize;\n\n(function (spinnerSize) {\n  spinnerSize[\"sm\"] = \"sm\";\n  spinnerSize[\"md\"] = \"md\";\n  spinnerSize[\"lg\"] = \"lg\";\n  spinnerSize[\"xl\"] = \"xl\";\n})(spinnerSize || (spinnerSize = {}));\n\nexport const Spinner = _a => {\n  var {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    className = '',\n    size = 'xl',\n    'aria-valuetext': ariaValueText = 'Loading...',\n    isSVG = false,\n    diameter\n  } = _a,\n      props = __rest(_a, [\"className\", \"size\", 'aria-valuetext', \"isSVG\", \"diameter\"]);\n\n  const Component = isSVG ? 'svg' : 'span';\n  return React.createElement(Component, Object.assign({\n    className: css(styles.spinner, styles.modifiers[size], className),\n    role: \"progressbar\",\n    \"aria-valuetext\": ariaValueText\n  }, isSVG && {\n    viewBox: '0 0 100 100'\n  }, diameter && {\n    style: {\n      '--pf-c-spinner--diameter': diameter\n    }\n  }, props), isSVG ? React.createElement(\"circle\", {\n    className: styles.spinnerPath,\n    cx: \"50\",\n    cy: \"50\",\n    r: \"45\",\n    fill: \"none\"\n  }) : React.createElement(React.Fragment, null, React.createElement(\"span\", {\n    className: css(styles.spinnerClipper)\n  }), React.createElement(\"span\", {\n    className: css(styles.spinnerLeadBall)\n  }), React.createElement(\"span\", {\n    className: css(styles.spinnerTailBall)\n  })));\n};\nSpinner.displayName = 'Spinner';","map":{"version":3,"sources":["../../../../src/components/Spinner/Spinner.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,yDAAnB;AACA,SAAS,GAAT,QAAoB,0BAApB;AAEA,OAAA,IAAY,WAAZ;;AAAA,CAAA,UAAY,WAAZ,EAAuB;AACrB,EAAA,WAAA,CAAA,IAAA,CAAA,GAAA,IAAA;AACA,EAAA,WAAA,CAAA,IAAA,CAAA,GAAA,IAAA;AACA,EAAA,WAAA,CAAA,IAAA,CAAA,GAAA,IAAA;AACA,EAAA,WAAA,CAAA,IAAA,CAAA,GAAA,IAAA;AACD,CALD,EAAY,WAAW,KAAX,WAAW,GAAA,EAAA,CAAvB;;AAoBA,OAAO,MAAM,OAAO,GAA2C,EAAD,IAQ3C;MAR4C;AAC7D;AACA,IAAA,SAAS,GAAG,EAFiD;AAG7D,IAAA,IAAI,GAAG,IAHsD;AAI7D,sBAAkB,aAAa,GAAG,YAJ2B;AAK7D,IAAA,KAAK,GAAG,KALqD;AAM7D,IAAA;AAN6D,MAMrD,E;MACL,KAAK,GAAA,MAAA,CAAA,EAAA,EAPqD,CAAA,WAAA,EAAA,MAAA,EAAA,gBAAA,EAAA,OAAA,EAAA,UAAA,CAOrD,C;;AAER,QAAM,SAAS,GAAG,KAAK,GAAG,KAAH,GAAY,MAAnC;AAEA,SACE,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,MAAA,CAAA,MAAA,CAAA;AACR,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,OAAR,EAAiB,MAAM,CAAC,SAAP,CAAiB,IAAjB,CAAjB,EAAyC,SAAzC,CADN;AAER,IAAA,IAAI,EAAC,aAFG;AAEU,sBACF;AAHR,GAAA,EAIH,KAAK,IAAI;AAAE,IAAA,OAAO,EAAE;AAAX,GAJN,EAKH,QAAQ,IAAI;AAAE,IAAA,KAAK,EAAE;AAAE,kCAA4B;AAA9B;AAAT,GALT,EAMJ,KANI,CAAV,EAQG,KAAK,GACJ,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AAAQ,IAAA,SAAS,EAAE,MAAM,CAAC,WAA1B;AAAuC,IAAA,EAAE,EAAC,IAA1C;AAA+C,IAAA,EAAE,EAAC,IAAlD;AAAuD,IAAA,CAAC,EAAC,IAAzD;AAA8D,IAAA,IAAI,EAAC;AAAnE,GAAA,CADI,GAGJ,KAAA,CAAA,aAAA,CAAC,KAAK,CAAC,QAAP,EAAe,IAAf,EACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,cAAR;AAApB,GAAA,CADF,EAEE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,eAAR;AAApB,GAAA,CAFF,EAGE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,eAAR;AAApB,GAAA,CAHF,CAXJ,CADF;AAoBD,CA/BM;AAgCP,OAAO,CAAC,WAAR,GAAsB,SAAtB","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Spinner/spinner';\nimport { css } from '@patternfly/react-styles';\nexport var spinnerSize;\n(function (spinnerSize) {\n    spinnerSize[\"sm\"] = \"sm\";\n    spinnerSize[\"md\"] = \"md\";\n    spinnerSize[\"lg\"] = \"lg\";\n    spinnerSize[\"xl\"] = \"xl\";\n})(spinnerSize || (spinnerSize = {}));\nexport const Spinner = (_a) => {\n    var { \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    className = '', size = 'xl', 'aria-valuetext': ariaValueText = 'Loading...', isSVG = false, diameter } = _a, props = __rest(_a, [\"className\", \"size\", 'aria-valuetext', \"isSVG\", \"diameter\"]);\n    const Component = isSVG ? 'svg' : 'span';\n    return (React.createElement(Component, Object.assign({ className: css(styles.spinner, styles.modifiers[size], className), role: \"progressbar\", \"aria-valuetext\": ariaValueText }, (isSVG && { viewBox: '0 0 100 100' }), (diameter && { style: { '--pf-c-spinner--diameter': diameter } }), props), isSVG ? (React.createElement(\"circle\", { className: styles.spinnerPath, cx: \"50\", cy: \"50\", r: \"45\", fill: \"none\" })) : (React.createElement(React.Fragment, null,\n        React.createElement(\"span\", { className: css(styles.spinnerClipper) }),\n        React.createElement(\"span\", { className: css(styles.spinnerLeadBall) }),\n        React.createElement(\"span\", { className: css(styles.spinnerTailBall) })))));\n};\nSpinner.displayName = 'Spinner';\n//# sourceMappingURL=Spinner.js.map"]},"metadata":{},"sourceType":"module"}