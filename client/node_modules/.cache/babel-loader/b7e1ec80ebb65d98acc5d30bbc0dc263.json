{"ast":null,"code":"import getCompositeRect from './dom-utils/getCompositeRect';\nimport getLayoutRect from './dom-utils/getLayoutRect';\nimport listScrollParents from './dom-utils/listScrollParents';\nimport getOffsetParent from './dom-utils/getOffsetParent';\nimport getComputedStyle from './dom-utils/getComputedStyle';\nimport orderModifiers from './utils/orderModifiers';\nimport debounce from './utils/debounce';\nimport validateModifiers from './utils/validateModifiers';\nimport uniqueBy from './utils/uniqueBy';\nimport getBasePlacement from './utils/getBasePlacement';\nimport mergeByName from './utils/mergeByName';\nimport detectOverflow from './utils/detectOverflow';\nimport { isElement } from './dom-utils/instanceOf';\nimport { auto } from './enums';\nexport * from './types';\nexport * from './enums';\nconst INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';\nconst INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';\nconst DEFAULT_OPTIONS = {\n  placement: 'bottom',\n  modifiers: [],\n  strategy: 'absolute'\n};\n/**\n * @param args\n */\n\nfunction areValidElements(...args) {\n  return !args.some(element => !(element && typeof element.getBoundingClientRect === 'function'));\n}\n/**\n * @param generatorOptions\n */\n\n\nexport function popperGenerator(generatorOptions = {}) {\n  const {\n    defaultModifiers = [],\n    defaultOptions = DEFAULT_OPTIONS\n  } = generatorOptions;\n  return function createPopper(reference, popper, options = defaultOptions) {\n    let state = {\n      placement: 'bottom',\n      orderedModifiers: [],\n      options: Object.assign(Object.assign({}, DEFAULT_OPTIONS), defaultOptions),\n      modifiersData: {},\n      elements: {\n        reference,\n        popper\n      },\n      attributes: {},\n      styles: {}\n    };\n    let effectCleanupFns = [];\n    let isDestroyed = false;\n    const instance = {\n      state,\n\n      setOptions(options) {\n        cleanupModifierEffects();\n        state.options = Object.assign(Object.assign(Object.assign({}, defaultOptions), state.options), options);\n        state.scrollParents = {\n          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],\n          popper: listScrollParents(popper)\n        }; // Orders the modifiers based on their dependencies and `phase`\n        // properties\n\n        const orderedModifiers = orderModifiers(mergeByName([...defaultModifiers, ...state.options.modifiers])); // Strip out disabled modifiers\n\n        state.orderedModifiers = orderedModifiers.filter(m => m.enabled); // Validate the provided modifiers so that the consumer will get warned\n        // if one of the modifiers is invalid for any reason\n\n        if (false\n        /* __DEV__*/\n        ) {\n            const modifiers = uniqueBy([...orderedModifiers, ...state.options.modifiers], ({\n              name\n            }) => name);\n            validateModifiers(modifiers);\n\n            if (getBasePlacement(state.options.placement) === auto) {\n              const flipModifier = state.orderedModifiers.find(({\n                name\n              }) => name === 'flip');\n\n              if (!flipModifier) {\n                console.error(['Popper: \"auto\" placements require the \"flip\" modifier be', 'present and enabled to work.'].join(' '));\n              }\n            }\n\n            const {\n              marginTop,\n              marginRight,\n              marginBottom,\n              marginLeft\n            } = getComputedStyle(popper); // We no longer take into account `margins` on the popper, and it can\n            // cause bugs with positioning, so we'll warn the consumer\n\n            if ([marginTop, marginRight, marginBottom, marginLeft].some(margin => parseFloat(margin))) {\n              console.warn(['Popper: CSS \"margin\" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));\n            }\n          }\n\n        runModifierEffects();\n        return instance.update();\n      },\n\n      // Sync update – it will always be executed, even if not necessary. This\n      // is useful for low frequency updates where sync behavior simplifies the\n      // logic.\n      // For high frequency updates (e.g. `resize` and `scroll` events), always\n      // prefer the async Popper#update method\n      forceUpdate() {\n        if (isDestroyed) {\n          return;\n        }\n\n        const {\n          reference,\n          popper\n        } = state.elements; // Don't proceed if `reference` or `popper` are not valid elements\n        // anymore\n\n        if (!areValidElements(reference, popper)) {\n          if (false\n          /* __DEV__*/\n          ) {\n              console.error(INVALID_ELEMENT_ERROR);\n            }\n\n          return;\n        } // Store the reference and popper rects to be read by modifiers\n\n\n        state.rects = {\n          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),\n          popper: getLayoutRect(popper)\n        }; // Modifiers have the ability to reset the current update cycle. The\n        // most common use case for this is the `flip` modifier changing the\n        // placement, which then needs to re-run all the modifiers, because the\n        // logic was previously ran for the previous placement and is therefore\n        // stale/incorrect\n\n        state.reset = false;\n        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier\n        // is filled with the initial data specified by the modifier. This means\n        // it doesn't persist and is fresh on each update.\n        // To ensure persistent data, use `${name}#persistent`\n\n        state.orderedModifiers.forEach(modifier => state.modifiersData[modifier.name] = Object.assign({}, modifier.data));\n        let __debug_loops__ = 0;\n\n        for (let index = 0; index < state.orderedModifiers.length; index++) {\n          if (false\n          /* __DEV__*/\n          ) {\n              __debug_loops__ += 1;\n\n              if (__debug_loops__ > 100) {\n                console.error(INFINITE_LOOP_ERROR);\n                break;\n              }\n            }\n\n          if (state.reset === true) {\n            state.reset = false;\n            index = -1;\n            continue;\n          }\n\n          const {\n            fn,\n            options = {},\n            name\n          } = state.orderedModifiers[index];\n\n          if (typeof fn === 'function') {\n            state = fn({\n              state,\n              options,\n              name,\n              instance\n            }) || state;\n          }\n        }\n      },\n\n      // Async and optimistically optimized update – it will not be executed if\n      // not necessary (debounced to run at most once-per-tick)\n      update: debounce(() => new Promise(resolve => {\n        instance.forceUpdate();\n        resolve(state);\n      })),\n\n      destroy() {\n        cleanupModifierEffects();\n        isDestroyed = true;\n      }\n\n    };\n\n    if (!areValidElements(reference, popper)) {\n      if (false\n      /* __DEV__*/\n      ) {\n          console.error(INVALID_ELEMENT_ERROR);\n        }\n\n      return instance;\n    }\n\n    instance.setOptions(options).then(state => {\n      if (!isDestroyed && options.onFirstUpdate) {\n        options.onFirstUpdate(state);\n      }\n    }); // Modifiers have the ability to execute arbitrary code before the first\n    // update cycle runs. They will be executed in the same order as the update\n    // cycle. This is useful when a modifier adds some persistent data that\n    // other modifiers need to use, but the modifier is run after the dependent\n    // one.\n\n    /**\n     *\n     */\n\n    function runModifierEffects() {\n      state.orderedModifiers.forEach(({\n        name,\n        options = {},\n        effect\n      }) => {\n        if (typeof effect === 'function') {\n          const cleanupFn = effect({\n            state,\n            name,\n            instance,\n            options\n          });\n\n          const noopFn = () => {};\n\n          effectCleanupFns.push(cleanupFn || noopFn);\n        }\n      });\n    }\n    /**\n     *\n     */\n\n\n    function cleanupModifierEffects() {\n      effectCleanupFns.forEach(fn => fn());\n      effectCleanupFns = [];\n    }\n\n    return instance;\n  };\n}\nexport const createPopper = popperGenerator(); // eslint-disable-next-line import/no-unused-modules\n\nexport { detectOverflow };","map":{"version":3,"sources":["../../../../../../src/helpers/Popper/thirdparty/popper-core/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import getCompositeRect from './dom-utils/getCompositeRect';\nimport getLayoutRect from './dom-utils/getLayoutRect';\nimport listScrollParents from './dom-utils/listScrollParents';\nimport getOffsetParent from './dom-utils/getOffsetParent';\nimport getComputedStyle from './dom-utils/getComputedStyle';\nimport orderModifiers from './utils/orderModifiers';\nimport debounce from './utils/debounce';\nimport validateModifiers from './utils/validateModifiers';\nimport uniqueBy from './utils/uniqueBy';\nimport getBasePlacement from './utils/getBasePlacement';\nimport mergeByName from './utils/mergeByName';\nimport detectOverflow from './utils/detectOverflow';\nimport { isElement } from './dom-utils/instanceOf';\nimport { auto } from './enums';\nexport * from './types';\nexport * from './enums';\nconst INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';\nconst INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';\nconst DEFAULT_OPTIONS = {\n    placement: 'bottom',\n    modifiers: [],\n    strategy: 'absolute'\n};\n/**\n * @param args\n */\nfunction areValidElements(...args) {\n    return !args.some(element => !(element && typeof element.getBoundingClientRect === 'function'));\n}\n/**\n * @param generatorOptions\n */\nexport function popperGenerator(generatorOptions = {}) {\n    const { defaultModifiers = [], defaultOptions = DEFAULT_OPTIONS } = generatorOptions;\n    return function createPopper(reference, popper, options = defaultOptions) {\n        let state = {\n            placement: 'bottom',\n            orderedModifiers: [],\n            options: Object.assign(Object.assign({}, DEFAULT_OPTIONS), defaultOptions),\n            modifiersData: {},\n            elements: {\n                reference,\n                popper\n            },\n            attributes: {},\n            styles: {}\n        };\n        let effectCleanupFns = [];\n        let isDestroyed = false;\n        const instance = {\n            state,\n            setOptions(options) {\n                cleanupModifierEffects();\n                state.options = Object.assign(Object.assign(Object.assign({}, defaultOptions), state.options), options);\n                state.scrollParents = {\n                    reference: isElement(reference)\n                        ? listScrollParents(reference)\n                        : reference.contextElement\n                            ? listScrollParents(reference.contextElement)\n                            : [],\n                    popper: listScrollParents(popper)\n                };\n                // Orders the modifiers based on their dependencies and `phase`\n                // properties\n                const orderedModifiers = orderModifiers(mergeByName([...defaultModifiers, ...state.options.modifiers]));\n                // Strip out disabled modifiers\n                state.orderedModifiers = orderedModifiers.filter(m => m.enabled);\n                // Validate the provided modifiers so that the consumer will get warned\n                // if one of the modifiers is invalid for any reason\n                if (false /* __DEV__*/) {\n                    const modifiers = uniqueBy([...orderedModifiers, ...state.options.modifiers], ({ name }) => name);\n                    validateModifiers(modifiers);\n                    if (getBasePlacement(state.options.placement) === auto) {\n                        const flipModifier = state.orderedModifiers.find(({ name }) => name === 'flip');\n                        if (!flipModifier) {\n                            console.error(['Popper: \"auto\" placements require the \"flip\" modifier be', 'present and enabled to work.'].join(' '));\n                        }\n                    }\n                    const { marginTop, marginRight, marginBottom, marginLeft } = getComputedStyle(popper);\n                    // We no longer take into account `margins` on the popper, and it can\n                    // cause bugs with positioning, so we'll warn the consumer\n                    if ([marginTop, marginRight, marginBottom, marginLeft].some(margin => parseFloat(margin))) {\n                        console.warn([\n                            'Popper: CSS \"margin\" styles cannot be used to apply padding',\n                            'between the popper and its reference element or boundary.',\n                            'To replicate margin, use the `offset` modifier, as well as',\n                            'the `padding` option in the `preventOverflow` and `flip`',\n                            'modifiers.'\n                        ].join(' '));\n                    }\n                }\n                runModifierEffects();\n                return instance.update();\n            },\n            // Sync update – it will always be executed, even if not necessary. This\n            // is useful for low frequency updates where sync behavior simplifies the\n            // logic.\n            // For high frequency updates (e.g. `resize` and `scroll` events), always\n            // prefer the async Popper#update method\n            forceUpdate() {\n                if (isDestroyed) {\n                    return;\n                }\n                const { reference, popper } = state.elements;\n                // Don't proceed if `reference` or `popper` are not valid elements\n                // anymore\n                if (!areValidElements(reference, popper)) {\n                    if (false /* __DEV__*/) {\n                        console.error(INVALID_ELEMENT_ERROR);\n                    }\n                    return;\n                }\n                // Store the reference and popper rects to be read by modifiers\n                state.rects = {\n                    reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),\n                    popper: getLayoutRect(popper)\n                };\n                // Modifiers have the ability to reset the current update cycle. The\n                // most common use case for this is the `flip` modifier changing the\n                // placement, which then needs to re-run all the modifiers, because the\n                // logic was previously ran for the previous placement and is therefore\n                // stale/incorrect\n                state.reset = false;\n                state.placement = state.options.placement;\n                // On each update cycle, the `modifiersData` property for each modifier\n                // is filled with the initial data specified by the modifier. This means\n                // it doesn't persist and is fresh on each update.\n                // To ensure persistent data, use `${name}#persistent`\n                state.orderedModifiers.forEach(modifier => (state.modifiersData[modifier.name] = Object.assign({}, modifier.data)));\n                let __debug_loops__ = 0;\n                for (let index = 0; index < state.orderedModifiers.length; index++) {\n                    if (false /* __DEV__*/) {\n                        __debug_loops__ += 1;\n                        if (__debug_loops__ > 100) {\n                            console.error(INFINITE_LOOP_ERROR);\n                            break;\n                        }\n                    }\n                    if (state.reset === true) {\n                        state.reset = false;\n                        index = -1;\n                        continue;\n                    }\n                    const { fn, options = {}, name } = state.orderedModifiers[index];\n                    if (typeof fn === 'function') {\n                        state = fn({ state, options, name, instance }) || state;\n                    }\n                }\n            },\n            // Async and optimistically optimized update – it will not be executed if\n            // not necessary (debounced to run at most once-per-tick)\n            update: debounce(() => new Promise(resolve => {\n                instance.forceUpdate();\n                resolve(state);\n            })),\n            destroy() {\n                cleanupModifierEffects();\n                isDestroyed = true;\n            }\n        };\n        if (!areValidElements(reference, popper)) {\n            if (false /* __DEV__*/) {\n                console.error(INVALID_ELEMENT_ERROR);\n            }\n            return instance;\n        }\n        instance.setOptions(options).then(state => {\n            if (!isDestroyed && options.onFirstUpdate) {\n                options.onFirstUpdate(state);\n            }\n        });\n        // Modifiers have the ability to execute arbitrary code before the first\n        // update cycle runs. They will be executed in the same order as the update\n        // cycle. This is useful when a modifier adds some persistent data that\n        // other modifiers need to use, but the modifier is run after the dependent\n        // one.\n        /**\n         *\n         */\n        function runModifierEffects() {\n            state.orderedModifiers.forEach(({ name, options = {}, effect }) => {\n                if (typeof effect === 'function') {\n                    const cleanupFn = effect({ state, name, instance, options });\n                    const noopFn = () => { };\n                    effectCleanupFns.push(cleanupFn || noopFn);\n                }\n            });\n        }\n        /**\n         *\n         */\n        function cleanupModifierEffects() {\n            effectCleanupFns.forEach(fn => fn());\n            effectCleanupFns = [];\n        }\n        return instance;\n    };\n}\nexport const createPopper = popperGenerator();\n// eslint-disable-next-line import/no-unused-modules\nexport { detectOverflow };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}