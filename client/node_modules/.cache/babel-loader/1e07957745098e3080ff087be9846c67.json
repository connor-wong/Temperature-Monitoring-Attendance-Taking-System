{"ast":null,"code":"import { __rest } from \"tslib\";\nimport React, { useEffect } from 'react';\nimport { TextInput } from '../TextInput/TextInput';\nimport { Button } from '../Button/Button';\nimport { Select, SelectOption } from '../Select';\nimport ArrowLeftIcon from \"@patternfly/react-icons/dist/esm/icons/arrow-left-icon\";\nimport ArrowRightIcon from \"@patternfly/react-icons/dist/esm/icons/arrow-right-icon\";\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/CalendarMonth/calendar-month';\nimport { getUniqueId } from '../../helpers/util';\nexport var Weekday;\n\n(function (Weekday) {\n  Weekday[Weekday[\"Sunday\"] = 0] = \"Sunday\";\n  Weekday[Weekday[\"Monday\"] = 1] = \"Monday\";\n  Weekday[Weekday[\"Tuesday\"] = 2] = \"Tuesday\";\n  Weekday[Weekday[\"Wednesday\"] = 3] = \"Wednesday\";\n  Weekday[Weekday[\"Thursday\"] = 4] = \"Thursday\";\n  Weekday[Weekday[\"Friday\"] = 5] = \"Friday\";\n  Weekday[Weekday[\"Saturday\"] = 6] = \"Saturday\";\n})(Weekday || (Weekday = {})); // Must be numeric given current header design\n\n\nconst yearFormat = date => date.getFullYear();\n\nconst buildCalendar = (year, month, weekStart, validators) => {\n  const selectedDate = new Date(year, month);\n  const firstDayOfWeek = new Date(selectedDate);\n  firstDayOfWeek.setDate(firstDayOfWeek.getDate() - firstDayOfWeek.getDay() + weekStart); // We will always show 6 weeks like google calendar\n  // Assume we just want the numbers for now...\n\n  const calendarWeeks = [];\n\n  for (let i = 0; i < 6; i++) {\n    const week = [];\n\n    for (let j = 0; j < 7; j++) {\n      const date = new Date(firstDayOfWeek);\n      week.push({\n        date,\n        isValid: validators.every(validator => validator(date))\n      });\n      firstDayOfWeek.setDate(firstDayOfWeek.getDate() + 1);\n    }\n\n    calendarWeeks.push(week);\n  }\n\n  return calendarWeeks;\n};\n\nconst isSameDate = (d1, d2) => d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();\n\nexport const isValidDate = date => Boolean(date && !isNaN(date));\nconst today = new Date();\nexport const CalendarMonth = _a => {\n  var {\n    date: dateProp = today,\n    locale = undefined,\n    monthFormat = date => date.toLocaleDateString(locale, {\n      month: 'long'\n    }),\n    weekdayFormat = date => date.toLocaleDateString(locale, {\n      weekday: 'narrow'\n    }),\n    longWeekdayFormat = date => date.toLocaleDateString(locale, {\n      weekday: 'long'\n    }),\n    dayFormat = date => date.getDate(),\n    weekStart = 0,\n    // Use the American Sunday as a default\n    onChange = () => {},\n    validators = [() => true],\n    className,\n    onSelectToggle = () => {},\n    rangeStart,\n    prevMonthAriaLabel = 'Previous month',\n    nextMonthAriaLabel = 'Next month',\n    yearInputAriaLabel = 'Select year',\n    cellAriaLabel\n  } = _a,\n      props = __rest(_a, [\"date\", \"locale\", \"monthFormat\", \"weekdayFormat\", \"longWeekdayFormat\", \"dayFormat\", \"weekStart\", \"onChange\", \"validators\", \"className\", \"onSelectToggle\", \"rangeStart\", \"prevMonthAriaLabel\", \"nextMonthAriaLabel\", \"yearInputAriaLabel\", \"cellAriaLabel\"]);\n\n  const longMonths = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(monthNum => new Date(1990, monthNum)).map(monthFormat);\n  const [isSelectOpen, setIsSelectOpen] = React.useState(false); // eslint-disable-next-line prefer-const\n\n  let [focusedDate, setFocusedDate] = React.useState(new Date(dateProp));\n\n  if (!isValidDate(focusedDate)) {\n    focusedDate = today;\n  }\n\n  const [hoveredDate, setHoveredDate] = React.useState(new Date(focusedDate));\n  const focusRef = React.useRef();\n  const [hiddenMonthId] = React.useState(getUniqueId('hidden-month-span'));\n  const [shouldFocus, setShouldFocus] = React.useState(true);\n\n  const isValidated = date => validators.every(validator => validator(date));\n\n  const focusedDateValidated = isValidated(focusedDate);\n  useEffect(() => {\n    if (!(isValidDate(dateProp) && isSameDate(focusedDate, dateProp))) {\n      setFocusedDate(dateProp);\n    }\n  }, [dateProp]);\n  useEffect(() => {\n    // When using header controls don't move focus\n    if (shouldFocus) {\n      if (focusRef.current && focusedDateValidated) {\n        focusRef.current.focus();\n      }\n    } else {\n      setShouldFocus(true);\n    }\n  }, [focusedDate]);\n\n  const onMonthClick = newDate => {\n    setFocusedDate(newDate);\n    setHoveredDate(newDate);\n    setShouldFocus(false);\n  };\n\n  const onKeyDown = ev => {\n    const newDate = new Date(focusedDate);\n\n    if (ev.key === 'ArrowUp') {\n      newDate.setDate(newDate.getDate() - 7);\n    } else if (ev.key === 'ArrowRight') {\n      newDate.setDate(newDate.getDate() + 1);\n    } else if (ev.key === 'ArrowDown') {\n      newDate.setDate(newDate.getDate() + 7);\n    } else if (ev.key === 'ArrowLeft') {\n      newDate.setDate(newDate.getDate() - 1);\n    }\n\n    if (newDate.getTime() !== focusedDate.getTime() && isValidated(newDate)) {\n      ev.preventDefault();\n      setFocusedDate(newDate);\n      setHoveredDate(newDate);\n      setShouldFocus(true);\n    }\n  };\n\n  const addMonth = toAdd => {\n    const newDate = new Date(focusedDate);\n    newDate.setMonth(newDate.getMonth() + toAdd);\n    return newDate;\n  };\n\n  const prevMonth = addMonth(-1);\n  const nextMonth = addMonth(1);\n  const focusedYear = focusedDate.getFullYear();\n  const focusedMonth = focusedDate.getMonth();\n  const calendar = React.useMemo(() => buildCalendar(focusedYear, focusedMonth, weekStart, validators), [focusedYear, focusedMonth, weekStart]);\n\n  if (!focusedDateValidated) {\n    const toFocus = calendar.reduce((acc, cur) => [...acc, ...cur], []).filter(({\n      date,\n      isValid\n    }) => isValid && date.getMonth() === focusedMonth).map(({\n      date\n    }) => ({\n      date,\n      days: Math.abs(focusedDate.getTime() - date.getTime())\n    })).sort((o1, o2) => o1.days - o2.days).map(({\n      date\n    }) => date)[0];\n\n    if (toFocus) {\n      setFocusedDate(toFocus);\n      setHoveredDate(toFocus);\n    }\n  }\n\n  const isHoveredDateValid = isValidated(hoveredDate);\n  const monthFormatted = monthFormat(focusedDate);\n  const yearFormatted = yearFormat(focusedDate);\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.calendarMonth, className)\n  }, props), React.createElement(\"div\", {\n    className: styles.calendarMonthHeader\n  }, React.createElement(\"div\", {\n    className: css(styles.calendarMonthHeaderNavControl, styles.modifiers.prevMonth)\n  }, React.createElement(Button, {\n    variant: \"plain\",\n    \"aria-label\": prevMonthAriaLabel,\n    onClick: () => onMonthClick(prevMonth)\n  }, React.createElement(ArrowLeftIcon, {\n    \"aria-hidden\": true\n  }))), React.createElement(\"div\", {\n    className: styles.calendarMonthHeaderMonth\n  }, React.createElement(\"span\", {\n    id: hiddenMonthId,\n    hidden: true\n  }, \"Month\"), React.createElement(Select // Max width with \"September\"\n  , {\n    // Max width with \"September\"\n    width: \"140px\",\n    \"aria-labelledby\": hiddenMonthId,\n    isOpen: isSelectOpen,\n    onToggle: () => {\n      setIsSelectOpen(!isSelectOpen);\n      onSelectToggle(!isSelectOpen);\n    },\n    onSelect: (_ev, monthNum) => {\n      // When we put CalendarMonth in a Popover we want the Popover's onDocumentClick\n      // to see the SelectOption as a child so it doesn't close the Popover.\n      setTimeout(() => {\n        setIsSelectOpen(false);\n        onSelectToggle(false);\n        const newDate = new Date(focusedDate);\n        newDate.setMonth(Number(monthNum));\n        setFocusedDate(newDate);\n        setHoveredDate(newDate);\n        setShouldFocus(false);\n      }, 0);\n    },\n    variant: \"single\",\n    selections: monthFormatted\n  }, longMonths.map((longMonth, index) => React.createElement(SelectOption, {\n    key: index,\n    value: index,\n    isSelected: longMonth === monthFormatted\n  }, longMonth)))), React.createElement(\"div\", {\n    className: styles.calendarMonthHeaderYear\n  }, React.createElement(TextInput, {\n    \"aria-label\": yearInputAriaLabel,\n    type: \"number\",\n    value: yearFormatted,\n    onChange: year => {\n      const newDate = new Date(focusedDate);\n      newDate.setFullYear(+year);\n      setFocusedDate(newDate);\n      setHoveredDate(newDate);\n      setShouldFocus(false);\n    }\n  })), React.createElement(\"div\", {\n    className: css(styles.calendarMonthHeaderNavControl, styles.modifiers.nextMonth)\n  }, React.createElement(Button, {\n    variant: \"plain\",\n    \"aria-label\": nextMonthAriaLabel,\n    onClick: () => onMonthClick(nextMonth)\n  }, React.createElement(ArrowRightIcon, {\n    \"aria-hidden\": true\n  })))), React.createElement(\"table\", {\n    className: styles.calendarMonthCalendar\n  }, React.createElement(\"thead\", {\n    className: styles.calendarMonthDays\n  }, React.createElement(\"tr\", null, calendar[0].map(({\n    date\n  }, index) => React.createElement(\"th\", {\n    key: index,\n    className: styles.calendarMonthDay,\n    scope: \"col\"\n  }, React.createElement(\"span\", {\n    className: \"pf-screen-reader\"\n  }, longWeekdayFormat(date)), React.createElement(\"span\", {\n    \"aria-hidden\": true\n  }, weekdayFormat(date)))))), React.createElement(\"tbody\", {\n    onKeyDown: onKeyDown\n  }, calendar.map((week, index) => React.createElement(\"tr\", {\n    key: index,\n    className: styles.calendarMonthDatesRow\n  }, week.map(({\n    date,\n    isValid\n  }, index) => {\n    const dayFormatted = dayFormat(date);\n    const isToday = isSameDate(date, today);\n    const isSelected = isValidDate(dateProp) && isSameDate(date, dateProp);\n    const isFocused = isSameDate(date, focusedDate);\n    const isAdjacentMonth = date.getMonth() !== focusedDate.getMonth();\n    let isInRange = false;\n    let isRangeStart = false;\n    let isRangeEnd = false;\n\n    if (isValidDate(rangeStart) && isHoveredDateValid) {\n      if (hoveredDate > rangeStart || isSameDate(hoveredDate, rangeStart)) {\n        isInRange = date > rangeStart && date < hoveredDate;\n        isRangeStart = isSameDate(date, rangeStart);\n        isRangeEnd = isSameDate(date, hoveredDate);\n      } // Don't handle focused dates before start dates for now.\n      // Core would likely need new styles\n\n    }\n\n    return React.createElement(\"td\", {\n      key: index,\n      className: css(styles.calendarMonthDatesCell, isAdjacentMonth && styles.modifiers.adjacentMonth, isToday && styles.modifiers.current, (isSelected || isRangeStart) && styles.modifiers.selected, !isValid && styles.modifiers.disabled, (isInRange || isRangeStart || isRangeEnd) && styles.modifiers.inRange, isRangeStart && styles.modifiers.startRange, isRangeEnd && styles.modifiers.endRange)\n    }, React.createElement(\"button\", Object.assign({\n      className: css(styles.calendarMonthDate, isRangeEnd && styles.modifiers.hover, !isValid && styles.modifiers.disabled),\n      type: \"button\",\n      onClick: () => onChange(date),\n      onMouseOver: () => setHoveredDate(date),\n      tabIndex: isFocused ? 0 : -1,\n      disabled: !isValid,\n      \"aria-label\": cellAriaLabel ? cellAriaLabel(date) : `${dayFormatted} ${monthFormatted} ${yearFormatted}`\n    }, isFocused && {\n      ref: focusRef\n    }), dayFormatted));\n  }))))));\n};","map":{"version":3,"sources":["../../../../src/components/CalendarMonth/CalendarMonth.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport React, { useEffect } from 'react';\nimport { TextInput } from '../TextInput/TextInput';\nimport { Button } from '../Button/Button';\nimport { Select, SelectOption } from '../Select';\nimport ArrowLeftIcon from \"@patternfly/react-icons/dist/esm/icons/arrow-left-icon\";\nimport ArrowRightIcon from \"@patternfly/react-icons/dist/esm/icons/arrow-right-icon\";\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/CalendarMonth/calendar-month';\nimport { getUniqueId } from '../../helpers/util';\nexport var Weekday;\n(function (Weekday) {\n    Weekday[Weekday[\"Sunday\"] = 0] = \"Sunday\";\n    Weekday[Weekday[\"Monday\"] = 1] = \"Monday\";\n    Weekday[Weekday[\"Tuesday\"] = 2] = \"Tuesday\";\n    Weekday[Weekday[\"Wednesday\"] = 3] = \"Wednesday\";\n    Weekday[Weekday[\"Thursday\"] = 4] = \"Thursday\";\n    Weekday[Weekday[\"Friday\"] = 5] = \"Friday\";\n    Weekday[Weekday[\"Saturday\"] = 6] = \"Saturday\";\n})(Weekday || (Weekday = {}));\n// Must be numeric given current header design\nconst yearFormat = (date) => date.getFullYear();\nconst buildCalendar = (year, month, weekStart, validators) => {\n    const selectedDate = new Date(year, month);\n    const firstDayOfWeek = new Date(selectedDate);\n    firstDayOfWeek.setDate(firstDayOfWeek.getDate() - firstDayOfWeek.getDay() + weekStart);\n    // We will always show 6 weeks like google calendar\n    // Assume we just want the numbers for now...\n    const calendarWeeks = [];\n    for (let i = 0; i < 6; i++) {\n        const week = [];\n        for (let j = 0; j < 7; j++) {\n            const date = new Date(firstDayOfWeek);\n            week.push({\n                date,\n                isValid: validators.every(validator => validator(date))\n            });\n            firstDayOfWeek.setDate(firstDayOfWeek.getDate() + 1);\n        }\n        calendarWeeks.push(week);\n    }\n    return calendarWeeks;\n};\nconst isSameDate = (d1, d2) => d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();\nexport const isValidDate = (date) => Boolean(date && !isNaN(date));\nconst today = new Date();\nexport const CalendarMonth = (_a) => {\n    var { date: dateProp = today, locale = undefined, monthFormat = date => date.toLocaleDateString(locale, { month: 'long' }), weekdayFormat = date => date.toLocaleDateString(locale, { weekday: 'narrow' }), longWeekdayFormat = date => date.toLocaleDateString(locale, { weekday: 'long' }), dayFormat = date => date.getDate(), weekStart = 0, // Use the American Sunday as a default\n    onChange = () => { }, validators = [() => true], className, onSelectToggle = () => { }, rangeStart, prevMonthAriaLabel = 'Previous month', nextMonthAriaLabel = 'Next month', yearInputAriaLabel = 'Select year', cellAriaLabel } = _a, props = __rest(_a, [\"date\", \"locale\", \"monthFormat\", \"weekdayFormat\", \"longWeekdayFormat\", \"dayFormat\", \"weekStart\", \"onChange\", \"validators\", \"className\", \"onSelectToggle\", \"rangeStart\", \"prevMonthAriaLabel\", \"nextMonthAriaLabel\", \"yearInputAriaLabel\", \"cellAriaLabel\"]);\n    const longMonths = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(monthNum => new Date(1990, monthNum)).map(monthFormat);\n    const [isSelectOpen, setIsSelectOpen] = React.useState(false);\n    // eslint-disable-next-line prefer-const\n    let [focusedDate, setFocusedDate] = React.useState(new Date(dateProp));\n    if (!isValidDate(focusedDate)) {\n        focusedDate = today;\n    }\n    const [hoveredDate, setHoveredDate] = React.useState(new Date(focusedDate));\n    const focusRef = React.useRef();\n    const [hiddenMonthId] = React.useState(getUniqueId('hidden-month-span'));\n    const [shouldFocus, setShouldFocus] = React.useState(true);\n    const isValidated = (date) => validators.every(validator => validator(date));\n    const focusedDateValidated = isValidated(focusedDate);\n    useEffect(() => {\n        if (!(isValidDate(dateProp) && isSameDate(focusedDate, dateProp))) {\n            setFocusedDate(dateProp);\n        }\n    }, [dateProp]);\n    useEffect(() => {\n        // When using header controls don't move focus\n        if (shouldFocus) {\n            if (focusRef.current && focusedDateValidated) {\n                focusRef.current.focus();\n            }\n        }\n        else {\n            setShouldFocus(true);\n        }\n    }, [focusedDate]);\n    const onMonthClick = (newDate) => {\n        setFocusedDate(newDate);\n        setHoveredDate(newDate);\n        setShouldFocus(false);\n    };\n    const onKeyDown = (ev) => {\n        const newDate = new Date(focusedDate);\n        if (ev.key === 'ArrowUp') {\n            newDate.setDate(newDate.getDate() - 7);\n        }\n        else if (ev.key === 'ArrowRight') {\n            newDate.setDate(newDate.getDate() + 1);\n        }\n        else if (ev.key === 'ArrowDown') {\n            newDate.setDate(newDate.getDate() + 7);\n        }\n        else if (ev.key === 'ArrowLeft') {\n            newDate.setDate(newDate.getDate() - 1);\n        }\n        if (newDate.getTime() !== focusedDate.getTime() && isValidated(newDate)) {\n            ev.preventDefault();\n            setFocusedDate(newDate);\n            setHoveredDate(newDate);\n            setShouldFocus(true);\n        }\n    };\n    const addMonth = (toAdd) => {\n        const newDate = new Date(focusedDate);\n        newDate.setMonth(newDate.getMonth() + toAdd);\n        return newDate;\n    };\n    const prevMonth = addMonth(-1);\n    const nextMonth = addMonth(1);\n    const focusedYear = focusedDate.getFullYear();\n    const focusedMonth = focusedDate.getMonth();\n    const calendar = React.useMemo(() => buildCalendar(focusedYear, focusedMonth, weekStart, validators), [\n        focusedYear,\n        focusedMonth,\n        weekStart\n    ]);\n    if (!focusedDateValidated) {\n        const toFocus = calendar\n            .reduce((acc, cur) => [...acc, ...cur], [])\n            .filter(({ date, isValid }) => isValid && date.getMonth() === focusedMonth)\n            .map(({ date }) => ({ date, days: Math.abs(focusedDate.getTime() - date.getTime()) }))\n            .sort((o1, o2) => o1.days - o2.days)\n            .map(({ date }) => date)[0];\n        if (toFocus) {\n            setFocusedDate(toFocus);\n            setHoveredDate(toFocus);\n        }\n    }\n    const isHoveredDateValid = isValidated(hoveredDate);\n    const monthFormatted = monthFormat(focusedDate);\n    const yearFormatted = yearFormat(focusedDate);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.calendarMonth, className) }, props),\n        React.createElement(\"div\", { className: styles.calendarMonthHeader },\n            React.createElement(\"div\", { className: css(styles.calendarMonthHeaderNavControl, styles.modifiers.prevMonth) },\n                React.createElement(Button, { variant: \"plain\", \"aria-label\": prevMonthAriaLabel, onClick: () => onMonthClick(prevMonth) },\n                    React.createElement(ArrowLeftIcon, { \"aria-hidden\": true }))),\n            React.createElement(\"div\", { className: styles.calendarMonthHeaderMonth },\n                React.createElement(\"span\", { id: hiddenMonthId, hidden: true }, \"Month\"),\n                React.createElement(Select\n                // Max width with \"September\"\n                , { \n                    // Max width with \"September\"\n                    width: \"140px\", \"aria-labelledby\": hiddenMonthId, isOpen: isSelectOpen, onToggle: () => {\n                        setIsSelectOpen(!isSelectOpen);\n                        onSelectToggle(!isSelectOpen);\n                    }, onSelect: (_ev, monthNum) => {\n                        // When we put CalendarMonth in a Popover we want the Popover's onDocumentClick\n                        // to see the SelectOption as a child so it doesn't close the Popover.\n                        setTimeout(() => {\n                            setIsSelectOpen(false);\n                            onSelectToggle(false);\n                            const newDate = new Date(focusedDate);\n                            newDate.setMonth(Number(monthNum));\n                            setFocusedDate(newDate);\n                            setHoveredDate(newDate);\n                            setShouldFocus(false);\n                        }, 0);\n                    }, variant: \"single\", selections: monthFormatted }, longMonths.map((longMonth, index) => (React.createElement(SelectOption, { key: index, value: index, isSelected: longMonth === monthFormatted }, longMonth))))),\n            React.createElement(\"div\", { className: styles.calendarMonthHeaderYear },\n                React.createElement(TextInput, { \"aria-label\": yearInputAriaLabel, type: \"number\", value: yearFormatted, onChange: year => {\n                        const newDate = new Date(focusedDate);\n                        newDate.setFullYear(+year);\n                        setFocusedDate(newDate);\n                        setHoveredDate(newDate);\n                        setShouldFocus(false);\n                    } })),\n            React.createElement(\"div\", { className: css(styles.calendarMonthHeaderNavControl, styles.modifiers.nextMonth) },\n                React.createElement(Button, { variant: \"plain\", \"aria-label\": nextMonthAriaLabel, onClick: () => onMonthClick(nextMonth) },\n                    React.createElement(ArrowRightIcon, { \"aria-hidden\": true })))),\n        React.createElement(\"table\", { className: styles.calendarMonthCalendar },\n            React.createElement(\"thead\", { className: styles.calendarMonthDays },\n                React.createElement(\"tr\", null, calendar[0].map(({ date }, index) => (React.createElement(\"th\", { key: index, className: styles.calendarMonthDay, scope: \"col\" },\n                    React.createElement(\"span\", { className: \"pf-screen-reader\" }, longWeekdayFormat(date)),\n                    React.createElement(\"span\", { \"aria-hidden\": true }, weekdayFormat(date))))))),\n            React.createElement(\"tbody\", { onKeyDown: onKeyDown }, calendar.map((week, index) => (React.createElement(\"tr\", { key: index, className: styles.calendarMonthDatesRow }, week.map(({ date, isValid }, index) => {\n                const dayFormatted = dayFormat(date);\n                const isToday = isSameDate(date, today);\n                const isSelected = isValidDate(dateProp) && isSameDate(date, dateProp);\n                const isFocused = isSameDate(date, focusedDate);\n                const isAdjacentMonth = date.getMonth() !== focusedDate.getMonth();\n                let isInRange = false;\n                let isRangeStart = false;\n                let isRangeEnd = false;\n                if (isValidDate(rangeStart) && isHoveredDateValid) {\n                    if (hoveredDate > rangeStart || isSameDate(hoveredDate, rangeStart)) {\n                        isInRange = date > rangeStart && date < hoveredDate;\n                        isRangeStart = isSameDate(date, rangeStart);\n                        isRangeEnd = isSameDate(date, hoveredDate);\n                    }\n                    // Don't handle focused dates before start dates for now.\n                    // Core would likely need new styles\n                }\n                return (React.createElement(\"td\", { key: index, className: css(styles.calendarMonthDatesCell, isAdjacentMonth && styles.modifiers.adjacentMonth, isToday && styles.modifiers.current, (isSelected || isRangeStart) && styles.modifiers.selected, !isValid && styles.modifiers.disabled, (isInRange || isRangeStart || isRangeEnd) && styles.modifiers.inRange, isRangeStart && styles.modifiers.startRange, isRangeEnd && styles.modifiers.endRange) },\n                    React.createElement(\"button\", Object.assign({ className: css(styles.calendarMonthDate, isRangeEnd && styles.modifiers.hover, !isValid && styles.modifiers.disabled), type: \"button\", onClick: () => onChange(date), onMouseOver: () => setHoveredDate(date), tabIndex: isFocused ? 0 : -1, disabled: !isValid, \"aria-label\": cellAriaLabel ? cellAriaLabel(date) : `${dayFormatted} ${monthFormatted} ${yearFormatted}` }, (isFocused && { ref: focusRef })), dayFormatted)));\n            }))))))));\n};\n//# sourceMappingURL=CalendarMonth.js.map"]},"metadata":{},"sourceType":"module"}