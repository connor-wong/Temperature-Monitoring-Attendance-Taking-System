{"ast":null,"code":"/*!\n* focus-trap 6.2.2\n* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE\n*/\nimport { tabbable, isFocusable } from 'tabbable';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar activeFocusDelay;\n\nvar activeFocusTraps = function () {\n  var trapQueue = [];\n  return {\n    activateTrap: function activateTrap(trap) {\n      if (trapQueue.length > 0) {\n        var activeTrap = trapQueue[trapQueue.length - 1];\n\n        if (activeTrap !== trap) {\n          activeTrap.pause();\n        }\n      }\n\n      var trapIndex = trapQueue.indexOf(trap);\n\n      if (trapIndex === -1) {\n        trapQueue.push(trap);\n      } else {\n        // move this existing trap to the front of the queue\n        trapQueue.splice(trapIndex, 1);\n        trapQueue.push(trap);\n      }\n    },\n    deactivateTrap: function deactivateTrap(trap) {\n      var trapIndex = trapQueue.indexOf(trap);\n\n      if (trapIndex !== -1) {\n        trapQueue.splice(trapIndex, 1);\n      }\n\n      if (trapQueue.length > 0) {\n        trapQueue[trapQueue.length - 1].unpause();\n      }\n    }\n  };\n}();\n\nvar isSelectableInput = function isSelectableInput(node) {\n  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';\n};\n\nvar isEscapeEvent = function isEscapeEvent(e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\nvar isTabEvent = function isTabEvent(e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\nvar delay = function delay(fn) {\n  return setTimeout(fn, 0);\n};\n\nvar createFocusTrap = function createFocusTrap(elements, userOptions) {\n  var doc = document;\n\n  var config = _objectSpread2({\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true\n  }, userOptions);\n\n  var state = {\n    // @type {Array<HTMLElement>}\n    containers: [],\n    // list of objects identifying the first and last tabbable nodes in all containers/groups in\n    //  the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{ firstTabbableNode: HTMLElement|null, lastTabbableNode: HTMLElement|null }>}\n    tabbableGroups: [],\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false\n  };\n  var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  var containersContain = function containersContain(element) {\n    return state.containers.some(function (container) {\n      return container.contains(element);\n    });\n  };\n\n  var getNodeForOption = function getNodeForOption(optionName) {\n    var optionValue = config[optionName];\n\n    if (!optionValue) {\n      return null;\n    }\n\n    var node = optionValue;\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue);\n\n      if (!node) {\n        throw new Error(\"`\".concat(optionName, \"` refers to no known node\"));\n      }\n    }\n\n    if (typeof optionValue === 'function') {\n      node = optionValue();\n\n      if (!node) {\n        throw new Error(\"`\".concat(optionName, \"` did not return a node\"));\n      }\n    }\n\n    return node;\n  };\n\n  var getInitialFocusNode = function getInitialFocusNode() {\n    var node;\n\n    if (getNodeForOption('initialFocus') !== null) {\n      node = getNodeForOption('initialFocus');\n    } else if (containersContain(doc.activeElement)) {\n      node = doc.activeElement;\n    } else {\n      var firstTabbableGroup = state.tabbableGroups[0];\n      var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n      node = firstTabbableNode || getNodeForOption('fallbackFocus');\n    }\n\n    if (!node) {\n      throw new Error('Your focus-trap needs to have at least one focusable element');\n    }\n\n    return node;\n  };\n\n  var updateTabbableNodes = function updateTabbableNodes() {\n    state.tabbableGroups = state.containers.map(function (container) {\n      var tabbableNodes = tabbable(container);\n\n      if (tabbableNodes.length > 0) {\n        return {\n          firstTabbableNode: tabbableNodes[0],\n          lastTabbableNode: tabbableNodes[tabbableNodes.length - 1]\n        };\n      }\n\n      return undefined;\n    }).filter(function (group) {\n      return !!group;\n    }); // remove groups with no tabbable nodes\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n\n    if (state.tabbableGroups.length <= 0 && !getNodeForOption('fallbackFocus')) {\n      throw new Error('Your focus-trap must have at least one container with at least one tabbable node in it at all times');\n    }\n  };\n\n  var tryFocus = function tryFocus(node) {\n    if (node === doc.activeElement) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({\n      preventScroll: !!config.preventScroll\n    });\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {\n    var node = getNodeForOption('setReturnFocus');\n    return node ? node : previousActiveElement;\n  }; // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n\n\n  var checkPointerDown = function checkPointerDown(e) {\n    if (containersContain(e.target)) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (config.clickOutsideDeactivates) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // if, on deactivation, we should return focus to the node originally-focused\n        //  when the trap was activated (or the configured `setReturnFocus` node),\n        //  then assume it's also OK to return focus to the outside node that was\n        //  just clicked, causing deactivation, as long as that node is focusable;\n        //  if it isn't focusable, then return focus to the original node focused\n        //  on activation (or the configured `setReturnFocus` node)\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked, whether it's focusable or not; by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node)\n        returnFocus: config.returnFocusOnDeactivate && !isFocusable(e.target)\n      });\n      return;\n    } // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n\n\n    if (config.allowOutsideClick && (typeof config.allowOutsideClick === 'boolean' ? config.allowOutsideClick : config.allowOutsideClick(e))) {\n      // allow the click outside the trap to take place\n      return;\n    } // otherwise, prevent the click\n\n\n    e.preventDefault();\n  }; // In case focus escapes the trap for some strange reason, pull it back in.\n\n\n  var checkFocusIn = function checkFocusIn(e) {\n    var targetContained = containersContain(e.target); // In Firefox when you Tab out of an iframe the Document is briefly focused.\n\n    if (targetContained || e.target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = e.target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  }; // Hijack Tab events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n\n\n  var checkTab = function checkTab(e) {\n    updateTabbableNodes();\n    var destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      if (e.shiftKey) {\n        var startOfGroupIndex = state.tabbableGroups.findIndex(function (_ref) {\n          var firstTabbableNode = _ref.firstTabbableNode;\n          return e.target === firstTabbableNode;\n        });\n\n        if (startOfGroupIndex >= 0) {\n          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;\n          var destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        }\n      } else {\n        var lastOfGroupIndex = state.tabbableGroups.findIndex(function (_ref2) {\n          var lastTabbableNode = _ref2.lastTabbableNode;\n          return e.target === lastTabbableNode;\n        });\n\n        if (lastOfGroupIndex >= 0) {\n          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;\n\n          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];\n          destinationNode = _destinationGroup.firstTabbableNode;\n        }\n      }\n    } else {\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    if (destinationNode) {\n      e.preventDefault();\n      tryFocus(destinationNode);\n    }\n  };\n\n  var checkKey = function checkKey(e) {\n    if (config.escapeDeactivates !== false && isEscapeEvent(e)) {\n      e.preventDefault();\n      trap.deactivate();\n      return;\n    }\n\n    if (isTabEvent(e)) {\n      checkTab(e);\n      return;\n    }\n  };\n\n  var checkClick = function checkClick(e) {\n    if (config.clickOutsideDeactivates) {\n      return;\n    }\n\n    if (containersContain(e.target)) {\n      return;\n    }\n\n    if (config.allowOutsideClick && (typeof config.allowOutsideClick === 'boolean' ? config.allowOutsideClick : config.allowOutsideClick(e))) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  }; //\n  // EVENT LISTENERS\n  //\n\n\n  var addListeners = function addListeners() {\n    if (!state.active) {\n      return;\n    } // There can be only one listening focus trap at a time\n\n\n    activeFocusTraps.activateTrap(trap); // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n\n    activeFocusDelay = config.delayInitialFocus ? delay(function () {\n      tryFocus(getInitialFocusNode());\n    }) : tryFocus(getInitialFocusNode());\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false\n    });\n    return trap;\n  };\n\n  var removeListeners = function removeListeners() {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n    return trap;\n  }; //\n  // TRAP DEFINITION\n  //\n\n\n  trap = {\n    activate: function activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      updateTabbableNodes();\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n      var onActivate = activateOptions && activateOptions.onActivate ? activateOptions.onActivate : config.onActivate;\n\n      if (onActivate) {\n        onActivate();\n      }\n\n      addListeners();\n      return this;\n    },\n    deactivate: function deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      clearTimeout(activeFocusDelay);\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      activeFocusTraps.deactivateTrap(trap);\n      var onDeactivate = deactivateOptions && deactivateOptions.onDeactivate !== undefined ? deactivateOptions.onDeactivate : config.onDeactivate;\n\n      if (onDeactivate) {\n        onDeactivate();\n      }\n\n      var returnFocus = deactivateOptions && deactivateOptions.returnFocus !== undefined ? deactivateOptions.returnFocus : config.returnFocusOnDeactivate;\n\n      if (returnFocus) {\n        delay(function () {\n          tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n        });\n      }\n\n      return this;\n    },\n    pause: function pause() {\n      if (state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = true;\n      removeListeners();\n      return this;\n    },\n    unpause: function unpause() {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = false;\n      updateTabbableNodes();\n      addListeners();\n      return this;\n    },\n    updateContainerElements: function updateContainerElements(containerElements) {\n      var elementsAsArray = [].concat(containerElements).filter(Boolean);\n      state.containers = elementsAsArray.map(function (element) {\n        return typeof element === 'string' ? doc.querySelector(element) : element;\n      });\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      return this;\n    }\n  }; // initialize container elements\n\n  trap.updateContainerElements(elements);\n  return trap;\n};\n\nexport { createFocusTrap };","map":{"version":3,"sources":["../index.js"],"names":["activeFocusTraps","trapQueue","activateTrap","activeTrap","trapIndex","deactivateTrap","isSelectableInput","node","isEscapeEvent","e","isTabEvent","delay","setTimeout","createFocusTrap","doc","config","returnFocusOnDeactivate","escapeDeactivates","delayInitialFocus","state","containers","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","active","paused","containersContain","container","getNodeForOption","optionValue","getInitialFocusNode","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","tabbableNodes","tabbable","lastTabbableNode","tryFocus","preventScroll","getReturnFocusNode","checkPointerDown","trap","returnFocus","isFocusable","checkFocusIn","targetContained","checkTab","destinationNode","startOfGroupIndex","destinationGroupIndex","destinationGroup","lastOfGroupIndex","checkKey","checkClick","addListeners","activeFocusDelay","capture","passive","removeListeners","activate","onActivate","activateOptions","deactivate","clearTimeout","onDeactivate","deactivateOptions","pause","unpause","updateContainerElements","elementsAsArray"],"mappings":"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","sourcesContent":["import { tabbable, isFocusable } from 'tabbable';\n\nlet activeFocusDelay;\n\nconst activeFocusTraps = (function () {\n  const trapQueue = [];\n  return {\n    activateTrap(trap) {\n      if (trapQueue.length > 0) {\n        const activeTrap = trapQueue[trapQueue.length - 1];\n        if (activeTrap !== trap) {\n          activeTrap.pause();\n        }\n      }\n\n      const trapIndex = trapQueue.indexOf(trap);\n      if (trapIndex === -1) {\n        trapQueue.push(trap);\n      } else {\n        // move this existing trap to the front of the queue\n        trapQueue.splice(trapIndex, 1);\n        trapQueue.push(trap);\n      }\n    },\n\n    deactivateTrap(trap) {\n      const trapIndex = trapQueue.indexOf(trap);\n      if (trapIndex !== -1) {\n        trapQueue.splice(trapIndex, 1);\n      }\n\n      if (trapQueue.length > 0) {\n        trapQueue[trapQueue.length - 1].unpause();\n      }\n    },\n  };\n})();\n\nconst isSelectableInput = function (node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\nconst isEscapeEvent = function (e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\nconst isTabEvent = function (e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\nconst delay = function (fn) {\n  return setTimeout(fn, 0);\n};\n\nconst createFocusTrap = function (elements, userOptions) {\n  const doc = document;\n\n  const config = {\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    ...userOptions,\n  };\n\n  const state = {\n    // @type {Array<HTMLElement>}\n    containers: [],\n\n    // list of objects identifying the first and last tabbable nodes in all containers/groups in\n    //  the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{ firstTabbableNode: HTMLElement|null, lastTabbableNode: HTMLElement|null }>}\n    tabbableGroups: [],\n\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n  };\n\n  let trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  const containersContain = function (element) {\n    return state.containers.some((container) => container.contains(element));\n  };\n\n  const getNodeForOption = function (optionName) {\n    const optionValue = config[optionName];\n    if (!optionValue) {\n      return null;\n    }\n\n    let node = optionValue;\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue);\n      if (!node) {\n        throw new Error(`\\`${optionName}\\` refers to no known node`);\n      }\n    }\n\n    if (typeof optionValue === 'function') {\n      node = optionValue();\n      if (!node) {\n        throw new Error(`\\`${optionName}\\` did not return a node`);\n      }\n    }\n\n    return node;\n  };\n\n  const getInitialFocusNode = function () {\n    let node;\n\n    if (getNodeForOption('initialFocus') !== null) {\n      node = getNodeForOption('initialFocus');\n    } else if (containersContain(doc.activeElement)) {\n      node = doc.activeElement;\n    } else {\n      const firstTabbableGroup = state.tabbableGroups[0];\n      const firstTabbableNode =\n        firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n      node = firstTabbableNode || getNodeForOption('fallbackFocus');\n    }\n\n    if (!node) {\n      throw new Error(\n        'Your focus-trap needs to have at least one focusable element'\n      );\n    }\n\n    return node;\n  };\n\n  const updateTabbableNodes = function () {\n    state.tabbableGroups = state.containers\n      .map((container) => {\n        const tabbableNodes = tabbable(container);\n\n        if (tabbableNodes.length > 0) {\n          return {\n            firstTabbableNode: tabbableNodes[0],\n            lastTabbableNode: tabbableNodes[tabbableNodes.length - 1],\n          };\n        }\n\n        return undefined;\n      })\n      .filter((group) => !!group); // remove groups with no tabbable nodes\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (\n      state.tabbableGroups.length <= 0 &&\n      !getNodeForOption('fallbackFocus')\n    ) {\n      throw new Error(\n        'Your focus-trap must have at least one container with at least one tabbable node in it at all times'\n      );\n    }\n  };\n\n  const tryFocus = function (node) {\n    if (node === doc.activeElement) {\n      return;\n    }\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({ preventScroll: !!config.preventScroll });\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  const getReturnFocusNode = function (previousActiveElement) {\n    const node = getNodeForOption('setReturnFocus');\n\n    return node ? node : previousActiveElement;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  const checkPointerDown = function (e) {\n    if (containersContain(e.target)) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (config.clickOutsideDeactivates) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // if, on deactivation, we should return focus to the node originally-focused\n        //  when the trap was activated (or the configured `setReturnFocus` node),\n        //  then assume it's also OK to return focus to the outside node that was\n        //  just clicked, causing deactivation, as long as that node is focusable;\n        //  if it isn't focusable, then return focus to the original node focused\n        //  on activation (or the configured `setReturnFocus` node)\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked, whether it's focusable or not; by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node)\n        returnFocus: config.returnFocusOnDeactivate && !isFocusable(e.target),\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (\n      config.allowOutsideClick &&\n      (typeof config.allowOutsideClick === 'boolean'\n        ? config.allowOutsideClick\n        : config.allowOutsideClick(e))\n    ) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  const checkFocusIn = function (e) {\n    const targetContained = containersContain(e.target);\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || e.target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = e.target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  };\n\n  // Hijack Tab events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  const checkTab = function (e) {\n    updateTabbableNodes();\n\n    let destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      if (e.shiftKey) {\n        const startOfGroupIndex = state.tabbableGroups.findIndex(\n          ({ firstTabbableNode }) => e.target === firstTabbableNode\n        );\n\n        if (startOfGroupIndex >= 0) {\n          const destinationGroupIndex =\n            startOfGroupIndex === 0\n              ? state.tabbableGroups.length - 1\n              : startOfGroupIndex - 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        }\n      } else {\n        const lastOfGroupIndex = state.tabbableGroups.findIndex(\n          ({ lastTabbableNode }) => e.target === lastTabbableNode\n        );\n\n        if (lastOfGroupIndex >= 0) {\n          const destinationGroupIndex =\n            lastOfGroupIndex === state.tabbableGroups.length - 1\n              ? 0\n              : lastOfGroupIndex + 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.firstTabbableNode;\n        }\n      }\n    } else {\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    if (destinationNode) {\n      e.preventDefault();\n      tryFocus(destinationNode);\n    }\n  };\n\n  const checkKey = function (e) {\n    if (config.escapeDeactivates !== false && isEscapeEvent(e)) {\n      e.preventDefault();\n      trap.deactivate();\n      return;\n    }\n\n    if (isTabEvent(e)) {\n      checkTab(e);\n      return;\n    }\n  };\n\n  const checkClick = function (e) {\n    if (config.clickOutsideDeactivates) {\n      return;\n    }\n\n    if (containersContain(e.target)) {\n      return;\n    }\n\n    if (\n      config.allowOutsideClick &&\n      (typeof config.allowOutsideClick === 'boolean'\n        ? config.allowOutsideClick\n        : config.allowOutsideClick(e))\n    ) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  const addListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    activeFocusDelay = config.delayInitialFocus\n      ? delay(function () {\n          tryFocus(getInitialFocusNode());\n        })\n      : tryFocus(getInitialFocusNode());\n\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false,\n    });\n\n    return trap;\n  };\n\n  const removeListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n\n    return trap;\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      updateTabbableNodes();\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n\n      const onActivate =\n        activateOptions && activateOptions.onActivate\n          ? activateOptions.onActivate\n          : config.onActivate;\n      if (onActivate) {\n        onActivate();\n      }\n\n      addListeners();\n      return this;\n    },\n\n    deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      clearTimeout(activeFocusDelay);\n\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n\n      activeFocusTraps.deactivateTrap(trap);\n\n      const onDeactivate =\n        deactivateOptions && deactivateOptions.onDeactivate !== undefined\n          ? deactivateOptions.onDeactivate\n          : config.onDeactivate;\n      if (onDeactivate) {\n        onDeactivate();\n      }\n\n      const returnFocus =\n        deactivateOptions && deactivateOptions.returnFocus !== undefined\n          ? deactivateOptions.returnFocus\n          : config.returnFocusOnDeactivate;\n\n      if (returnFocus) {\n        delay(function () {\n          tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n        });\n      }\n\n      return this;\n    },\n\n    pause() {\n      if (state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = true;\n      removeListeners();\n\n      return this;\n    },\n\n    unpause() {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = false;\n      updateTabbableNodes();\n      addListeners();\n\n      return this;\n    },\n\n    updateContainerElements(containerElements) {\n      const elementsAsArray = [].concat(containerElements).filter(Boolean);\n\n      state.containers = elementsAsArray.map((element) =>\n        typeof element === 'string' ? doc.querySelector(element) : element\n      );\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      return this;\n    },\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n\n  return trap;\n};\n\nexport { createFocusTrap };\n"]},"metadata":{},"sourceType":"module"}