{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nimport AngleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-right-icon\";\nimport { Badge } from '../Badge';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nexport const TreeViewListItem = ({\n  name,\n  id,\n  isExpanded,\n  defaultExpanded = false,\n  children = null,\n  onSelect,\n  onCheck,\n  hasCheck = false,\n  checkProps = {\n    checked: false\n  },\n  hasBadge = false,\n  customBadgeContent,\n  badgeProps = {\n    isRead: true\n  },\n  activeItems = [],\n  itemData,\n  parentItem,\n  icon,\n  expandedIcon,\n  action,\n  compareItems\n}) => {\n  const [internalIsExpanded, setIsExpanded] = useState(defaultExpanded);\n  useEffect(() => {\n    if (isExpanded !== undefined && isExpanded !== null) {\n      setIsExpanded(isExpanded);\n    }\n  }, [isExpanded]);\n  const Component = hasCheck ? 'div' : 'button';\n  const ToggleComponent = hasCheck ? 'button' : 'div';\n  return React.createElement(\"li\", Object.assign({\n    id: id,\n    className: css(styles.treeViewListItem, internalIsExpanded && styles.modifiers.expanded)\n  }, internalIsExpanded && {\n    'aria-expanded': 'true'\n  }, {\n    role: children ? 'treeitem' : 'none',\n    tabIndex: -1\n  }), React.createElement(\"div\", {\n    className: css(styles.treeViewContent)\n  }, React.createElement(GenerateId, {\n    prefix: \"checkbox-id\"\n  }, randomId => React.createElement(Component, Object.assign({\n    className: css(styles.treeViewNode, !children && activeItems && activeItems.length > 0 && activeItems.some(item => compareItems && item && compareItems(item, itemData)) ? styles.modifiers.current : ''),\n    onClick: evt => {\n      if (!hasCheck) {\n        if (children) {\n          setIsExpanded(!internalIsExpanded);\n        }\n\n        onSelect && onSelect(evt, itemData, parentItem);\n      }\n    }\n  }, !children && {\n    role: 'treeitem'\n  }, {\n    tabIndex: -1\n  }), children && React.createElement(ToggleComponent, Object.assign({\n    className: css(styles.treeViewNodeToggle),\n    onClick: () => {\n      if (hasCheck) {\n        setIsExpanded(!internalIsExpanded);\n      }\n    }\n  }, hasCheck && {\n    'aria-labelledby': `label-${randomId}`\n  }, {\n    tabIndex: -1\n  }), React.createElement(\"span\", {\n    className: css(styles.treeViewNodeToggleIcon)\n  }, React.createElement(AngleRightIcon, {\n    \"aria-hidden\": \"true\"\n  }))), hasCheck && React.createElement(\"span\", {\n    className: css(styles.treeViewNodeCheck)\n  }, React.createElement(\"input\", Object.assign({\n    type: \"checkbox\",\n    onChange: evt => onCheck && onCheck(evt, itemData, parentItem),\n    onClick: evt => evt.stopPropagation(),\n    ref: elem => elem && (elem.indeterminate = checkProps.checked === null)\n  }, checkProps, {\n    id: randomId,\n    tabIndex: -1\n  }))), icon && React.createElement(\"span\", {\n    className: css(styles.treeViewNodeIcon)\n  }, !internalIsExpanded && icon, internalIsExpanded && (expandedIcon || icon)), hasCheck ? React.createElement(\"label\", {\n    className: css(styles.treeViewNodeText),\n    htmlFor: randomId,\n    id: `label-${randomId}`\n  }, name) : React.createElement(\"span\", {\n    className: css(styles.treeViewNodeText)\n  }, name), hasBadge && children && React.createElement(\"span\", {\n    className: css(styles.treeViewNodeCount)\n  }, React.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent ? customBadgeContent : children.props.data.length)))), action && React.createElement(\"div\", {\n    className: css(styles.treeViewAction)\n  }, action)), internalIsExpanded && children);\n};\nTreeViewListItem.displayName = 'TreeViewListItem';","map":{"version":3,"sources":["../../../../src/components/TreeView/TreeViewListItem.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nimport AngleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-right-icon\";\nimport { Badge } from '../Badge';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nexport const TreeViewListItem = ({ name, id, isExpanded, defaultExpanded = false, children = null, onSelect, onCheck, hasCheck = false, checkProps = {\n    checked: false\n}, hasBadge = false, customBadgeContent, badgeProps = { isRead: true }, activeItems = [], itemData, parentItem, icon, expandedIcon, action, compareItems }) => {\n    const [internalIsExpanded, setIsExpanded] = useState(defaultExpanded);\n    useEffect(() => {\n        if (isExpanded !== undefined && isExpanded !== null) {\n            setIsExpanded(isExpanded);\n        }\n    }, [isExpanded]);\n    const Component = hasCheck ? 'div' : 'button';\n    const ToggleComponent = hasCheck ? 'button' : 'div';\n    return (React.createElement(\"li\", Object.assign({ id: id, className: css(styles.treeViewListItem, internalIsExpanded && styles.modifiers.expanded) }, (internalIsExpanded && { 'aria-expanded': 'true' }), { role: children ? 'treeitem' : 'none', tabIndex: -1 }),\n        React.createElement(\"div\", { className: css(styles.treeViewContent) },\n            React.createElement(GenerateId, { prefix: \"checkbox-id\" }, randomId => (React.createElement(Component, Object.assign({ className: css(styles.treeViewNode, !children &&\n                    activeItems &&\n                    activeItems.length > 0 &&\n                    activeItems.some(item => compareItems && item && compareItems(item, itemData))\n                    ? styles.modifiers.current\n                    : ''), onClick: (evt) => {\n                    if (!hasCheck) {\n                        if (children) {\n                            setIsExpanded(!internalIsExpanded);\n                        }\n                        onSelect && onSelect(evt, itemData, parentItem);\n                    }\n                } }, (!children && { role: 'treeitem' }), { tabIndex: -1 }),\n                children && (React.createElement(ToggleComponent, Object.assign({ className: css(styles.treeViewNodeToggle), onClick: () => {\n                        if (hasCheck) {\n                            setIsExpanded(!internalIsExpanded);\n                        }\n                    } }, (hasCheck && { 'aria-labelledby': `label-${randomId}` }), { tabIndex: -1 }),\n                    React.createElement(\"span\", { className: css(styles.treeViewNodeToggleIcon) },\n                        React.createElement(AngleRightIcon, { \"aria-hidden\": \"true\" })))),\n                hasCheck && (React.createElement(\"span\", { className: css(styles.treeViewNodeCheck) },\n                    React.createElement(\"input\", Object.assign({ type: \"checkbox\", onChange: (evt) => onCheck && onCheck(evt, itemData, parentItem), onClick: (evt) => evt.stopPropagation(), ref: elem => elem && (elem.indeterminate = checkProps.checked === null) }, checkProps, { id: randomId, tabIndex: -1 })))),\n                icon && (React.createElement(\"span\", { className: css(styles.treeViewNodeIcon) },\n                    !internalIsExpanded && icon,\n                    internalIsExpanded && (expandedIcon || icon))),\n                hasCheck ? (React.createElement(\"label\", { className: css(styles.treeViewNodeText), htmlFor: randomId, id: `label-${randomId}` }, name)) : (React.createElement(\"span\", { className: css(styles.treeViewNodeText) }, name)),\n                hasBadge && children && (React.createElement(\"span\", { className: css(styles.treeViewNodeCount) },\n                    React.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent ? customBadgeContent : children.props.data.length)))))),\n            action && React.createElement(\"div\", { className: css(styles.treeViewAction) }, action)),\n        internalIsExpanded && children));\n};\nTreeViewListItem.displayName = 'TreeViewListItem';\n//# sourceMappingURL=TreeViewListItem.js.map"]},"metadata":{},"sourceType":"module"}