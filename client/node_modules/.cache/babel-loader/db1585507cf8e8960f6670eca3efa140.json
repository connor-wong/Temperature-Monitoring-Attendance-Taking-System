{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport modalStyles from '@patternfly/react-styles/css/components/ModalBox/modal-box';\nimport { css } from '@patternfly/react-styles';\nimport accessibleStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport { capitalize } from '../../helpers';\nimport { Tooltip } from '../Tooltip';\nimport CheckCircleIcon from \"@patternfly/react-icons/dist/esm/icons/check-circle-icon\";\nimport ExclamationCircleIcon from \"@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon\";\nimport ExclamationTriangleIcon from \"@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon\";\nimport InfoCircleIcon from \"@patternfly/react-icons/dist/esm/icons/info-circle-icon\";\nimport BellIcon from \"@patternfly/react-icons/dist/esm/icons/bell-icon\";\nexport const isVariantIcon = icon => ['success', 'danger', 'warning', 'info', 'defaut'].includes(icon);\nexport const ModalBoxTitle = _a => {\n  var {\n    className = '',\n    id,\n    title,\n    titleIconVariant,\n    titleLabel = ''\n  } = _a,\n      props = __rest(_a, [\"className\", \"id\", \"title\", \"titleIconVariant\", \"titleLabel\"]);\n\n  const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n  const h1 = React.useRef();\n  const label = titleLabel || (isVariantIcon(titleIconVariant) ? `${capitalize(titleIconVariant)} alert:` : titleLabel);\n  const variantIcons = {\n    success: React.createElement(CheckCircleIcon, null),\n    danger: React.createElement(ExclamationCircleIcon, null),\n    warning: React.createElement(ExclamationTriangleIcon, null),\n    info: React.createElement(InfoCircleIcon, null),\n    default: React.createElement(BellIcon, null)\n  };\n  const CustomIcon = !isVariantIcon(titleIconVariant) && titleIconVariant;\n  React.useLayoutEffect(() => {\n    setIsTooltipVisible(h1.current && h1.current.offsetWidth < h1.current.scrollWidth);\n  }, []);\n  const content = React.createElement(\"h1\", Object.assign({\n    id: id,\n    ref: h1,\n    className: css(modalStyles.modalBoxTitle, titleIconVariant && modalStyles.modifiers.icon, className)\n  }, props), titleIconVariant && React.createElement(\"span\", {\n    className: css(modalStyles.modalBoxTitleIcon)\n  }, isVariantIcon(titleIconVariant) ? variantIcons[titleIconVariant] : React.createElement(CustomIcon, null)), label && React.createElement(\"span\", {\n    className: css(accessibleStyles.screenReader)\n  }, label), React.createElement(\"span\", {\n    className: css(modalStyles.modalBoxTitleText)\n  }, title));\n  return isTooltipVisible ? React.createElement(Tooltip, {\n    content: title,\n    isVisible: true\n  }, content) : content;\n};\nModalBoxTitle.displayName = 'ModalBoxTitle';","map":{"version":3,"sources":["../../../../src/components/Modal/ModalBoxTitle.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport modalStyles from '@patternfly/react-styles/css/components/ModalBox/modal-box';\nimport { css } from '@patternfly/react-styles';\nimport accessibleStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport { capitalize } from '../../helpers';\nimport { Tooltip } from '../Tooltip';\nimport CheckCircleIcon from \"@patternfly/react-icons/dist/esm/icons/check-circle-icon\";\nimport ExclamationCircleIcon from \"@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon\";\nimport ExclamationTriangleIcon from \"@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon\";\nimport InfoCircleIcon from \"@patternfly/react-icons/dist/esm/icons/info-circle-icon\";\nimport BellIcon from \"@patternfly/react-icons/dist/esm/icons/bell-icon\";\nexport const isVariantIcon = (icon) => ['success', 'danger', 'warning', 'info', 'defaut'].includes(icon);\nexport const ModalBoxTitle = (_a) => {\n    var { className = '', id, title, titleIconVariant, titleLabel = '' } = _a, props = __rest(_a, [\"className\", \"id\", \"title\", \"titleIconVariant\", \"titleLabel\"]);\n    const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n    const h1 = React.useRef();\n    const label = titleLabel || (isVariantIcon(titleIconVariant) ? `${capitalize(titleIconVariant)} alert:` : titleLabel);\n    const variantIcons = {\n        success: React.createElement(CheckCircleIcon, null),\n        danger: React.createElement(ExclamationCircleIcon, null),\n        warning: React.createElement(ExclamationTriangleIcon, null),\n        info: React.createElement(InfoCircleIcon, null),\n        default: React.createElement(BellIcon, null)\n    };\n    const CustomIcon = !isVariantIcon(titleIconVariant) && titleIconVariant;\n    React.useLayoutEffect(() => {\n        setIsTooltipVisible(h1.current && h1.current.offsetWidth < h1.current.scrollWidth);\n    }, []);\n    const content = (React.createElement(\"h1\", Object.assign({ id: id, ref: h1, className: css(modalStyles.modalBoxTitle, titleIconVariant && modalStyles.modifiers.icon, className) }, props),\n        titleIconVariant && (React.createElement(\"span\", { className: css(modalStyles.modalBoxTitleIcon) }, isVariantIcon(titleIconVariant) ? variantIcons[titleIconVariant] : React.createElement(CustomIcon, null))),\n        label && React.createElement(\"span\", { className: css(accessibleStyles.screenReader) }, label),\n        React.createElement(\"span\", { className: css(modalStyles.modalBoxTitleText) }, title)));\n    return isTooltipVisible ? (React.createElement(Tooltip, { content: title, isVisible: true }, content)) : (content);\n};\nModalBoxTitle.displayName = 'ModalBoxTitle';\n//# sourceMappingURL=ModalBoxTitle.js.map"]},"metadata":{},"sourceType":"module"}