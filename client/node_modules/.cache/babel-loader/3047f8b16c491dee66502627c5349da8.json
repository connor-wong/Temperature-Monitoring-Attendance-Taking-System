{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/JumpLinks/jump-links';\nimport sidebarStyles from '@patternfly/react-styles/css/components/Sidebar/sidebar';\nimport { JumpLinksItem } from './JumpLinksItem';\nimport { JumpLinksList } from './JumpLinksList';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { Button } from '../Button';\nimport AngleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-right-icon\";\nimport cssToggleDisplayVar from \"@patternfly/react-tokens/dist/esm/c_jump_links__toggle_Display\"; // Recursively find JumpLinkItems and return an array of all their scrollNodes\n\nconst getScrollItems = (children, res) => {\n  React.Children.forEach(children, child => {\n    if (typeof document !== 'undefined' && child.type === JumpLinksItem) {\n      const scrollNode = child.props.node || child.props.href;\n\n      if (typeof scrollNode === 'string') {\n        if (scrollNode.startsWith('#')) {\n          // Allow spaces and other special characters as `id`s to be nicer to consumers\n          // https://stackoverflow.com/questions/70579/what-are-valid-values-for-the-id-attribute-in-html\n          res.push(document.getElementById(scrollNode.substr(1)));\n        } else {\n          res.push(document.querySelector(scrollNode));\n        }\n      } else if (scrollNode instanceof HTMLElement) {\n        res.push(scrollNode);\n      }\n    }\n\n    if ([React.Fragment, JumpLinksList, JumpLinksItem].includes(child.type)) {\n      getScrollItems(child.props.children, res);\n    }\n  });\n  return res;\n};\n\nfunction isResponsive(jumpLinks) {\n  // https://github.com/patternfly/patternfly/blob/master/src/patternfly/components/JumpLinks/jump-links.scss#L103\n  return jumpLinks && getComputedStyle(jumpLinks).getPropertyValue(cssToggleDisplayVar.name).includes('block');\n}\n\nexport const JumpLinks = _a => {\n  var {\n    isCentered,\n    isVertical,\n    children,\n    label,\n    'aria-label': ariaLabel = typeof label === 'string' ? label : null,\n    scrollableSelector,\n    activeIndex: activeIndexProp = 0,\n    offset = 0,\n    expandable,\n    isExpanded: isExpandedProp = false,\n    alwaysShowLabel = true,\n    toggleAriaLabel = 'Toggle jump links',\n    className\n  } = _a,\n      props = __rest(_a, [\"isCentered\", \"isVertical\", \"children\", \"label\", 'aria-label', \"scrollableSelector\", \"activeIndex\", \"offset\", \"expandable\", \"isExpanded\", \"alwaysShowLabel\", \"toggleAriaLabel\", \"className\"]);\n\n  const hasScrollSpy = Boolean(scrollableSelector);\n  const [scrollItems, setScrollItems] = React.useState(hasScrollSpy ? getScrollItems(children, []) : []);\n  const [activeIndex, setActiveIndex] = React.useState(activeIndexProp);\n  const [isExpanded, setIsExpanded] = React.useState(isExpandedProp); // Allow expanding to be controlled for a niche use case\n\n  React.useEffect(() => setIsExpanded(isExpandedProp), [isExpandedProp]);\n  const navRef = React.useRef();\n\n  if (hasScrollSpy) {\n    React.useEffect(() => {\n      if (typeof window === 'undefined') {\n        return;\n      }\n\n      const scrollableElement = document.querySelector(scrollableSelector);\n\n      if (!(scrollableElement instanceof HTMLElement)) {\n        return;\n      }\n\n      function scrollSpy() {\n        const scrollPosition = Math.ceil(scrollableElement.scrollTop + offset);\n        window.requestAnimationFrame(() => {\n          let newScrollItems = scrollItems; // Items might have rendered after this component. Do a quick refresh.\n\n          if (!newScrollItems[0]) {\n            newScrollItems = getScrollItems(children, []);\n            setScrollItems(newScrollItems);\n          }\n\n          const scrollElements = newScrollItems.map((e, index) => ({\n            y: e ? e.offsetTop : null,\n            index\n          })).filter(({\n            y\n          }) => y !== null).sort((e1, e2) => e2.y - e1.y);\n\n          for (const {\n            y,\n            index\n          } of scrollElements) {\n            if (scrollPosition >= y) {\n              return setActiveIndex(index);\n            }\n          }\n        });\n      }\n\n      if (scrollableElement) {\n        scrollSpy();\n        scrollableElement.addEventListener('scroll', scrollSpy);\n      }\n\n      return () => scrollableElement.removeEventListener('scroll', scrollSpy);\n    }, [scrollItems, hasScrollSpy]);\n  }\n\n  let jumpLinkIndex = 0;\n\n  const cloneChildren = children => !hasScrollSpy ? children : React.Children.map(children, child => {\n    if (child.type === JumpLinksItem) {\n      const {\n        onClick: onClickProp,\n        isActive: isActiveProp\n      } = child.props;\n      const itemIndex = jumpLinkIndex++;\n      const scrollItem = scrollItems[itemIndex];\n      return React.cloneElement(child, {\n        onClick(ev) {\n          // Items might have rendered after this component. Do a quick refresh.\n          let newScrollItems;\n\n          if (!scrollItem) {\n            newScrollItems = getScrollItems(children, []);\n            setScrollItems(newScrollItems);\n          }\n\n          const newScrollItem = scrollItem || newScrollItems[itemIndex];\n\n          if (newScrollItem) {\n            // we have to support scrolling to an offset due to sticky sidebar\n            const scrollableElement = document.querySelector(scrollableSelector);\n\n            if (scrollableElement instanceof HTMLElement) {\n              if (isResponsive(navRef.current)) {\n                // Remove class immediately so we can get collapsed height\n                if (navRef.current) {\n                  navRef.current.classList.remove(styles.modifiers.expanded);\n                }\n\n                let stickyParent = navRef.current && navRef.current.parentElement;\n\n                while (stickyParent && !stickyParent.classList.contains(sidebarStyles.modifiers.sticky)) {\n                  stickyParent = stickyParent.parentElement;\n                }\n\n                setIsExpanded(false);\n\n                if (stickyParent) {\n                  offset += stickyParent.scrollHeight;\n                }\n              }\n\n              scrollableElement.scrollTo(0, newScrollItem.offsetTop - offset);\n            }\n\n            newScrollItem.focus();\n            ev.preventDefault();\n          }\n\n          if (onClickProp) {\n            onClickProp(ev);\n          }\n        },\n\n        isActive: isActiveProp || activeIndex === itemIndex,\n        children: cloneChildren(child.props.children)\n      });\n    } else if (child.type === React.Fragment) {\n      return cloneChildren(child.props.children);\n    } else if (child.type === JumpLinksList) {\n      return React.cloneElement(child, {\n        children: cloneChildren(child.props.children)\n      });\n    }\n\n    return child;\n  });\n\n  return React.createElement(\"nav\", Object.assign({\n    className: css(styles.jumpLinks, isCentered && styles.modifiers.center, isVertical && styles.modifiers.vertical, formatBreakpointMods(expandable, styles), isExpanded && styles.modifiers.expanded, className),\n    \"aria-label\": ariaLabel,\n    ref: navRef\n  }, props), React.createElement(\"div\", {\n    className: styles.jumpLinksMain\n  }, React.createElement(\"div\", {\n    className: styles.jumpLinksHeader\n  }, expandable && React.createElement(\"div\", {\n    className: styles.jumpLinksToggle\n  }, React.createElement(Button, {\n    variant: \"plain\",\n    onClick: () => setIsExpanded(!isExpanded),\n    \"aria-label\": toggleAriaLabel,\n    \"aria-expanded\": isExpanded\n  }, React.createElement(\"span\", {\n    className: styles.jumpLinksToggleIcon\n  }, React.createElement(AngleRightIcon, null)))), label && React.createElement(\"div\", {\n    className: css(styles.jumpLinksLabel, expandable && !alwaysShowLabel && styles.modifiers.toggle)\n  }, label)), React.createElement(\"ul\", {\n    className: styles.jumpLinksList\n  }, cloneChildren(children))));\n};\nJumpLinks.displayName = 'JumpLinks';","map":{"version":3,"sources":["../../../../src/components/JumpLinks/JumpLinks.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/JumpLinks/jump-links';\nimport sidebarStyles from '@patternfly/react-styles/css/components/Sidebar/sidebar';\nimport { JumpLinksItem } from './JumpLinksItem';\nimport { JumpLinksList } from './JumpLinksList';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { Button } from '../Button';\nimport AngleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-right-icon\";\nimport cssToggleDisplayVar from \"@patternfly/react-tokens/dist/esm/c_jump_links__toggle_Display\";\n// Recursively find JumpLinkItems and return an array of all their scrollNodes\nconst getScrollItems = (children, res) => {\n    React.Children.forEach(children, (child) => {\n        if (typeof document !== 'undefined' && child.type === JumpLinksItem) {\n            const scrollNode = child.props.node || child.props.href;\n            if (typeof scrollNode === 'string') {\n                if (scrollNode.startsWith('#')) {\n                    // Allow spaces and other special characters as `id`s to be nicer to consumers\n                    // https://stackoverflow.com/questions/70579/what-are-valid-values-for-the-id-attribute-in-html\n                    res.push(document.getElementById(scrollNode.substr(1)));\n                }\n                else {\n                    res.push(document.querySelector(scrollNode));\n                }\n            }\n            else if (scrollNode instanceof HTMLElement) {\n                res.push(scrollNode);\n            }\n        }\n        if ([React.Fragment, JumpLinksList, JumpLinksItem].includes(child.type)) {\n            getScrollItems(child.props.children, res);\n        }\n    });\n    return res;\n};\nfunction isResponsive(jumpLinks) {\n    // https://github.com/patternfly/patternfly/blob/master/src/patternfly/components/JumpLinks/jump-links.scss#L103\n    return (jumpLinks &&\n        getComputedStyle(jumpLinks)\n            .getPropertyValue(cssToggleDisplayVar.name)\n            .includes('block'));\n}\nexport const JumpLinks = (_a) => {\n    var { isCentered, isVertical, children, label, 'aria-label': ariaLabel = typeof label === 'string' ? label : null, scrollableSelector, activeIndex: activeIndexProp = 0, offset = 0, expandable, isExpanded: isExpandedProp = false, alwaysShowLabel = true, toggleAriaLabel = 'Toggle jump links', className } = _a, props = __rest(_a, [\"isCentered\", \"isVertical\", \"children\", \"label\", 'aria-label', \"scrollableSelector\", \"activeIndex\", \"offset\", \"expandable\", \"isExpanded\", \"alwaysShowLabel\", \"toggleAriaLabel\", \"className\"]);\n    const hasScrollSpy = Boolean(scrollableSelector);\n    const [scrollItems, setScrollItems] = React.useState(hasScrollSpy ? getScrollItems(children, []) : []);\n    const [activeIndex, setActiveIndex] = React.useState(activeIndexProp);\n    const [isExpanded, setIsExpanded] = React.useState(isExpandedProp);\n    // Allow expanding to be controlled for a niche use case\n    React.useEffect(() => setIsExpanded(isExpandedProp), [isExpandedProp]);\n    const navRef = React.useRef();\n    if (hasScrollSpy) {\n        React.useEffect(() => {\n            if (typeof window === 'undefined') {\n                return;\n            }\n            const scrollableElement = document.querySelector(scrollableSelector);\n            if (!(scrollableElement instanceof HTMLElement)) {\n                return;\n            }\n            function scrollSpy() {\n                const scrollPosition = Math.ceil(scrollableElement.scrollTop + offset);\n                window.requestAnimationFrame(() => {\n                    let newScrollItems = scrollItems;\n                    // Items might have rendered after this component. Do a quick refresh.\n                    if (!newScrollItems[0]) {\n                        newScrollItems = getScrollItems(children, []);\n                        setScrollItems(newScrollItems);\n                    }\n                    const scrollElements = newScrollItems\n                        .map((e, index) => ({\n                        y: e ? e.offsetTop : null,\n                        index\n                    }))\n                        .filter(({ y }) => y !== null)\n                        .sort((e1, e2) => e2.y - e1.y);\n                    for (const { y, index } of scrollElements) {\n                        if (scrollPosition >= y) {\n                            return setActiveIndex(index);\n                        }\n                    }\n                });\n            }\n            if (scrollableElement) {\n                scrollSpy();\n                scrollableElement.addEventListener('scroll', scrollSpy);\n            }\n            return () => scrollableElement.removeEventListener('scroll', scrollSpy);\n        }, [scrollItems, hasScrollSpy]);\n    }\n    let jumpLinkIndex = 0;\n    const cloneChildren = (children) => !hasScrollSpy\n        ? children\n        : React.Children.map(children, (child) => {\n            if (child.type === JumpLinksItem) {\n                const { onClick: onClickProp, isActive: isActiveProp } = child.props;\n                const itemIndex = jumpLinkIndex++;\n                const scrollItem = scrollItems[itemIndex];\n                return React.cloneElement(child, {\n                    onClick(ev) {\n                        // Items might have rendered after this component. Do a quick refresh.\n                        let newScrollItems;\n                        if (!scrollItem) {\n                            newScrollItems = getScrollItems(children, []);\n                            setScrollItems(newScrollItems);\n                        }\n                        const newScrollItem = scrollItem || newScrollItems[itemIndex];\n                        if (newScrollItem) {\n                            // we have to support scrolling to an offset due to sticky sidebar\n                            const scrollableElement = document.querySelector(scrollableSelector);\n                            if (scrollableElement instanceof HTMLElement) {\n                                if (isResponsive(navRef.current)) {\n                                    // Remove class immediately so we can get collapsed height\n                                    if (navRef.current) {\n                                        navRef.current.classList.remove(styles.modifiers.expanded);\n                                    }\n                                    let stickyParent = navRef.current && navRef.current.parentElement;\n                                    while (stickyParent && !stickyParent.classList.contains(sidebarStyles.modifiers.sticky)) {\n                                        stickyParent = stickyParent.parentElement;\n                                    }\n                                    setIsExpanded(false);\n                                    if (stickyParent) {\n                                        offset += stickyParent.scrollHeight;\n                                    }\n                                }\n                                scrollableElement.scrollTo(0, newScrollItem.offsetTop - offset);\n                            }\n                            newScrollItem.focus();\n                            ev.preventDefault();\n                        }\n                        if (onClickProp) {\n                            onClickProp(ev);\n                        }\n                    },\n                    isActive: isActiveProp || activeIndex === itemIndex,\n                    children: cloneChildren(child.props.children)\n                });\n            }\n            else if (child.type === React.Fragment) {\n                return cloneChildren(child.props.children);\n            }\n            else if (child.type === JumpLinksList) {\n                return React.cloneElement(child, { children: cloneChildren(child.props.children) });\n            }\n            return child;\n        });\n    return (React.createElement(\"nav\", Object.assign({ className: css(styles.jumpLinks, isCentered && styles.modifiers.center, isVertical && styles.modifiers.vertical, formatBreakpointMods(expandable, styles), isExpanded && styles.modifiers.expanded, className), \"aria-label\": ariaLabel, ref: navRef }, props),\n        React.createElement(\"div\", { className: styles.jumpLinksMain },\n            React.createElement(\"div\", { className: styles.jumpLinksHeader },\n                expandable && (React.createElement(\"div\", { className: styles.jumpLinksToggle },\n                    React.createElement(Button, { variant: \"plain\", onClick: () => setIsExpanded(!isExpanded), \"aria-label\": toggleAriaLabel, \"aria-expanded\": isExpanded },\n                        React.createElement(\"span\", { className: styles.jumpLinksToggleIcon },\n                            React.createElement(AngleRightIcon, null))))),\n                label && (React.createElement(\"div\", { className: css(styles.jumpLinksLabel, expandable && !alwaysShowLabel && styles.modifiers.toggle) }, label))),\n            React.createElement(\"ul\", { className: styles.jumpLinksList }, cloneChildren(children)))));\n};\nJumpLinks.displayName = 'JumpLinks';\n//# sourceMappingURL=JumpLinks.js.map"]},"metadata":{},"sourceType":"module"}