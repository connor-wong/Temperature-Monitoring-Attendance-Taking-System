{"ast":null,"code":"import getBoundingClientRect from './getBoundingClientRect';\nimport getNodeScroll from './getNodeScroll';\nimport getNodeName from './getNodeName';\nimport { isHTMLElement } from './instanceOf';\nimport getWindowScrollBarX from './getWindowScrollBarX';\nimport getDocumentElement from './getDocumentElement';\nimport isScrollParent from './isScrollParent'; // Returns the composite rect of an element relative to its offsetParent.\n// Composite means it takes into account transforms as well as layout.\n\n/**\n * @param elementOrVirtualElement\n * @param offsetParent\n * @param isFixed\n */\n\nexport default function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed = false) {\n  const documentElement = getDocumentElement(offsetParent);\n  const rect = getBoundingClientRect(elementOrVirtualElement);\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let offsets = {\n    x: 0,\n    y: 0\n  };\n\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078\n    isScrollParent(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n\n    if (isHTMLElement(offsetParent)) {\n      offsets = getBoundingClientRect(offsetParent);\n      offsets.x += offsetParent.clientLeft;\n      offsets.y += offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}","map":{"version":3,"sources":["../../../../../../../src/helpers/Popper/thirdparty/popper-core/dom-utils/getCompositeRect.ts"],"names":[],"mappings":"AAEA,OAAO,qBAAP,MAAkC,yBAAlC;AACA,OAAO,aAAP,MAA0B,iBAA1B;AACA,OAAO,WAAP,MAAwB,eAAxB;AACA,SAAS,aAAT,QAA8B,cAA9B;AACA,OAAO,mBAAP,MAAgC,uBAAhC;AACA,OAAO,kBAAP,MAA+B,sBAA/B;AACA,OAAO,cAAP,MAA2B,kBAA3B,C,CAEA;AACA;;AACA;;;;AAIG;;AACH,eAAc,SAAU,gBAAV,CACZ,uBADY,EAEZ,YAFY,EAGZ,OAAA,GAAmB,KAHP,EAGY;AAExB,QAAM,eAAe,GAAG,kBAAkB,CAAC,YAAD,CAA1C;AACA,QAAM,IAAI,GAAG,qBAAqB,CAAC,uBAAD,CAAlC;AACA,QAAM,uBAAuB,GAAG,aAAa,CAAC,YAAD,CAA7C;AAEA,MAAI,MAAM,GAAG;AAAE,IAAA,UAAU,EAAE,CAAd;AAAiB,IAAA,SAAS,EAAE;AAA5B,GAAb;AACA,MAAI,OAAO,GAAG;AAAE,IAAA,CAAC,EAAE,CAAL;AAAQ,IAAA,CAAC,EAAE;AAAX,GAAd;;AAEA,MAAI,uBAAuB,IAAK,CAAC,uBAAD,IAA4B,CAAC,OAA7D,EAAuE;AACrE,QACE,WAAW,CAAC,YAAD,CAAX,KAA8B,MAA9B,IAAwC;AACxC,IAAA,cAAc,CAAC,eAAD,CAFhB,EAGE;AACA,MAAA,MAAM,GAAG,aAAa,CAAC,YAAD,CAAtB;AACD;;AAED,QAAI,aAAa,CAAC,YAAD,CAAjB,EAAiC;AAC/B,MAAA,OAAO,GAAG,qBAAqB,CAAC,YAAD,CAA/B;AACA,MAAA,OAAO,CAAC,CAAR,IAAa,YAAY,CAAC,UAA1B;AACA,MAAA,OAAO,CAAC,CAAR,IAAa,YAAY,CAAC,SAA1B;AACD,KAJD,MAIO,IAAI,eAAJ,EAAqB;AAC1B,MAAA,OAAO,CAAC,CAAR,GAAY,mBAAmB,CAAC,eAAD,CAA/B;AACD;AACF;;AAED,SAAO;AACL,IAAA,CAAC,EAAE,IAAI,CAAC,IAAL,GAAY,MAAM,CAAC,UAAnB,GAAgC,OAAO,CAAC,CADtC;AAEL,IAAA,CAAC,EAAE,IAAI,CAAC,GAAL,GAAW,MAAM,CAAC,SAAlB,GAA8B,OAAO,CAAC,CAFpC;AAGL,IAAA,KAAK,EAAE,IAAI,CAAC,KAHP;AAIL,IAAA,MAAM,EAAE,IAAI,CAAC;AAJR,GAAP;AAMD","sourceRoot":"","sourcesContent":["import getBoundingClientRect from './getBoundingClientRect';\nimport getNodeScroll from './getNodeScroll';\nimport getNodeName from './getNodeName';\nimport { isHTMLElement } from './instanceOf';\nimport getWindowScrollBarX from './getWindowScrollBarX';\nimport getDocumentElement from './getDocumentElement';\nimport isScrollParent from './isScrollParent';\n// Returns the composite rect of an element relative to its offsetParent.\n// Composite means it takes into account transforms as well as layout.\n/**\n * @param elementOrVirtualElement\n * @param offsetParent\n * @param isFixed\n */\nexport default function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed = false) {\n    const documentElement = getDocumentElement(offsetParent);\n    const rect = getBoundingClientRect(elementOrVirtualElement);\n    const isOffsetParentAnElement = isHTMLElement(offsetParent);\n    let scroll = { scrollLeft: 0, scrollTop: 0 };\n    let offsets = { x: 0, y: 0 };\n    if (isOffsetParentAnElement || (!isOffsetParentAnElement && !isFixed)) {\n        if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078\n            isScrollParent(documentElement)) {\n            scroll = getNodeScroll(offsetParent);\n        }\n        if (isHTMLElement(offsetParent)) {\n            offsets = getBoundingClientRect(offsetParent);\n            offsets.x += offsetParent.clientLeft;\n            offsets.y += offsetParent.clientTop;\n        }\n        else if (documentElement) {\n            offsets.x = getWindowScrollBarX(documentElement);\n        }\n    }\n    return {\n        x: rect.left + scroll.scrollLeft - offsets.x,\n        y: rect.top + scroll.scrollTop - offsets.y,\n        width: rect.width,\n        height: rect.height\n    };\n}\n//# sourceMappingURL=getCompositeRect.js.map"]},"metadata":{},"sourceType":"module"}