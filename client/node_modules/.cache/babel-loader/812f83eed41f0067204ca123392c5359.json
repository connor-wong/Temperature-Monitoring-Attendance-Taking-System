{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/SearchInput/search-input';\nimport { css } from '@patternfly/react-styles';\nimport { Button, ButtonVariant } from '../Button';\nimport { Badge } from '../Badge';\nimport AngleDownIcon from \"@patternfly/react-icons/dist/esm/icons/angle-down-icon\";\nimport AngleUpIcon from \"@patternfly/react-icons/dist/esm/icons/angle-up-icon\";\nimport TimesIcon from \"@patternfly/react-icons/dist/esm/icons/times-icon\";\nimport SearchIcon from \"@patternfly/react-icons/dist/esm/icons/search-icon\";\nimport CaretDownIcon from \"@patternfly/react-icons/dist/esm/icons/caret-down-icon\";\nimport ArrowRightIcon from \"@patternfly/react-icons/dist/esm/icons/arrow-right-icon\";\nimport { ActionGroup, Form, FormGroup } from '../Form';\nimport { InputGroup } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { GenerateId, KEY_CODES } from '../../helpers';\n\nconst SearchInputBase = _a => {\n  var {\n    className,\n    value = '',\n    attributes = [],\n    hasWordsAttrLabel = 'Has words',\n    advancedSearchDelimiter,\n    placeholder,\n    onChange,\n    onSearch,\n    onClear,\n    resultsCount,\n    onNextClick,\n    onPreviousClick,\n    innerRef,\n    'aria-label': ariaLabel = 'Search input',\n    resetButtonLabel = 'Reset',\n    openMenuButtonAriaLabel = 'Open advanced search',\n    submitSearchButtonLabel = 'Search',\n    isDisabled = false\n  } = _a,\n      props = __rest(_a, [\"className\", \"value\", \"attributes\", \"hasWordsAttrLabel\", \"advancedSearchDelimiter\", \"placeholder\", \"onChange\", \"onSearch\", \"onClear\", \"resultsCount\", \"onNextClick\", \"onPreviousClick\", \"innerRef\", 'aria-label', \"resetButtonLabel\", \"openMenuButtonAriaLabel\", \"submitSearchButtonLabel\", \"isDisabled\"]);\n\n  const [showSearchMenu, setShowSearchMenu] = React.useState(false);\n  const [searchValue, setSearchValue] = React.useState(value);\n  const firstAttrRef = React.useRef(null);\n  const searchInputRef = React.useRef(null);\n  const searchInputInputRef = innerRef || React.useRef(null);\n  React.useEffect(() => {\n    setSearchValue(value);\n  }, [value]);\n  React.useEffect(() => {\n    if (attributes.length > 0 && !advancedSearchDelimiter) {\n      // eslint-disable-next-line no-console\n      console.error('An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop');\n    }\n  });\n  React.useEffect(() => {\n    if (showSearchMenu && firstAttrRef && firstAttrRef.current) {\n      firstAttrRef.current.focus();\n    } else if (!showSearchMenu && searchInputRef && searchInputRef.current) {\n      searchInputInputRef.current.focus();\n    }\n  }, [showSearchMenu]);\n  React.useEffect(() => {\n    document.addEventListener('mousedown', onDocClick);\n    document.addEventListener('touchstart', onDocClick);\n    document.addEventListener('keydown', onEscPress);\n    return function cleanup() {\n      document.removeEventListener('mousedown', onDocClick);\n      document.removeEventListener('touchstart', onDocClick);\n      document.removeEventListener('keydown', onEscPress);\n    };\n  });\n\n  const onDocClick = event => {\n    const clickedWithinSearchInput = searchInputRef && searchInputRef.current && searchInputRef.current.contains(event.target);\n\n    if (showSearchMenu && !clickedWithinSearchInput) {\n      setShowSearchMenu(false);\n    }\n  };\n\n  const onEscPress = event => {\n    const keyCode = event.keyCode || event.which;\n\n    if (showSearchMenu && keyCode === KEY_CODES.ESCAPE_KEY && searchInputRef && searchInputRef.current && searchInputRef.current.contains(event.target)) {\n      setShowSearchMenu(false);\n\n      if (searchInputInputRef && searchInputInputRef.current) {\n        searchInputInputRef.current.focus();\n      }\n    }\n  };\n\n  const onChangeHandler = event => {\n    if (onChange) {\n      onChange(event.currentTarget.value, event);\n    }\n\n    setSearchValue(event.currentTarget.value);\n  };\n\n  const onToggle = () => {\n    setShowSearchMenu(!showSearchMenu);\n  };\n\n  const onSearchHandler = event => {\n    event.preventDefault();\n\n    if (onSearch) {\n      onSearch(value, event, getAttrValueMap());\n    }\n\n    setShowSearchMenu(false);\n  };\n\n  const getAttrValueMap = () => {\n    const attrValue = {};\n    const pairs = searchValue.split(' ');\n    pairs.map(pair => {\n      const splitPair = pair.split(advancedSearchDelimiter);\n\n      if (splitPair.length === 2) {\n        attrValue[splitPair[0]] = splitPair[1];\n      } else if (splitPair.length === 1) {\n        attrValue.haswords = attrValue.hasOwnProperty('haswords') ? `${attrValue.haswords} ${splitPair[0]}` : splitPair[0];\n      }\n    });\n    return attrValue;\n  };\n\n  const getValue = attribute => {\n    const map = getAttrValueMap();\n    return map.hasOwnProperty(attribute) ? map[attribute] : '';\n  };\n\n  const handleValueChange = (attribute, newValue, event) => {\n    const newMap = getAttrValueMap();\n    newMap[attribute] = newValue;\n    let updatedValue = '';\n    Object.entries(newMap).forEach(([k, v]) => {\n      if (v.trim() !== '') {\n        if (k !== hasWordsAttrLabel.replace(' ', '').toLowerCase()) {\n          updatedValue = `${updatedValue} ${k}${advancedSearchDelimiter}${v}`;\n        } else {\n          updatedValue = `${updatedValue} ${v}`;\n        }\n      }\n    });\n    updatedValue = updatedValue.replace(/^\\s+/g, '');\n\n    if (onChange) {\n      onChange(updatedValue, event);\n    }\n\n    setSearchValue(updatedValue);\n  };\n\n  const buildFormGroups = () => {\n    const formGroups = [];\n    attributes.forEach((attribute, index) => {\n      const display = typeof attribute === 'string' ? attribute : attribute.display;\n      const queryAttr = typeof attribute === 'string' ? attribute : attribute.attr;\n\n      if (index === 0) {\n        formGroups.push(React.createElement(FormGroup, {\n          label: display,\n          fieldId: `${queryAttr}_${index}`,\n          key: `${attribute}_${index}`\n        }, React.createElement(TextInput, {\n          ref: firstAttrRef,\n          type: \"text\",\n          id: `${queryAttr}_${index}`,\n          value: getValue(queryAttr),\n          onChange: (value, evt) => handleValueChange(queryAttr, value, evt)\n        })));\n      } else {\n        formGroups.push(React.createElement(FormGroup, {\n          label: display,\n          fieldId: `${queryAttr}_${index}`,\n          key: `${attribute}_${index}`\n        }, React.createElement(TextInput, {\n          type: \"text\",\n          id: `${queryAttr}_${index}`,\n          value: getValue(queryAttr),\n          onChange: (value, evt) => handleValueChange(queryAttr, value, evt)\n        })));\n      }\n    });\n    formGroups.push(React.createElement(GenerateId, {\n      key: 'hasWords'\n    }, randomId => React.createElement(FormGroup, {\n      label: hasWordsAttrLabel,\n      fieldId: randomId\n    }, React.createElement(TextInput, {\n      type: \"text\",\n      id: randomId,\n      value: getValue('haswords'),\n      onChange: (value, evt) => handleValueChange('haswords', value, evt)\n    }))));\n    return formGroups;\n  };\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(className, styles.searchInput),\n    ref: searchInputRef\n  }, props), React.createElement(InputGroup, null, React.createElement(\"div\", {\n    className: css(styles.searchInputBar)\n  }, React.createElement(\"span\", {\n    className: css(styles.searchInputText)\n  }, React.createElement(\"span\", {\n    className: css(styles.searchInputIcon)\n  }, React.createElement(SearchIcon, null)), React.createElement(\"input\", {\n    ref: searchInputInputRef,\n    className: css(styles.searchInputTextInput),\n    value: searchValue,\n    placeholder: placeholder,\n    \"aria-label\": ariaLabel,\n    onChange: onChangeHandler,\n    disabled: isDisabled\n  })), value && React.createElement(\"span\", {\n    className: css(styles.searchInputUtilities)\n  }, resultsCount && React.createElement(\"span\", {\n    className: css(styles.searchInputCount)\n  }, React.createElement(Badge, {\n    isRead: true\n  }, resultsCount)), !!onNextClick && !!onPreviousClick && React.createElement(\"span\", {\n    className: css(styles.searchInputNav)\n  }, React.createElement(Button, {\n    variant: ButtonVariant.plain,\n    \"aria-label\": \"Previous\",\n    isDisabled: isDisabled,\n    onClick: onPreviousClick\n  }, React.createElement(AngleUpIcon, null)), React.createElement(Button, {\n    variant: ButtonVariant.plain,\n    \"aria-label\": \"Next\",\n    isDisabled: isDisabled,\n    onClick: onNextClick\n  }, React.createElement(AngleDownIcon, null))), !!onClear && React.createElement(\"span\", {\n    className: \"pf-c-search-input__clear\"\n  }, React.createElement(Button, {\n    variant: ButtonVariant.plain,\n    isDisabled: isDisabled,\n    \"aria-label\": resetButtonLabel,\n    onClick: onClear\n  }, React.createElement(TimesIcon, null))))), attributes.length > 0 && React.createElement(React.Fragment, null, React.createElement(Button, {\n    className: showSearchMenu && 'pf-m-expanded',\n    variant: ButtonVariant.control,\n    \"aria-label\": openMenuButtonAriaLabel,\n    onClick: onToggle,\n    isDisabled: isDisabled,\n    \"aria-expanded\": showSearchMenu\n  }, React.createElement(CaretDownIcon, null)), !!onSearch && React.createElement(Button, {\n    type: \"submit\",\n    variant: ButtonVariant.control,\n    \"aria-label\": submitSearchButtonLabel,\n    onClick: onSearchHandler,\n    isDisabled: isDisabled\n  }, React.createElement(ArrowRightIcon, null)))), attributes.length > 0 && showSearchMenu && React.createElement(\"div\", {\n    className: styles.searchInputMenu\n  }, React.createElement(\"div\", {\n    className: styles.searchInputMenuBody\n  }, React.createElement(Form, null, buildFormGroups(), React.createElement(ActionGroup, null, React.createElement(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    onClick: onSearchHandler\n  }, submitSearchButtonLabel), !!onClear && React.createElement(Button, {\n    variant: \"link\",\n    type: \"reset\",\n    onClick: onClear\n  }, resetButtonLabel))))));\n};\n\nSearchInputBase.displayName = 'SearchInputBase';\nexport const SearchInput = React.forwardRef((props, ref) => React.createElement(SearchInputBase, Object.assign({}, props, {\n  innerRef: ref\n})));\nSearchInput.displayName = 'SearchInput';","map":{"version":3,"sources":["../../../../src/components/SearchInput/SearchInput.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/SearchInput/search-input';\nimport { css } from '@patternfly/react-styles';\nimport { Button, ButtonVariant } from '../Button';\nimport { Badge } from '../Badge';\nimport AngleDownIcon from \"@patternfly/react-icons/dist/esm/icons/angle-down-icon\";\nimport AngleUpIcon from \"@patternfly/react-icons/dist/esm/icons/angle-up-icon\";\nimport TimesIcon from \"@patternfly/react-icons/dist/esm/icons/times-icon\";\nimport SearchIcon from \"@patternfly/react-icons/dist/esm/icons/search-icon\";\nimport CaretDownIcon from \"@patternfly/react-icons/dist/esm/icons/caret-down-icon\";\nimport ArrowRightIcon from \"@patternfly/react-icons/dist/esm/icons/arrow-right-icon\";\nimport { ActionGroup, Form, FormGroup } from '../Form';\nimport { InputGroup } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { GenerateId, KEY_CODES } from '../../helpers';\nconst SearchInputBase = (_a) => {\n    var { className, value = '', attributes = [], hasWordsAttrLabel = 'Has words', advancedSearchDelimiter, placeholder, onChange, onSearch, onClear, resultsCount, onNextClick, onPreviousClick, innerRef, 'aria-label': ariaLabel = 'Search input', resetButtonLabel = 'Reset', openMenuButtonAriaLabel = 'Open advanced search', submitSearchButtonLabel = 'Search', isDisabled = false } = _a, props = __rest(_a, [\"className\", \"value\", \"attributes\", \"hasWordsAttrLabel\", \"advancedSearchDelimiter\", \"placeholder\", \"onChange\", \"onSearch\", \"onClear\", \"resultsCount\", \"onNextClick\", \"onPreviousClick\", \"innerRef\", 'aria-label', \"resetButtonLabel\", \"openMenuButtonAriaLabel\", \"submitSearchButtonLabel\", \"isDisabled\"]);\n    const [showSearchMenu, setShowSearchMenu] = React.useState(false);\n    const [searchValue, setSearchValue] = React.useState(value);\n    const firstAttrRef = React.useRef(null);\n    const searchInputRef = React.useRef(null);\n    const searchInputInputRef = innerRef || React.useRef(null);\n    React.useEffect(() => {\n        setSearchValue(value);\n    }, [value]);\n    React.useEffect(() => {\n        if (attributes.length > 0 && !advancedSearchDelimiter) {\n            // eslint-disable-next-line no-console\n            console.error('An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop');\n        }\n    });\n    React.useEffect(() => {\n        if (showSearchMenu && firstAttrRef && firstAttrRef.current) {\n            firstAttrRef.current.focus();\n        }\n        else if (!showSearchMenu && searchInputRef && searchInputRef.current) {\n            searchInputInputRef.current.focus();\n        }\n    }, [showSearchMenu]);\n    React.useEffect(() => {\n        document.addEventListener('mousedown', onDocClick);\n        document.addEventListener('touchstart', onDocClick);\n        document.addEventListener('keydown', onEscPress);\n        return function cleanup() {\n            document.removeEventListener('mousedown', onDocClick);\n            document.removeEventListener('touchstart', onDocClick);\n            document.removeEventListener('keydown', onEscPress);\n        };\n    });\n    const onDocClick = (event) => {\n        const clickedWithinSearchInput = searchInputRef && searchInputRef.current && searchInputRef.current.contains(event.target);\n        if (showSearchMenu && !clickedWithinSearchInput) {\n            setShowSearchMenu(false);\n        }\n    };\n    const onEscPress = (event) => {\n        const keyCode = event.keyCode || event.which;\n        if (showSearchMenu &&\n            keyCode === KEY_CODES.ESCAPE_KEY &&\n            searchInputRef &&\n            searchInputRef.current &&\n            searchInputRef.current.contains(event.target)) {\n            setShowSearchMenu(false);\n            if (searchInputInputRef && searchInputInputRef.current) {\n                searchInputInputRef.current.focus();\n            }\n        }\n    };\n    const onChangeHandler = (event) => {\n        if (onChange) {\n            onChange(event.currentTarget.value, event);\n        }\n        setSearchValue(event.currentTarget.value);\n    };\n    const onToggle = () => {\n        setShowSearchMenu(!showSearchMenu);\n    };\n    const onSearchHandler = (event) => {\n        event.preventDefault();\n        if (onSearch) {\n            onSearch(value, event, getAttrValueMap());\n        }\n        setShowSearchMenu(false);\n    };\n    const getAttrValueMap = () => {\n        const attrValue = {};\n        const pairs = searchValue.split(' ');\n        pairs.map(pair => {\n            const splitPair = pair.split(advancedSearchDelimiter);\n            if (splitPair.length === 2) {\n                attrValue[splitPair[0]] = splitPair[1];\n            }\n            else if (splitPair.length === 1) {\n                attrValue.haswords = attrValue.hasOwnProperty('haswords')\n                    ? `${attrValue.haswords} ${splitPair[0]}`\n                    : splitPair[0];\n            }\n        });\n        return attrValue;\n    };\n    const getValue = (attribute) => {\n        const map = getAttrValueMap();\n        return map.hasOwnProperty(attribute) ? map[attribute] : '';\n    };\n    const handleValueChange = (attribute, newValue, event) => {\n        const newMap = getAttrValueMap();\n        newMap[attribute] = newValue;\n        let updatedValue = '';\n        Object.entries(newMap).forEach(([k, v]) => {\n            if (v.trim() !== '') {\n                if (k !== hasWordsAttrLabel.replace(' ', '').toLowerCase()) {\n                    updatedValue = `${updatedValue} ${k}${advancedSearchDelimiter}${v}`;\n                }\n                else {\n                    updatedValue = `${updatedValue} ${v}`;\n                }\n            }\n        });\n        updatedValue = updatedValue.replace(/^\\s+/g, '');\n        if (onChange) {\n            onChange(updatedValue, event);\n        }\n        setSearchValue(updatedValue);\n    };\n    const buildFormGroups = () => {\n        const formGroups = [];\n        attributes.forEach((attribute, index) => {\n            const display = typeof attribute === 'string' ? attribute : attribute.display;\n            const queryAttr = typeof attribute === 'string' ? attribute : attribute.attr;\n            if (index === 0) {\n                formGroups.push(React.createElement(FormGroup, { label: display, fieldId: `${queryAttr}_${index}`, key: `${attribute}_${index}` },\n                    React.createElement(TextInput, { ref: firstAttrRef, type: \"text\", id: `${queryAttr}_${index}`, value: getValue(queryAttr), onChange: (value, evt) => handleValueChange(queryAttr, value, evt) })));\n            }\n            else {\n                formGroups.push(React.createElement(FormGroup, { label: display, fieldId: `${queryAttr}_${index}`, key: `${attribute}_${index}` },\n                    React.createElement(TextInput, { type: \"text\", id: `${queryAttr}_${index}`, value: getValue(queryAttr), onChange: (value, evt) => handleValueChange(queryAttr, value, evt) })));\n            }\n        });\n        formGroups.push(React.createElement(GenerateId, { key: 'hasWords' }, randomId => (React.createElement(FormGroup, { label: hasWordsAttrLabel, fieldId: randomId },\n            React.createElement(TextInput, { type: \"text\", id: randomId, value: getValue('haswords'), onChange: (value, evt) => handleValueChange('haswords', value, evt) })))));\n        return formGroups;\n    };\n    return (React.createElement(\"div\", Object.assign({ className: css(className, styles.searchInput), ref: searchInputRef }, props),\n        React.createElement(InputGroup, null,\n            React.createElement(\"div\", { className: css(styles.searchInputBar) },\n                React.createElement(\"span\", { className: css(styles.searchInputText) },\n                    React.createElement(\"span\", { className: css(styles.searchInputIcon) },\n                        React.createElement(SearchIcon, null)),\n                    React.createElement(\"input\", { ref: searchInputInputRef, className: css(styles.searchInputTextInput), value: searchValue, placeholder: placeholder, \"aria-label\": ariaLabel, onChange: onChangeHandler, disabled: isDisabled })),\n                value && (React.createElement(\"span\", { className: css(styles.searchInputUtilities) },\n                    resultsCount && (React.createElement(\"span\", { className: css(styles.searchInputCount) },\n                        React.createElement(Badge, { isRead: true }, resultsCount))),\n                    !!onNextClick && !!onPreviousClick && (React.createElement(\"span\", { className: css(styles.searchInputNav) },\n                        React.createElement(Button, { variant: ButtonVariant.plain, \"aria-label\": \"Previous\", isDisabled: isDisabled, onClick: onPreviousClick },\n                            React.createElement(AngleUpIcon, null)),\n                        React.createElement(Button, { variant: ButtonVariant.plain, \"aria-label\": \"Next\", isDisabled: isDisabled, onClick: onNextClick },\n                            React.createElement(AngleDownIcon, null)))),\n                    !!onClear && (React.createElement(\"span\", { className: \"pf-c-search-input__clear\" },\n                        React.createElement(Button, { variant: ButtonVariant.plain, isDisabled: isDisabled, \"aria-label\": resetButtonLabel, onClick: onClear },\n                            React.createElement(TimesIcon, null))))))),\n            attributes.length > 0 && (React.createElement(React.Fragment, null,\n                React.createElement(Button, { className: showSearchMenu && 'pf-m-expanded', variant: ButtonVariant.control, \"aria-label\": openMenuButtonAriaLabel, onClick: onToggle, isDisabled: isDisabled, \"aria-expanded\": showSearchMenu },\n                    React.createElement(CaretDownIcon, null)),\n                !!onSearch && (React.createElement(Button, { type: \"submit\", variant: ButtonVariant.control, \"aria-label\": submitSearchButtonLabel, onClick: onSearchHandler, isDisabled: isDisabled },\n                    React.createElement(ArrowRightIcon, null)))))),\n        attributes.length > 0 && showSearchMenu && (React.createElement(\"div\", { className: styles.searchInputMenu },\n            React.createElement(\"div\", { className: styles.searchInputMenuBody },\n                React.createElement(Form, null,\n                    buildFormGroups(),\n                    React.createElement(ActionGroup, null,\n                        React.createElement(Button, { variant: \"primary\", type: \"submit\", onClick: onSearchHandler }, submitSearchButtonLabel),\n                        !!onClear && (React.createElement(Button, { variant: \"link\", type: \"reset\", onClick: onClear }, resetButtonLabel)))))))));\n};\nSearchInputBase.displayName = 'SearchInputBase';\nexport const SearchInput = React.forwardRef((props, ref) => (React.createElement(SearchInputBase, Object.assign({}, props, { innerRef: ref }))));\nSearchInput.displayName = 'SearchInput';\n//# sourceMappingURL=SearchInput.js.map"]},"metadata":{},"sourceType":"module"}