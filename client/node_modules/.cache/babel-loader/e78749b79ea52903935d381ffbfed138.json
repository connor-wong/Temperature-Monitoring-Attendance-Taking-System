{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { DropdownToggle, DropdownContext } from '../Dropdown';\nexport const OptionsMenuToggle = _a => {\n  var {\n    isPlain = false,\n    isDisabled = false,\n    isOpen = false,\n    parentId = '',\n    toggleTemplate = React.createElement(React.Fragment, null),\n    hideCaret = false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isActive = false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isSplitButton = false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    type,\n    'aria-label': ariaLabel = 'Options menu'\n  } = _a,\n      props = __rest(_a, [\"isPlain\", \"isDisabled\", \"isOpen\", \"parentId\", \"toggleTemplate\", \"hideCaret\", \"isActive\", \"isSplitButton\", \"type\", 'aria-label']);\n\n  return React.createElement(DropdownContext.Consumer, null, ({\n    id: contextId\n  }) => React.createElement(DropdownToggle, Object.assign({}, (isPlain || hideCaret) && {\n    toggleIndicator: null\n  }, props, {\n    isPlain: isPlain,\n    isOpen: isOpen,\n    isDisabled: isDisabled,\n    isActive: isActive,\n    id: parentId ? `${parentId}-toggle` : `${contextId}-toggle`,\n    \"aria-haspopup\": \"listbox\",\n    \"aria-label\": ariaLabel,\n    \"aria-expanded\": isOpen\n  }, toggleTemplate ? {\n    children: toggleTemplate\n  } : {})));\n};\nOptionsMenuToggle.displayName = 'OptionsMenuToggle';","map":{"version":3,"sources":["../../../../src/components/OptionsMenu/OptionsMenuToggle.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,cAAT,EAAyB,eAAzB,QAAgD,aAAhD;AA4BA,OAAO,MAAM,iBAAiB,GAAqD,EAAD,IAerD;MAfsD;AACjF,IAAA,OAAO,GAAG,KADuE;AAEjF,IAAA,UAAU,GAAG,KAFoE;AAGjF,IAAA,MAAM,GAAG,KAHwE;AAIjF,IAAA,QAAQ,GAAG,EAJsE;AAKjF,IAAA,cAAc,GAAG,KAAA,CAAA,aAAA,CAAC,KAAK,CAAC,QAAP,EAAe,IAAf,CALgE;AAMjF,IAAA,SAAS,GAAG,KANqE;AAOjF;AACA,IAAA,QAAQ,GAAG,KARsE;AASjF;AACA,IAAA,aAAa,GAAG,KAViE;AAWjF;AACA,IAAA,IAZiF;AAajF,kBAAc,SAAS,GAAG;AAbuD,MAazC,E;MACrC,KAAK,GAAA,MAAA,CAAA,EAAA,EAdyE,CAAA,SAAA,EAAA,YAAA,EAAA,QAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,WAAA,EAAA,UAAA,EAAA,eAAA,EAAA,MAAA,EAAA,YAAA,CAczE,C;;AACoB,SAC5B,KAAA,CAAA,aAAA,CAAC,eAAe,CAAC,QAAjB,EAAyB,IAAzB,EACG,CAAC;AAAE,IAAA,EAAE,EAAE;AAAN,GAAD,KACC,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe,MAAA,CAAA,MAAA,CAAA,EAAA,EACR,CAAC,OAAO,IAAI,SAAZ,KAA0B;AAAE,IAAA,eAAe,EAAE;AAAnB,GADlB,EAET,KAFS,EAEJ;AACT,IAAA,OAAO,EAAE,OADA;AAET,IAAA,MAAM,EAAE,MAFC;AAGT,IAAA,UAAU,EAAE,UAHH;AAIT,IAAA,QAAQ,EAAE,QAJD;AAKT,IAAA,EAAE,EAAE,QAAQ,GAAG,GAAG,QAAQ,SAAd,GAA0B,GAAG,SAAS,SALzC;AAKkD,qBAC7C,SANL;AAMc,kBACX,SAPH;AAOY,qBACN;AARN,GAFI,EAWR,cAAc,GAAG;AAAE,IAAA,QAAQ,EAAE;AAAZ,GAAH,GAAkC,EAXxC,CAAf,CAFJ,CAD4B;AAkB7B,CAjCM;AAkCP,iBAAiB,CAAC,WAAlB,GAAgC,mBAAhC","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { DropdownToggle, DropdownContext } from '../Dropdown';\nexport const OptionsMenuToggle = (_a) => {\n    var { isPlain = false, isDisabled = false, isOpen = false, parentId = '', toggleTemplate = React.createElement(React.Fragment, null), hideCaret = false, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isActive = false, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isSplitButton = false, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    type, 'aria-label': ariaLabel = 'Options menu' } = _a, props = __rest(_a, [\"isPlain\", \"isDisabled\", \"isOpen\", \"parentId\", \"toggleTemplate\", \"hideCaret\", \"isActive\", \"isSplitButton\", \"type\", 'aria-label']);\n    return (React.createElement(DropdownContext.Consumer, null, ({ id: contextId }) => (React.createElement(DropdownToggle, Object.assign({}, ((isPlain || hideCaret) && { toggleIndicator: null }), props, { isPlain: isPlain, isOpen: isOpen, isDisabled: isDisabled, isActive: isActive, id: parentId ? `${parentId}-toggle` : `${contextId}-toggle`, \"aria-haspopup\": \"listbox\", \"aria-label\": ariaLabel, \"aria-expanded\": isOpen }, (toggleTemplate ? { children: toggleTemplate } : {}))))));\n};\nOptionsMenuToggle.displayName = 'OptionsMenuToggle';\n//# sourceMappingURL=OptionsMenuToggle.js.map"]},"metadata":{},"sourceType":"module"}