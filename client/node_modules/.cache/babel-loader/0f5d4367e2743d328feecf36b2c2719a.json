{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarItem } from './ToolbarItem';\nimport { Button } from '../Button';\nimport { ToolbarGroup } from './ToolbarGroup';\nimport { globalBreakpoints } from './ToolbarUtils';\nexport class ToolbarChipGroupContent extends React.Component {\n  render() {\n    const _a = this.props,\n          {\n      className,\n      isExpanded,\n      chipGroupContentRef,\n      clearAllFilters,\n      showClearFiltersButton,\n      clearFiltersButtonText,\n      collapseListedFiltersBreakpoint,\n      numberOfFilters\n    } = _a,\n          props = __rest(_a, [\"className\", \"isExpanded\", \"chipGroupContentRef\", \"clearAllFilters\", \"showClearFiltersButton\", \"clearFiltersButtonText\", \"collapseListedFiltersBreakpoint\", \"numberOfFilters\"]);\n\n    const clearChipGroups = () => {\n      clearAllFilters();\n    };\n\n    let collapseListedFilters = false;\n\n    if (collapseListedFiltersBreakpoint === 'all') {\n      collapseListedFilters = true;\n    } else if (typeof window !== 'undefined') {\n      collapseListedFilters = window.innerWidth < globalBreakpoints[collapseListedFiltersBreakpoint];\n    }\n\n    return React.createElement(\"div\", Object.assign({\n      className: css(styles.toolbarContent, (numberOfFilters === 0 || isExpanded) && styles.modifiers.hidden, className)\n    }, (numberOfFilters === 0 || isExpanded) && {\n      hidden: true\n    }, {\n      ref: chipGroupContentRef\n    }, props), React.createElement(ToolbarGroup, Object.assign({\n      className: css(collapseListedFilters && styles.modifiers.hidden)\n    }, collapseListedFilters && {\n      hidden: true\n    }, collapseListedFilters && {\n      'aria-hidden': true\n    })), collapseListedFilters && numberOfFilters > 0 && !isExpanded && React.createElement(ToolbarGroup, null, React.createElement(ToolbarItem, null, numberOfFilters, \" filters applied\")), showClearFiltersButton && !isExpanded && React.createElement(ToolbarItem, null, React.createElement(Button, {\n      variant: \"link\",\n      onClick: clearChipGroups,\n      isInline: true\n    }, clearFiltersButtonText)));\n  }\n\n}\nToolbarChipGroupContent.displayName = 'ToolbarChipGroupContent';\nToolbarChipGroupContent.defaultProps = {\n  clearFiltersButtonText: 'Clear all filters',\n  collapseListedFiltersBreakpoint: 'lg'\n};","map":{"version":3,"sources":["../../../../src/components/Toolbar/ToolbarChipGroupContent.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,yDAAnB;AACA,SAAS,GAAT,QAAoB,0BAApB;AAGA,SAAS,WAAT,QAA4B,eAA5B;AACA,SAAS,MAAT,QAAuB,WAAvB;AACA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,iBAAT,QAAkC,gBAAlC;AAsBA,OAAM,MAAO,uBAAP,SAAuC,KAAK,CAAC,SAA7C,CAAoF;AAOxF,EAAA,MAAM,GAAA;AACJ,UAAM,EAAA,GAUF,KAAK,KAVT;AAAA,UAAM;AACJ,MAAA,SADI;AAEJ,MAAA,UAFI;AAGJ,MAAA,mBAHI;AAIJ,MAAA,eAJI;AAKJ,MAAA,sBALI;AAMJ,MAAA,sBANI;AAOJ,MAAA,+BAPI;AAQJ,MAAA;AARI,QAQW,EARjB;AAAA,UASK,KAAK,GAAA,MAAA,CAAA,EAAA,EATJ,CAAA,WAAA,EAAA,YAAA,EAAA,qBAAA,EAAA,iBAAA,EAAA,wBAAA,EAAA,wBAAA,EAAA,iCAAA,EAAA,iBAAA,CASI,CATV;;AAYA,UAAM,eAAe,GAAG,MAAK;AAC3B,MAAA,eAAe;AAChB,KAFD;;AAIA,QAAI,qBAAqB,GAAG,KAA5B;;AACA,QAAI,+BAA+B,KAAK,KAAxC,EAA+C;AAC7C,MAAA,qBAAqB,GAAG,IAAxB;AACD,KAFD,MAEO,IAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AACxC,MAAA,qBAAqB,GAAG,MAAM,CAAC,UAAP,GAAoB,iBAAiB,CAAC,+BAAD,CAA7D;AACD;;AAED,WACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACE,MAAA,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,cADK,EAEZ,CAAC,eAAe,KAAK,CAApB,IAAyB,UAA1B,KAAyC,MAAM,CAAC,SAAP,CAAiB,MAF9C,EAGZ,SAHY;AADhB,KAAA,EAMO,CAAC,eAAe,KAAK,CAApB,IAAyB,UAA1B,KAAyC;AAAE,MAAA,MAAM,EAAE;AAAV,KANhD,EAMiE;AAC/D,MAAA,GAAG,EAAE;AAD0D,KANjE,EAQM,KARN,CAAA,EAUE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,MAAA,CAAA,MAAA,CAAA;AACX,MAAA,SAAS,EAAE,GAAG,CAAC,qBAAqB,IAAI,MAAM,CAAC,SAAP,CAAiB,MAA3C;AADH,KAAA,EAEN,qBAAqB,IAAI;AAAE,MAAA,MAAM,EAAE;AAAV,KAFnB,EAGN,qBAAqB,IAAI;AAAE,qBAAe;AAAjB,KAHnB,CAAb,CAVF,EAeG,qBAAqB,IAAI,eAAe,GAAG,CAA3C,IAAgD,CAAC,UAAjD,IACC,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,WAAD,EAAY,IAAZ,EAAc,eAAd,EAA4D,kBAA5D,CADF,CAhBJ,EAoBG,sBAAsB,IAAI,CAAC,UAA3B,IACC,KAAA,CAAA,aAAA,CAAC,WAAD,EAAY,IAAZ,EACE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO;AAAC,MAAA,OAAO,EAAC,MAAT;AAAgB,MAAA,OAAO,EAAE,eAAzB;AAA0C,MAAA,QAAQ,EAAA;AAAlD,KAAP,EACG,sBADH,CADF,CArBJ,CADF;AA8BD;;AA7DuF;AACjF,uBAAA,CAAA,WAAA,GAAc,yBAAd;AACA,uBAAA,CAAA,YAAA,GAA2D;AAChE,EAAA,sBAAsB,EAAE,mBADwC;AAEhE,EAAA,+BAA+B,EAAE;AAF+B,CAA3D","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarItem } from './ToolbarItem';\nimport { Button } from '../Button';\nimport { ToolbarGroup } from './ToolbarGroup';\nimport { globalBreakpoints } from './ToolbarUtils';\nexport class ToolbarChipGroupContent extends React.Component {\n    render() {\n        const _a = this.props, { className, isExpanded, chipGroupContentRef, clearAllFilters, showClearFiltersButton, clearFiltersButtonText, collapseListedFiltersBreakpoint, numberOfFilters } = _a, props = __rest(_a, [\"className\", \"isExpanded\", \"chipGroupContentRef\", \"clearAllFilters\", \"showClearFiltersButton\", \"clearFiltersButtonText\", \"collapseListedFiltersBreakpoint\", \"numberOfFilters\"]);\n        const clearChipGroups = () => {\n            clearAllFilters();\n        };\n        let collapseListedFilters = false;\n        if (collapseListedFiltersBreakpoint === 'all') {\n            collapseListedFilters = true;\n        }\n        else if (typeof window !== 'undefined') {\n            collapseListedFilters = window.innerWidth < globalBreakpoints[collapseListedFiltersBreakpoint];\n        }\n        return (React.createElement(\"div\", Object.assign({ className: css(styles.toolbarContent, (numberOfFilters === 0 || isExpanded) && styles.modifiers.hidden, className) }, ((numberOfFilters === 0 || isExpanded) && { hidden: true }), { ref: chipGroupContentRef }, props),\n            React.createElement(ToolbarGroup, Object.assign({ className: css(collapseListedFilters && styles.modifiers.hidden) }, (collapseListedFilters && { hidden: true }), (collapseListedFilters && { 'aria-hidden': true }))),\n            collapseListedFilters && numberOfFilters > 0 && !isExpanded && (React.createElement(ToolbarGroup, null,\n                React.createElement(ToolbarItem, null,\n                    numberOfFilters,\n                    \" filters applied\"))),\n            showClearFiltersButton && !isExpanded && (React.createElement(ToolbarItem, null,\n                React.createElement(Button, { variant: \"link\", onClick: clearChipGroups, isInline: true }, clearFiltersButtonText)))));\n    }\n}\nToolbarChipGroupContent.displayName = 'ToolbarChipGroupContent';\nToolbarChipGroupContent.defaultProps = {\n    clearFiltersButtonText: 'Clear all filters',\n    collapseListedFiltersBreakpoint: 'lg'\n};\n//# sourceMappingURL=ToolbarChipGroupContent.js.map"]},"metadata":{},"sourceType":"module"}