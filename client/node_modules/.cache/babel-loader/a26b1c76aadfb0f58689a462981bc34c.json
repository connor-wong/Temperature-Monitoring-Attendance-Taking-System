{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport stylesGrid from '@patternfly/react-styles/css/components/DataList/data-list-grid';\nconst gridBreakpointClasses = {\n  none: stylesGrid.modifiers.gridNone,\n  always: 'pf-m-grid',\n  sm: stylesGrid.modifiers.gridSm,\n  md: stylesGrid.modifiers.gridMd,\n  lg: stylesGrid.modifiers.gridLg,\n  xl: stylesGrid.modifiers.gridXl,\n  '2xl': stylesGrid.modifiers.grid_2xl\n};\nexport var DataListWrapModifier;\n\n(function (DataListWrapModifier) {\n  DataListWrapModifier[\"nowrap\"] = \"nowrap\";\n  DataListWrapModifier[\"truncate\"] = \"truncate\";\n  DataListWrapModifier[\"breakWord\"] = \"breakWord\";\n})(DataListWrapModifier || (DataListWrapModifier = {}));\n\nexport const DataListContext = React.createContext({\n  isSelectable: false\n});\n\nconst moveItem = (arr, i1, toIndex) => {\n  const fromIndex = arr.indexOf(i1);\n\n  if (fromIndex === toIndex) {\n    return arr;\n  }\n\n  const temp = arr.splice(fromIndex, 1);\n  arr.splice(toIndex, 0, temp[0]);\n  return arr;\n};\n\nexport class DataList extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.dragFinished = false;\n    this.arrayCopy = React.Children.toArray(this.props.children);\n    this.ref = React.createRef();\n    this.state = {\n      tempItemOrder: [],\n      draggedItemId: null,\n      draggingToItemIndex: null,\n      dragging: false\n    };\n\n    this.getIndex = id => Array.from(this.ref.current.children).findIndex(item => item.id === id);\n\n    this.move = itemOrder => {\n      const ulNode = this.ref.current;\n      const nodes = Array.from(ulNode.children);\n\n      if (nodes.map(node => node.id).every((id, i) => id === itemOrder[i])) {\n        return;\n      }\n\n      while (ulNode.firstChild) {\n        ulNode.removeChild(ulNode.lastChild);\n      }\n\n      itemOrder.forEach(id => {\n        ulNode.appendChild(nodes.find(n => n.id === id));\n      });\n    };\n\n    this.dragStart0 = el => {\n      const {\n        onDragStart\n      } = this.props;\n      const draggedItemId = el.id;\n      el.classList.add(styles.modifiers.ghostRow);\n      el.setAttribute('aria-pressed', 'true');\n      this.setState({\n        draggedItemId,\n        dragging: true\n      });\n      onDragStart && onDragStart(draggedItemId);\n    };\n\n    this.dragStart = evt => {\n      evt.dataTransfer.effectAllowed = 'move';\n      evt.dataTransfer.setData('text/plain', evt.currentTarget.id);\n      this.dragStart0(evt.currentTarget);\n    };\n\n    this.onDragCancel = () => {\n      this.move(this.props.itemOrder);\n      Array.from(this.ref.current.children).forEach(el => {\n        el.classList.remove(styles.modifiers.ghostRow);\n        el.classList.remove(styles.modifiers.dragOver);\n        el.setAttribute('aria-pressed', 'false');\n      });\n      this.setState({\n        draggedItemId: null,\n        draggingToItemIndex: null,\n        dragging: false\n      });\n\n      if (this.props.onDragCancel) {\n        this.props.onDragCancel();\n      }\n    };\n\n    this.dragLeave = evt => {\n      // This event false fires when we call `this.move()`, so double check we're out of zone\n      if (!this.isValidDrop(evt)) {\n        this.move(this.props.itemOrder);\n        this.setState({\n          draggingToItemIndex: null\n        });\n      }\n    };\n\n    this.dragEnd0 = el => {\n      el.classList.remove(styles.modifiers.ghostRow);\n      el.classList.remove(styles.modifiers.dragOver);\n      el.setAttribute('aria-pressed', 'false');\n      this.setState({\n        draggedItemId: null,\n        draggingToItemIndex: null,\n        dragging: false\n      });\n    };\n\n    this.dragEnd = evt => {\n      this.dragEnd0(evt.target);\n    };\n\n    this.isValidDrop = evt => {\n      const ulRect = this.ref.current.getBoundingClientRect();\n      return evt.clientX > ulRect.x && evt.clientX < ulRect.x + ulRect.width && evt.clientY > ulRect.y && evt.clientY < ulRect.y + ulRect.height;\n    };\n\n    this.drop = evt => {\n      if (this.isValidDrop(evt)) {\n        this.props.onDragFinish(this.state.tempItemOrder);\n      } else {\n        this.onDragCancel();\n      }\n    };\n\n    this.dragOver0 = id => {\n      const draggingToItemIndex = Array.from(this.ref.current.children).findIndex(item => item.id === id);\n\n      if (draggingToItemIndex !== this.state.draggingToItemIndex) {\n        const tempItemOrder = moveItem([...this.props.itemOrder], this.state.draggedItemId, draggingToItemIndex);\n        this.move(tempItemOrder);\n        this.setState({\n          draggingToItemIndex,\n          tempItemOrder\n        });\n      }\n    };\n\n    this.dragOver = evt => {\n      evt.preventDefault();\n      const curListItem = evt.target.closest('li');\n\n      if (!curListItem || !this.ref.current.contains(curListItem) || curListItem.id === this.state.draggedItemId) {\n        // We're going nowhere, don't bother calling `dragOver0`\n        return null;\n      } else {\n        this.dragOver0(curListItem.id);\n      }\n    };\n\n    this.handleDragButtonKeys = evt => {\n      const {\n        dragging\n      } = this.state;\n\n      if (evt.key !== ' ' && evt.key !== 'Escape' && evt.key !== 'Enter' && evt.key !== 'ArrowUp' && evt.key !== 'ArrowDown') {\n        if (dragging) {\n          evt.preventDefault();\n        }\n\n        return;\n      }\n\n      evt.preventDefault();\n      const dragItem = evt.target.closest('li');\n\n      if (evt.key === ' ' || evt.key === 'Enter' && !dragging) {\n        this.dragStart0(dragItem);\n      } else if (dragging) {\n        if (evt.key === 'Escape' || evt.key === 'Enter') {\n          this.setState({\n            dragging: false\n          });\n          this.dragFinished = true;\n\n          if (evt.key === 'Enter') {\n            this.dragEnd0(dragItem);\n            this.props.onDragFinish(this.state.tempItemOrder);\n          } else {\n            this.onDragCancel();\n          }\n        } else if (evt.key === 'ArrowUp') {\n          const nextSelection = dragItem.previousSibling;\n\n          if (nextSelection) {\n            this.dragOver0(nextSelection.id);\n            dragItem.querySelector(`.${styles.dataListItemDraggableButton}`).focus();\n          }\n        } else if (evt.key === 'ArrowDown') {\n          const nextSelection = dragItem.nextSibling;\n\n          if (nextSelection) {\n            this.dragOver0(nextSelection.id);\n            dragItem.querySelector(`.${styles.dataListItemDraggableButton}`).focus();\n          }\n        }\n      }\n    };\n  }\n\n  componentDidUpdate(oldProps) {\n    if (this.dragFinished) {\n      this.dragFinished = false;\n      this.setState({\n        tempItemOrder: [...this.props.itemOrder],\n        draggedItemId: null,\n        dragging: false\n      });\n    }\n\n    if (oldProps.itemOrder !== this.props.itemOrder) {\n      this.move(this.props.itemOrder);\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      className,\n      children,\n      onSelectDataListItem,\n      selectedDataListItemId,\n      isCompact,\n      wrapModifier,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onDragStart,\n      onDragMove,\n      onDragCancel,\n      onDragFinish,\n      gridBreakpoint,\n      itemOrder\n    } = _a,\n\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    props = __rest(_a, [\"className\", \"children\", \"onSelectDataListItem\", \"selectedDataListItemId\", \"isCompact\", \"wrapModifier\", \"onDragStart\", \"onDragMove\", \"onDragCancel\", \"onDragFinish\", \"gridBreakpoint\", \"itemOrder\"]);\n\n    const {\n      dragging\n    } = this.state;\n    const isSelectable = onSelectDataListItem !== undefined;\n    const isDraggable = onDragFinish !== undefined;\n\n    const updateSelectedDataListItem = id => {\n      onSelectDataListItem(id);\n    };\n\n    const dragProps = isDraggable && {\n      onDragOver: this.dragOver,\n      onDrop: this.dragOver,\n      onDragLeave: this.dragLeave\n    };\n    return React.createElement(DataListContext.Provider, {\n      value: {\n        isSelectable,\n        selectedDataListItemId,\n        updateSelectedDataListItem,\n        isDraggable,\n        dragStart: this.dragStart,\n        dragEnd: this.dragEnd,\n        drop: this.drop,\n        dragKeyHandler: this.handleDragButtonKeys\n      }\n    }, React.createElement(\"ul\", Object.assign({\n      className: css(styles.dataList, isCompact && styles.modifiers.compact, gridBreakpointClasses[gridBreakpoint], wrapModifier && styles.modifiers[wrapModifier], dragging && styles.modifiers.dragOver, className),\n      style: props.style\n    }, props, dragProps, {\n      ref: this.ref\n    }), children));\n  }\n\n}\nDataList.displayName = 'DataList';\nDataList.defaultProps = {\n  children: null,\n  className: '',\n  selectedDataListItemId: '',\n  isCompact: false,\n  gridBreakpoint: 'md',\n  wrapModifier: null\n};","map":{"version":3,"sources":["../../../../src/components/DataList/DataList.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport stylesGrid from '@patternfly/react-styles/css/components/DataList/data-list-grid';\nconst gridBreakpointClasses = {\n    none: stylesGrid.modifiers.gridNone,\n    always: 'pf-m-grid',\n    sm: stylesGrid.modifiers.gridSm,\n    md: stylesGrid.modifiers.gridMd,\n    lg: stylesGrid.modifiers.gridLg,\n    xl: stylesGrid.modifiers.gridXl,\n    '2xl': stylesGrid.modifiers.grid_2xl\n};\nexport var DataListWrapModifier;\n(function (DataListWrapModifier) {\n    DataListWrapModifier[\"nowrap\"] = \"nowrap\";\n    DataListWrapModifier[\"truncate\"] = \"truncate\";\n    DataListWrapModifier[\"breakWord\"] = \"breakWord\";\n})(DataListWrapModifier || (DataListWrapModifier = {}));\nexport const DataListContext = React.createContext({\n    isSelectable: false\n});\nconst moveItem = (arr, i1, toIndex) => {\n    const fromIndex = arr.indexOf(i1);\n    if (fromIndex === toIndex) {\n        return arr;\n    }\n    const temp = arr.splice(fromIndex, 1);\n    arr.splice(toIndex, 0, temp[0]);\n    return arr;\n};\nexport class DataList extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.dragFinished = false;\n        this.arrayCopy = React.Children.toArray(this.props.children);\n        this.ref = React.createRef();\n        this.state = {\n            tempItemOrder: [],\n            draggedItemId: null,\n            draggingToItemIndex: null,\n            dragging: false\n        };\n        this.getIndex = (id) => Array.from(this.ref.current.children).findIndex(item => item.id === id);\n        this.move = (itemOrder) => {\n            const ulNode = this.ref.current;\n            const nodes = Array.from(ulNode.children);\n            if (nodes.map(node => node.id).every((id, i) => id === itemOrder[i])) {\n                return;\n            }\n            while (ulNode.firstChild) {\n                ulNode.removeChild(ulNode.lastChild);\n            }\n            itemOrder.forEach(id => {\n                ulNode.appendChild(nodes.find(n => n.id === id));\n            });\n        };\n        this.dragStart0 = (el) => {\n            const { onDragStart } = this.props;\n            const draggedItemId = el.id;\n            el.classList.add(styles.modifiers.ghostRow);\n            el.setAttribute('aria-pressed', 'true');\n            this.setState({\n                draggedItemId,\n                dragging: true\n            });\n            onDragStart && onDragStart(draggedItemId);\n        };\n        this.dragStart = (evt) => {\n            evt.dataTransfer.effectAllowed = 'move';\n            evt.dataTransfer.setData('text/plain', evt.currentTarget.id);\n            this.dragStart0(evt.currentTarget);\n        };\n        this.onDragCancel = () => {\n            this.move(this.props.itemOrder);\n            Array.from(this.ref.current.children).forEach(el => {\n                el.classList.remove(styles.modifiers.ghostRow);\n                el.classList.remove(styles.modifiers.dragOver);\n                el.setAttribute('aria-pressed', 'false');\n            });\n            this.setState({\n                draggedItemId: null,\n                draggingToItemIndex: null,\n                dragging: false\n            });\n            if (this.props.onDragCancel) {\n                this.props.onDragCancel();\n            }\n        };\n        this.dragLeave = (evt) => {\n            // This event false fires when we call `this.move()`, so double check we're out of zone\n            if (!this.isValidDrop(evt)) {\n                this.move(this.props.itemOrder);\n                this.setState({\n                    draggingToItemIndex: null\n                });\n            }\n        };\n        this.dragEnd0 = (el) => {\n            el.classList.remove(styles.modifiers.ghostRow);\n            el.classList.remove(styles.modifiers.dragOver);\n            el.setAttribute('aria-pressed', 'false');\n            this.setState({\n                draggedItemId: null,\n                draggingToItemIndex: null,\n                dragging: false\n            });\n        };\n        this.dragEnd = (evt) => {\n            this.dragEnd0(evt.target);\n        };\n        this.isValidDrop = (evt) => {\n            const ulRect = this.ref.current.getBoundingClientRect();\n            return (evt.clientX > ulRect.x &&\n                evt.clientX < ulRect.x + ulRect.width &&\n                evt.clientY > ulRect.y &&\n                evt.clientY < ulRect.y + ulRect.height);\n        };\n        this.drop = (evt) => {\n            if (this.isValidDrop(evt)) {\n                this.props.onDragFinish(this.state.tempItemOrder);\n            }\n            else {\n                this.onDragCancel();\n            }\n        };\n        this.dragOver0 = (id) => {\n            const draggingToItemIndex = Array.from(this.ref.current.children).findIndex(item => item.id === id);\n            if (draggingToItemIndex !== this.state.draggingToItemIndex) {\n                const tempItemOrder = moveItem([...this.props.itemOrder], this.state.draggedItemId, draggingToItemIndex);\n                this.move(tempItemOrder);\n                this.setState({\n                    draggingToItemIndex,\n                    tempItemOrder\n                });\n            }\n        };\n        this.dragOver = (evt) => {\n            evt.preventDefault();\n            const curListItem = evt.target.closest('li');\n            if (!curListItem || !this.ref.current.contains(curListItem) || curListItem.id === this.state.draggedItemId) {\n                // We're going nowhere, don't bother calling `dragOver0`\n                return null;\n            }\n            else {\n                this.dragOver0(curListItem.id);\n            }\n        };\n        this.handleDragButtonKeys = (evt) => {\n            const { dragging } = this.state;\n            if (evt.key !== ' ' &&\n                evt.key !== 'Escape' &&\n                evt.key !== 'Enter' &&\n                evt.key !== 'ArrowUp' &&\n                evt.key !== 'ArrowDown') {\n                if (dragging) {\n                    evt.preventDefault();\n                }\n                return;\n            }\n            evt.preventDefault();\n            const dragItem = evt.target.closest('li');\n            if (evt.key === ' ' || (evt.key === 'Enter' && !dragging)) {\n                this.dragStart0(dragItem);\n            }\n            else if (dragging) {\n                if (evt.key === 'Escape' || evt.key === 'Enter') {\n                    this.setState({\n                        dragging: false\n                    });\n                    this.dragFinished = true;\n                    if (evt.key === 'Enter') {\n                        this.dragEnd0(dragItem);\n                        this.props.onDragFinish(this.state.tempItemOrder);\n                    }\n                    else {\n                        this.onDragCancel();\n                    }\n                }\n                else if (evt.key === 'ArrowUp') {\n                    const nextSelection = dragItem.previousSibling;\n                    if (nextSelection) {\n                        this.dragOver0(nextSelection.id);\n                        dragItem.querySelector(`.${styles.dataListItemDraggableButton}`).focus();\n                    }\n                }\n                else if (evt.key === 'ArrowDown') {\n                    const nextSelection = dragItem.nextSibling;\n                    if (nextSelection) {\n                        this.dragOver0(nextSelection.id);\n                        dragItem.querySelector(`.${styles.dataListItemDraggableButton}`).focus();\n                    }\n                }\n            }\n        };\n    }\n    componentDidUpdate(oldProps) {\n        if (this.dragFinished) {\n            this.dragFinished = false;\n            this.setState({\n                tempItemOrder: [...this.props.itemOrder],\n                draggedItemId: null,\n                dragging: false\n            });\n        }\n        if (oldProps.itemOrder !== this.props.itemOrder) {\n            this.move(this.props.itemOrder);\n        }\n    }\n    render() {\n        const _a = this.props, { className, children, onSelectDataListItem, selectedDataListItemId, isCompact, wrapModifier, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        onDragStart, onDragMove, onDragCancel, onDragFinish, gridBreakpoint, itemOrder } = _a, \n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        props = __rest(_a, [\"className\", \"children\", \"onSelectDataListItem\", \"selectedDataListItemId\", \"isCompact\", \"wrapModifier\", \"onDragStart\", \"onDragMove\", \"onDragCancel\", \"onDragFinish\", \"gridBreakpoint\", \"itemOrder\"]);\n        const { dragging } = this.state;\n        const isSelectable = onSelectDataListItem !== undefined;\n        const isDraggable = onDragFinish !== undefined;\n        const updateSelectedDataListItem = (id) => {\n            onSelectDataListItem(id);\n        };\n        const dragProps = isDraggable && {\n            onDragOver: this.dragOver,\n            onDrop: this.dragOver,\n            onDragLeave: this.dragLeave\n        };\n        return (React.createElement(DataListContext.Provider, { value: {\n                isSelectable,\n                selectedDataListItemId,\n                updateSelectedDataListItem,\n                isDraggable,\n                dragStart: this.dragStart,\n                dragEnd: this.dragEnd,\n                drop: this.drop,\n                dragKeyHandler: this.handleDragButtonKeys\n            } },\n            React.createElement(\"ul\", Object.assign({ className: css(styles.dataList, isCompact && styles.modifiers.compact, gridBreakpointClasses[gridBreakpoint], wrapModifier && styles.modifiers[wrapModifier], dragging && styles.modifiers.dragOver, className), style: props.style }, props, dragProps, { ref: this.ref }), children)));\n    }\n}\nDataList.displayName = 'DataList';\nDataList.defaultProps = {\n    children: null,\n    className: '',\n    selectedDataListItemId: '',\n    isCompact: false,\n    gridBreakpoint: 'md',\n    wrapModifier: null\n};\n//# sourceMappingURL=DataList.js.map"]},"metadata":{},"sourceType":"module"}