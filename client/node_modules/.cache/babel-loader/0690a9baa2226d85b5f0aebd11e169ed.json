{"ast":null,"code":"// @ts-nocheck\nimport getWindow from './getWindow';\nimport getDocumentElement from './getDocumentElement';\nimport getWindowScrollBarX from './getWindowScrollBarX';\n/**\n * @param element\n */\n\nexport default function getViewportRect(element) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper\n  // can be obscured underneath it.\n  // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even\n  // if it isn't open, so if this isn't available, the popper will be detected\n  // to overflow the bottom of the screen too early.\n\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)\n    // In Chrome, it returns a value very close to 0 (+/-) but contains rounding\n    // errors due to floating point numbers, so we need to check precision.\n    // Safari returns a number <= 0, usually < -1 when pinch-zoomed\n    // Feature detection fails in mobile emulation mode in Chrome.\n    // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <\n    // 0.001\n    // Fallback here: \"Not Safari\" userAgent\n\n    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n\n  return {\n    width,\n    height,\n    x: x + getWindowScrollBarX(element),\n    y\n  };\n}","map":{"version":3,"sources":["../../../../../../../src/helpers/Popper/thirdparty/popper-core/dom-utils/getViewportRect.ts"],"names":[],"mappings":"AAAA;AACA,OAAO,SAAP,MAAsB,aAAtB;AACA,OAAO,kBAAP,MAA+B,sBAA/B;AACA,OAAO,mBAAP,MAAgC,uBAAhC;AAEA;;AAEG;;AACH,eAAc,SAAU,eAAV,CAA0B,OAA1B,EAA0C;AACtD,QAAM,GAAG,GAAG,SAAS,CAAC,OAAD,CAArB;AACA,QAAM,IAAI,GAAG,kBAAkB,CAAC,OAAD,CAA/B;AACA,QAAM,cAAc,GAAG,GAAG,CAAC,cAA3B;AAEA,MAAI,KAAK,GAAG,IAAI,CAAC,WAAjB;AACA,MAAI,MAAM,GAAG,IAAI,CAAC,YAAlB;AACA,MAAI,CAAC,GAAG,CAAR;AACA,MAAI,CAAC,GAAG,CAAR,CARsD,CAUtD;AACA;AACA;AACA;AACA;;AACA,MAAI,cAAJ,EAAoB;AAClB,IAAA,KAAK,GAAG,cAAc,CAAC,KAAvB;AACA,IAAA,MAAM,GAAG,cAAc,CAAC,MAAxB,CAFkB,CAIlB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA,QAAI,CAAC,iCAAiC,IAAjC,CAAsC,SAAS,CAAC,SAAhD,CAAL,EAAiE;AAC/D,MAAA,CAAC,GAAG,cAAc,CAAC,UAAnB;AACA,MAAA,CAAC,GAAG,cAAc,CAAC,SAAnB;AACD;AACF;;AAED,SAAO;AACL,IAAA,KADK;AAEL,IAAA,MAFK;AAGL,IAAA,CAAC,EAAE,CAAC,GAAG,mBAAmB,CAAC,OAAD,CAHrB;AAIL,IAAA;AAJK,GAAP;AAMD","sourceRoot":"","sourcesContent":["// @ts-nocheck\nimport getWindow from './getWindow';\nimport getDocumentElement from './getDocumentElement';\nimport getWindowScrollBarX from './getWindowScrollBarX';\n/**\n * @param element\n */\nexport default function getViewportRect(element) {\n    const win = getWindow(element);\n    const html = getDocumentElement(element);\n    const visualViewport = win.visualViewport;\n    let width = html.clientWidth;\n    let height = html.clientHeight;\n    let x = 0;\n    let y = 0;\n    // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper\n    // can be obscured underneath it.\n    // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even\n    // if it isn't open, so if this isn't available, the popper will be detected\n    // to overflow the bottom of the screen too early.\n    if (visualViewport) {\n        width = visualViewport.width;\n        height = visualViewport.height;\n        // Uses Layout Viewport (like Chrome; Safari does not currently)\n        // In Chrome, it returns a value very close to 0 (+/-) but contains rounding\n        // errors due to floating point numbers, so we need to check precision.\n        // Safari returns a number <= 0, usually < -1 when pinch-zoomed\n        // Feature detection fails in mobile emulation mode in Chrome.\n        // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <\n        // 0.001\n        // Fallback here: \"Not Safari\" userAgent\n        if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n            x = visualViewport.offsetLeft;\n            y = visualViewport.offsetTop;\n        }\n    }\n    return {\n        width,\n        height,\n        x: x + getWindowScrollBarX(element),\n        y\n    };\n}\n//# sourceMappingURL=getViewportRect.js.map"]},"metadata":{},"sourceType":"module"}