{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { TreeViewSearch } from './TreeViewSearch';\nimport { Divider } from '../Divider';\nexport const TreeViewList = _a => {\n  var {\n    isNested = false,\n    onSearch,\n    searchProps,\n    children\n  } = _a,\n      props = __rest(_a, [\"isNested\", \"onSearch\", \"searchProps\", \"children\"]);\n\n  return React.createElement(React.Fragment, null, onSearch && React.createElement(React.Fragment, null, React.createElement(TreeViewSearch, Object.assign({\n    onChange: onSearch\n  }, searchProps)), React.createElement(Divider, null)), React.createElement(\"ul\", Object.assign({\n    className: css('pf-c-tree-view__list'),\n    role: isNested ? 'group' : 'tree'\n  }, props), children));\n};\nTreeViewList.displayName = 'TreeViewList';","map":{"version":3,"sources":["../../../../src/components/TreeView/TreeViewList.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,SAAS,cAAT,QAA+B,kBAA/B;AACA,SAAS,OAAT,QAAwB,YAAxB;AAaA,OAAO,MAAM,YAAY,GAAgD,EAAD,IAMhD;MANiD;AACvE,IAAA,QAAQ,GAAG,KAD4D;AAEvE,IAAA,QAFuE;AAGvE,IAAA,WAHuE;AAIvE,IAAA;AAJuE,MAI/D,E;MACL,KAAK,GAAA,MAAA,CAAA,EAAA,EAL+D,CAAA,UAAA,EAAA,UAAA,EAAA,aAAA,EAAA,UAAA,CAK/D,C;;AACe,SACvB,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACG,QAAQ,IACP,KAAA,CAAA,aAAA,CAAC,KAAK,CAAC,QAAP,EAAe,IAAf,EACE,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,QAAQ,EAAE;AAAX,GAAA,EAAyB,WAAzB,CAAf,CADF,EAEE,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ,IAAR,CAFF,CAFJ,EAOE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AAAI,IAAA,SAAS,EAAE,GAAG,CAAC,sBAAD,CAAlB;AAA4C,IAAA,IAAI,EAAE,QAAQ,GAAG,OAAH,GAAa;AAAvE,GAAA,EAAmF,KAAnF,CAAA,EACG,QADH,CAPF,CADuB;AAYxB,CAlBM;AAmBP,YAAY,CAAC,WAAb,GAA2B,cAA3B","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { TreeViewSearch } from './TreeViewSearch';\nimport { Divider } from '../Divider';\nexport const TreeViewList = (_a) => {\n    var { isNested = false, onSearch, searchProps, children } = _a, props = __rest(_a, [\"isNested\", \"onSearch\", \"searchProps\", \"children\"]);\n    return (React.createElement(React.Fragment, null,\n        onSearch && (React.createElement(React.Fragment, null,\n            React.createElement(TreeViewSearch, Object.assign({ onChange: onSearch }, searchProps)),\n            React.createElement(Divider, null))),\n        React.createElement(\"ul\", Object.assign({ className: css('pf-c-tree-view__list'), role: isNested ? 'group' : 'tree' }, props), children)));\n};\nTreeViewList.displayName = 'TreeViewList';\n//# sourceMappingURL=TreeViewList.js.map"]},"metadata":{},"sourceType":"module"}