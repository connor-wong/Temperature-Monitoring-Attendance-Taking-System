{"ast":null,"code":"// @ts-nocheck\nimport format from './format';\nimport { modifierPhases } from '../enums';\nconst INVALID_MODIFIER_ERROR = 'Popper: modifier \"%s\" provided an invalid %s property, expected %s but got %s';\nconst MISSING_DEPENDENCY_ERROR = 'Popper: modifier \"%s\" requires \"%s\", but \"%s\" modifier is not available';\nconst VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];\n/**\n * @param modifiers\n */\n\nexport default function validateModifiers(modifiers) {\n  modifiers.forEach(modifier => {\n    Object.keys(modifier).forEach(key => {\n      switch (key) {\n        case 'name':\n          if (typeof modifier.name !== 'string') {\n            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '\"name\"', '\"string\"', `\"${String(modifier.name)}\"`));\n          }\n\n          break;\n\n        case 'enabled':\n          if (typeof modifier.enabled !== 'boolean') {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"enabled\"', '\"boolean\"', `\"${String(modifier.enabled)}\"`));\n          }\n\n        case 'phase':\n          if (modifierPhases.indexOf(modifier.phase) < 0) {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"phase\"', `either ${modifierPhases.join(', ')}`, `\"${String(modifier.phase)}\"`));\n          }\n\n          break;\n\n        case 'fn':\n          if (typeof modifier.fn !== 'function') {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"fn\"', '\"function\"', `\"${String(modifier.fn)}\"`));\n          }\n\n          break;\n\n        case 'effect':\n          if (typeof modifier.effect !== 'function') {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"effect\"', '\"function\"', `\"${String(modifier.fn)}\"`));\n          }\n\n          break;\n\n        case 'requires':\n          if (!Array.isArray(modifier.requires)) {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requires\"', '\"array\"', `\"${String(modifier.requires)}\"`));\n          }\n\n          break;\n\n        case 'requiresIfExists':\n          if (!Array.isArray(modifier.requiresIfExists)) {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requiresIfExists\"', '\"array\"', `\"${String(modifier.requiresIfExists)}\"`));\n          }\n\n          break;\n\n        case 'options':\n        case 'data':\n          break;\n\n        default:\n          console.error(`PopperJS: an invalid property has been provided to the \"${modifier.name}\" modifier, valid properties are ${VALID_PROPERTIES.map(s => `\"${s}\"`).join(', ')}; but \"${key}\" was provided.`);\n      }\n\n      modifier.requires && modifier.requires.forEach(requirement => {\n        if (modifiers.find(mod => mod.name === requirement) == null) {\n          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));\n        }\n      });\n    });\n  });\n}","map":{"version":3,"sources":["../../../../../../../src/helpers/Popper/thirdparty/popper-core/utils/validateModifiers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// @ts-nocheck\nimport format from './format';\nimport { modifierPhases } from '../enums';\nconst INVALID_MODIFIER_ERROR = 'Popper: modifier \"%s\" provided an invalid %s property, expected %s but got %s';\nconst MISSING_DEPENDENCY_ERROR = 'Popper: modifier \"%s\" requires \"%s\", but \"%s\" modifier is not available';\nconst VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];\n/**\n * @param modifiers\n */\nexport default function validateModifiers(modifiers) {\n    modifiers.forEach(modifier => {\n        Object.keys(modifier).forEach(key => {\n            switch (key) {\n                case 'name':\n                    if (typeof modifier.name !== 'string') {\n                        console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '\"name\"', '\"string\"', `\"${String(modifier.name)}\"`));\n                    }\n                    break;\n                case 'enabled':\n                    if (typeof modifier.enabled !== 'boolean') {\n                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"enabled\"', '\"boolean\"', `\"${String(modifier.enabled)}\"`));\n                    }\n                case 'phase':\n                    if (modifierPhases.indexOf(modifier.phase) < 0) {\n                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"phase\"', `either ${modifierPhases.join(', ')}`, `\"${String(modifier.phase)}\"`));\n                    }\n                    break;\n                case 'fn':\n                    if (typeof modifier.fn !== 'function') {\n                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"fn\"', '\"function\"', `\"${String(modifier.fn)}\"`));\n                    }\n                    break;\n                case 'effect':\n                    if (typeof modifier.effect !== 'function') {\n                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"effect\"', '\"function\"', `\"${String(modifier.fn)}\"`));\n                    }\n                    break;\n                case 'requires':\n                    if (!Array.isArray(modifier.requires)) {\n                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requires\"', '\"array\"', `\"${String(modifier.requires)}\"`));\n                    }\n                    break;\n                case 'requiresIfExists':\n                    if (!Array.isArray(modifier.requiresIfExists)) {\n                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requiresIfExists\"', '\"array\"', `\"${String(modifier.requiresIfExists)}\"`));\n                    }\n                    break;\n                case 'options':\n                case 'data':\n                    break;\n                default:\n                    console.error(`PopperJS: an invalid property has been provided to the \"${modifier.name}\" modifier, valid properties are ${VALID_PROPERTIES.map(s => `\"${s}\"`).join(', ')}; but \"${key}\" was provided.`);\n            }\n            modifier.requires &&\n                modifier.requires.forEach(requirement => {\n                    if (modifiers.find(mod => mod.name === requirement) == null) {\n                        console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));\n                    }\n                });\n        });\n    });\n}\n//# sourceMappingURL=validateModifiers.js.map"]},"metadata":{},"sourceType":"module"}