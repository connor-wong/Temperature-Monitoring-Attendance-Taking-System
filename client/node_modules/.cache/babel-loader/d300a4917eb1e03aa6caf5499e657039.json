{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/ToggleGroup/toggle-group';\nimport ToggleGroupContext from './ToggleGroupContext';\nimport { ToggleGroupItemVariant, ToggleGroupItemElement } from './ToggleGroupItemElement';\nexport const ToggleGroupItem = _a => {\n  var {\n    text,\n    icon,\n    className,\n    isDisabled = false,\n    isSelected = false,\n    'aria-label': ariaLabel = '',\n    onChange = () => {},\n    buttonId = ''\n  } = _a,\n      props = __rest(_a, [\"text\", \"icon\", \"className\", \"isDisabled\", \"isSelected\", 'aria-label', \"onChange\", \"buttonId\"]);\n\n  const toggleGroupContext = React.useContext(ToggleGroupContext);\n\n  const handleChange = event => {\n    onChange(!isSelected, event);\n  };\n\n  if (!ariaLabel && icon && !text) {\n    /* eslint-disable no-console */\n    console.warn('An accessible aria-label is required when using the toggle group item icon variant.');\n  }\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.toggleGroupItem, className)\n  }, props), React.createElement(\"button\", Object.assign({\n    type: \"button\",\n    className: css(styles.toggleGroupButton, toggleGroupContext.variant === 'light' && styles.modifiers.light, isSelected && styles.modifiers.selected),\n    \"aria-pressed\": isSelected,\n    onClick: handleChange\n  }, ariaLabel && {\n    'aria-label': ariaLabel\n  }, isDisabled && {\n    disabled: true\n  }, buttonId && {\n    id: buttonId\n  }), icon ? React.createElement(ToggleGroupItemElement, {\n    variant: ToggleGroupItemVariant.icon\n  }, icon) : null, text ? React.createElement(ToggleGroupItemElement, {\n    variant: ToggleGroupItemVariant.text\n  }, text) : null));\n};\nToggleGroupItem.displayName = 'ToggleGroupItem';","map":{"version":3,"sources":["../../../../src/components/ToggleGroup/ToggleGroupItem.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,kEAAnB;AACA,OAAO,kBAAP,MAA+B,sBAA/B;AACA,SAAS,sBAAT,EAAiC,sBAAjC,QAA+D,0BAA/D;AAqBA,OAAO,MAAM,eAAe,GAAmD,EAAD,IAUnD;MAVoD;AAC7E,IAAA,IAD6E;AAE7E,IAAA,IAF6E;AAG7E,IAAA,SAH6E;AAI7E,IAAA,UAAU,GAAG,KAJgE;AAK7E,IAAA,UAAU,GAAG,KALgE;AAM7E,kBAAc,SAAS,GAAG,EANmD;AAO7E,IAAA,QAAQ,GAAG,MAAK,CAAG,CAP0D;AAQ7E,IAAA,QAAQ,GAAG;AARkE,MAQhE,E;MACV,KAAK,GAAA,MAAA,CAAA,EAAA,EATqE,CAAA,MAAA,EAAA,MAAA,EAAA,WAAA,EAAA,YAAA,EAAA,YAAA,EAAA,YAAA,EAAA,UAAA,EAAA,UAAA,CASrE,C;;AAER,QAAM,kBAAkB,GAAG,KAAK,CAAC,UAAN,CAAiB,kBAAjB,CAA3B;;AAEA,QAAM,YAAY,GAAI,KAAD,IAAqB;AACxC,IAAA,QAAQ,CAAC,CAAC,UAAF,EAAc,KAAd,CAAR;AACD,GAFD;;AAIA,MAAI,CAAC,SAAD,IAAc,IAAd,IAAsB,CAAC,IAA3B,EAAiC;AAC/B;AACA,IAAA,OAAO,CAAC,IAAR,CAAa,qFAAb;AACD;;AAED,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AAAK,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,eAAR,EAAyB,SAAzB;AAAnB,GAAA,EAA4D,KAA5D,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,iBADK,EAEZ,kBAAkB,CAAC,OAAnB,KAA+B,OAA/B,IAA0C,MAAM,CAAC,SAAP,CAAiB,KAF/C,EAGZ,UAAU,IAAI,MAAM,CAAC,SAAP,CAAiB,QAHnB,CAFhB;AAMG,oBACa,UAPhB;AAQE,IAAA,OAAO,EAAE;AARX,GAAA,EASO,SAAS,IAAI;AAAE,kBAAc;AAAhB,GATpB,EAUO,UAAU,IAAI;AAAE,IAAA,QAAQ,EAAE;AAAZ,GAVrB,EAWO,QAAQ,IAAI;AAAE,IAAA,EAAE,EAAE;AAAN,GAXnB,CAAA,EAaG,IAAI,GAAG,KAAA,CAAA,aAAA,CAAC,sBAAD,EAAuB;AAAC,IAAA,OAAO,EAAE,sBAAsB,CAAC;AAAjC,GAAvB,EAA+D,IAA/D,CAAH,GAAmG,IAb1G,EAcG,IAAI,GAAG,KAAA,CAAA,aAAA,CAAC,sBAAD,EAAuB;AAAC,IAAA,OAAO,EAAE,sBAAsB,CAAC;AAAjC,GAAvB,EAA+D,IAA/D,CAAH,GAAmG,IAd1G,CADF,CADF;AAoBD,CA1CM;AA2CP,eAAe,CAAC,WAAhB,GAA8B,iBAA9B","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/ToggleGroup/toggle-group';\nimport ToggleGroupContext from './ToggleGroupContext';\nimport { ToggleGroupItemVariant, ToggleGroupItemElement } from './ToggleGroupItemElement';\nexport const ToggleGroupItem = (_a) => {\n    var { text, icon, className, isDisabled = false, isSelected = false, 'aria-label': ariaLabel = '', onChange = () => { }, buttonId = '' } = _a, props = __rest(_a, [\"text\", \"icon\", \"className\", \"isDisabled\", \"isSelected\", 'aria-label', \"onChange\", \"buttonId\"]);\n    const toggleGroupContext = React.useContext(ToggleGroupContext);\n    const handleChange = (event) => {\n        onChange(!isSelected, event);\n    };\n    if (!ariaLabel && icon && !text) {\n        /* eslint-disable no-console */\n        console.warn('An accessible aria-label is required when using the toggle group item icon variant.');\n    }\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.toggleGroupItem, className) }, props),\n        React.createElement(\"button\", Object.assign({ type: \"button\", className: css(styles.toggleGroupButton, toggleGroupContext.variant === 'light' && styles.modifiers.light, isSelected && styles.modifiers.selected), \"aria-pressed\": isSelected, onClick: handleChange }, (ariaLabel && { 'aria-label': ariaLabel }), (isDisabled && { disabled: true }), (buttonId && { id: buttonId })),\n            icon ? React.createElement(ToggleGroupItemElement, { variant: ToggleGroupItemVariant.icon }, icon) : null,\n            text ? React.createElement(ToggleGroupItemElement, { variant: ToggleGroupItemVariant.text }, text) : null)));\n};\nToggleGroupItem.displayName = 'ToggleGroupItem';\n//# sourceMappingURL=ToggleGroupItem.js.map"]},"metadata":{},"sourceType":"module"}