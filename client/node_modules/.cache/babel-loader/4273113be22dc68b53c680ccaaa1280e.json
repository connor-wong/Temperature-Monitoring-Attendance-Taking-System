{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContext } from './ToolbarUtils';\nimport { ToolbarChipGroupContent } from './ToolbarChipGroupContent';\nimport { formatBreakpointMods } from '../../helpers/util';\nexport class Toolbar extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.chipGroupContentRef = React.createRef();\n    this.staticFilterInfo = {};\n    this.state = {\n      isManagedToggleExpanded: false,\n      filterInfo: {},\n      windowWidth: window.innerWidth\n    };\n\n    this.isToggleManaged = () => !(this.props.isExpanded || !!this.props.toggleIsExpanded);\n\n    this.toggleIsExpanded = () => {\n      this.setState(prevState => ({\n        isManagedToggleExpanded: !prevState.isManagedToggleExpanded\n      }));\n    };\n\n    this.closeExpandableContent = e => {\n      if (e.target.innerWidth !== this.state.windowWidth) {\n        this.setState(() => ({\n          isManagedToggleExpanded: false,\n          windowWidth: e.target.innerWidth\n        }));\n      }\n    };\n\n    this.updateNumberFilters = (categoryName, numberOfFilters) => {\n      const filterInfoToUpdate = Object.assign({}, this.staticFilterInfo);\n\n      if (!filterInfoToUpdate.hasOwnProperty(categoryName) || filterInfoToUpdate[categoryName] !== numberOfFilters) {\n        filterInfoToUpdate[categoryName] = numberOfFilters;\n        this.staticFilterInfo = filterInfoToUpdate;\n        this.setState({\n          filterInfo: filterInfoToUpdate\n        });\n      }\n    };\n\n    this.getNumberOfFilters = () => Object.values(this.state.filterInfo).reduce((acc, cur) => acc + cur, 0);\n\n    this.renderToolbar = randomId => {\n      const _a = this.props,\n            {\n        clearAllFilters,\n        clearFiltersButtonText,\n        collapseListedFiltersBreakpoint,\n        isExpanded: isExpandedProp,\n        toggleIsExpanded,\n        className,\n        children,\n        inset,\n        usePageInsets\n      } = _a,\n            props = __rest(_a, [\"clearAllFilters\", \"clearFiltersButtonText\", \"collapseListedFiltersBreakpoint\", \"isExpanded\", \"toggleIsExpanded\", \"className\", \"children\", \"inset\", \"usePageInsets\"]);\n\n      const {\n        isManagedToggleExpanded\n      } = this.state;\n      const isToggleManaged = this.isToggleManaged();\n      const isExpanded = isToggleManaged ? isManagedToggleExpanded : isExpandedProp;\n      const numberOfFilters = this.getNumberOfFilters();\n      const showClearFiltersButton = numberOfFilters > 0;\n      return React.createElement(\"div\", Object.assign({\n        className: css(styles.toolbar, usePageInsets && styles.modifiers.pageInsets, formatBreakpointMods(inset, styles), className),\n        id: randomId\n      }, props), React.createElement(ToolbarContext.Provider, {\n        value: {\n          isExpanded,\n          toggleIsExpanded: isToggleManaged ? this.toggleIsExpanded : toggleIsExpanded,\n          chipGroupContentRef: this.chipGroupContentRef,\n          updateNumberFilters: this.updateNumberFilters,\n          numberOfFilters,\n          clearAllFilters,\n          clearFiltersButtonText,\n          showClearFiltersButton,\n          toolbarId: randomId\n        }\n      }, children, React.createElement(ToolbarChipGroupContent, {\n        isExpanded: isExpanded,\n        chipGroupContentRef: this.chipGroupContentRef,\n        clearAllFilters: clearAllFilters,\n        showClearFiltersButton: showClearFiltersButton,\n        clearFiltersButtonText: clearFiltersButtonText,\n        numberOfFilters: numberOfFilters,\n        collapseListedFiltersBreakpoint: collapseListedFiltersBreakpoint\n      })));\n    };\n  }\n\n  componentDidMount() {\n    if (this.isToggleManaged()) {\n      window.addEventListener('resize', this.closeExpandableContent);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.isToggleManaged()) {\n      window.removeEventListener('resize', this.closeExpandableContent);\n    }\n  }\n\n  render() {\n    return this.props.id ? this.renderToolbar(this.props.id) : React.createElement(GenerateId, null, randomId => this.renderToolbar(randomId));\n  }\n\n}\nToolbar.displayName = 'Toolbar';","map":{"version":3,"sources":["../../../../src/components/Toolbar/Toolbar.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContext } from './ToolbarUtils';\nimport { ToolbarChipGroupContent } from './ToolbarChipGroupContent';\nimport { formatBreakpointMods } from '../../helpers/util';\nexport class Toolbar extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.chipGroupContentRef = React.createRef();\n        this.staticFilterInfo = {};\n        this.state = {\n            isManagedToggleExpanded: false,\n            filterInfo: {},\n            windowWidth: window.innerWidth\n        };\n        this.isToggleManaged = () => !(this.props.isExpanded || !!this.props.toggleIsExpanded);\n        this.toggleIsExpanded = () => {\n            this.setState(prevState => ({\n                isManagedToggleExpanded: !prevState.isManagedToggleExpanded\n            }));\n        };\n        this.closeExpandableContent = (e) => {\n            if (e.target.innerWidth !== this.state.windowWidth) {\n                this.setState(() => ({\n                    isManagedToggleExpanded: false,\n                    windowWidth: e.target.innerWidth\n                }));\n            }\n        };\n        this.updateNumberFilters = (categoryName, numberOfFilters) => {\n            const filterInfoToUpdate = Object.assign({}, this.staticFilterInfo);\n            if (!filterInfoToUpdate.hasOwnProperty(categoryName) || filterInfoToUpdate[categoryName] !== numberOfFilters) {\n                filterInfoToUpdate[categoryName] = numberOfFilters;\n                this.staticFilterInfo = filterInfoToUpdate;\n                this.setState({ filterInfo: filterInfoToUpdate });\n            }\n        };\n        this.getNumberOfFilters = () => Object.values(this.state.filterInfo).reduce((acc, cur) => acc + cur, 0);\n        this.renderToolbar = (randomId) => {\n            const _a = this.props, { clearAllFilters, clearFiltersButtonText, collapseListedFiltersBreakpoint, isExpanded: isExpandedProp, toggleIsExpanded, className, children, inset, usePageInsets } = _a, props = __rest(_a, [\"clearAllFilters\", \"clearFiltersButtonText\", \"collapseListedFiltersBreakpoint\", \"isExpanded\", \"toggleIsExpanded\", \"className\", \"children\", \"inset\", \"usePageInsets\"]);\n            const { isManagedToggleExpanded } = this.state;\n            const isToggleManaged = this.isToggleManaged();\n            const isExpanded = isToggleManaged ? isManagedToggleExpanded : isExpandedProp;\n            const numberOfFilters = this.getNumberOfFilters();\n            const showClearFiltersButton = numberOfFilters > 0;\n            return (React.createElement(\"div\", Object.assign({ className: css(styles.toolbar, usePageInsets && styles.modifiers.pageInsets, formatBreakpointMods(inset, styles), className), id: randomId }, props),\n                React.createElement(ToolbarContext.Provider, { value: {\n                        isExpanded,\n                        toggleIsExpanded: isToggleManaged ? this.toggleIsExpanded : toggleIsExpanded,\n                        chipGroupContentRef: this.chipGroupContentRef,\n                        updateNumberFilters: this.updateNumberFilters,\n                        numberOfFilters,\n                        clearAllFilters,\n                        clearFiltersButtonText,\n                        showClearFiltersButton,\n                        toolbarId: randomId\n                    } },\n                    children,\n                    React.createElement(ToolbarChipGroupContent, { isExpanded: isExpanded, chipGroupContentRef: this.chipGroupContentRef, clearAllFilters: clearAllFilters, showClearFiltersButton: showClearFiltersButton, clearFiltersButtonText: clearFiltersButtonText, numberOfFilters: numberOfFilters, collapseListedFiltersBreakpoint: collapseListedFiltersBreakpoint }))));\n        };\n    }\n    componentDidMount() {\n        if (this.isToggleManaged()) {\n            window.addEventListener('resize', this.closeExpandableContent);\n        }\n    }\n    componentWillUnmount() {\n        if (this.isToggleManaged()) {\n            window.removeEventListener('resize', this.closeExpandableContent);\n        }\n    }\n    render() {\n        return this.props.id ? (this.renderToolbar(this.props.id)) : (React.createElement(GenerateId, null, randomId => this.renderToolbar(randomId)));\n    }\n}\nToolbar.displayName = 'Toolbar';\n//# sourceMappingURL=Toolbar.js.map"]},"metadata":{},"sourceType":"module"}