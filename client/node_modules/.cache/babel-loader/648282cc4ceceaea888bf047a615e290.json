{"ast":null,"code":"import { __rest } from \"tslib\";\n/* eslint-disable no-console */\n\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Tooltip/tooltip';\nimport { css } from '@patternfly/react-styles';\nimport { TooltipContent } from './TooltipContent';\nimport { TooltipArrow } from './TooltipArrow';\nimport { KEY_CODES } from '../../helpers/constants';\nimport tooltipMaxWidth from \"@patternfly/react-tokens/dist/esm/c_tooltip_MaxWidth\";\nimport { Popper, getOpacityTransition } from '../../helpers/Popper/Popper';\nexport var TooltipPosition;\n\n(function (TooltipPosition) {\n  TooltipPosition[\"auto\"] = \"auto\";\n  TooltipPosition[\"top\"] = \"top\";\n  TooltipPosition[\"bottom\"] = \"bottom\";\n  TooltipPosition[\"left\"] = \"left\";\n  TooltipPosition[\"right\"] = \"right\";\n})(TooltipPosition || (TooltipPosition = {})); // id for associating trigger with the content aria-describedby or aria-labelledby\n\n\nlet pfTooltipIdCounter = 1;\nexport const Tooltip = _a => {\n  var {\n    content: bodyContent,\n    position = 'top',\n    trigger = 'mouseenter focus',\n    isVisible = false,\n    isContentLeftAligned = false,\n    enableFlip = true,\n    className = '',\n    entryDelay = 0,\n    exitDelay = 0,\n    appendTo = () => document.body,\n    zIndex = 9999,\n    maxWidth = tooltipMaxWidth.value,\n    distance = 15,\n    aria = 'describedby',\n    // For every initial starting position, there are 3 escape positions\n    flipBehavior = ['top', 'right', 'bottom', 'left', 'top', 'right', 'bottom'],\n    id = `pf-tooltip-${pfTooltipIdCounter++}`,\n    children,\n    animationDuration = 300,\n    reference,\n    boundary,\n    isAppLauncher,\n    tippyProps\n  } = _a,\n      rest = __rest(_a, [\"content\", \"position\", \"trigger\", \"isVisible\", \"isContentLeftAligned\", \"enableFlip\", \"className\", \"entryDelay\", \"exitDelay\", \"appendTo\", \"zIndex\", \"maxWidth\", \"distance\", \"aria\", \"flipBehavior\", \"id\", \"children\", \"animationDuration\", \"reference\", \"boundary\", \"isAppLauncher\", \"tippyProps\"]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    boundary !== undefined && console.warn('The Tooltip boundary prop has been deprecated. If you want to constrain the popper to a specific element use the appendTo prop instead.');\n    isAppLauncher !== undefined && console.warn('The Tooltip isAppLauncher prop has been deprecated and is no longer used.');\n    tippyProps !== undefined && console.warn('The Tooltip tippyProps prop has been deprecated and is no longer used.');\n  } // could make this a prop in the future (true | false | 'toggle')\n\n\n  const hideOnClick = true;\n  const triggerOnMouseenter = trigger.includes('mouseenter');\n  const triggerOnFocus = trigger.includes('focus');\n  const triggerOnClick = trigger.includes('click');\n  const triggerManually = trigger === 'manual';\n  const [visible, setVisible] = React.useState(false);\n  const [opacity, setOpacity] = React.useState(0);\n  const transitionTimerRef = React.useRef(null);\n  const showTimerRef = React.useRef(null);\n  const hideTimerRef = React.useRef(null);\n\n  const onDocumentKeyDown = event => {\n    if (!triggerManually) {\n      if (event.keyCode === KEY_CODES.ESCAPE_KEY && visible) {\n        hide();\n      }\n    }\n  };\n\n  const onTriggerEnter = event => {\n    if (event.keyCode === KEY_CODES.ENTER) {\n      if (!visible) {\n        show();\n      } else {\n        hide();\n      }\n    }\n  };\n\n  React.useEffect(() => {\n    if (isVisible) {\n      show();\n    } else {\n      hide();\n    }\n  }, [isVisible]);\n\n  const show = () => {\n    if (transitionTimerRef.current) {\n      clearTimeout(transitionTimerRef.current);\n    }\n\n    if (hideTimerRef.current) {\n      clearTimeout(hideTimerRef.current);\n    }\n\n    showTimerRef.current = setTimeout(() => {\n      setVisible(true);\n      setOpacity(1);\n    }, entryDelay);\n  };\n\n  const hide = () => {\n    if (showTimerRef.current) {\n      clearTimeout(showTimerRef.current);\n    }\n\n    hideTimerRef.current = setTimeout(() => {\n      setOpacity(0);\n      transitionTimerRef.current = setTimeout(() => setVisible(false), animationDuration);\n    }, exitDelay);\n  };\n\n  const positionModifiers = {\n    top: styles.modifiers.top,\n    bottom: styles.modifiers.bottom,\n    left: styles.modifiers.left,\n    right: styles.modifiers.right\n  };\n  const hasCustomMaxWidth = maxWidth !== tooltipMaxWidth.value;\n  const content = React.createElement(\"div\", Object.assign({\n    className: css(styles.tooltip, className),\n    role: \"tooltip\",\n    id: id,\n    style: {\n      maxWidth: hasCustomMaxWidth ? maxWidth : null,\n      opacity,\n      transition: getOpacityTransition(animationDuration)\n    }\n  }, rest), React.createElement(TooltipArrow, null), React.createElement(TooltipContent, {\n    isLeftAligned: isContentLeftAligned\n  }, bodyContent));\n\n  const onDocumentClick = (event, triggerElement) => {\n    // event.currentTarget = document\n    // event.target could be triggerElement or something else\n    if (hideOnClick === true) {\n      // hide on inside the toggle as well as on outside clicks\n      if (visible) {\n        hide();\n      } else if (event.target === triggerElement) {\n        show();\n      }\n    } else if (hideOnClick === 'toggle' && event.target === triggerElement) {\n      // prevent outside clicks from hiding but allow it to still be toggled on toggle click\n      if (visible) {\n        hide();\n      } else {\n        show();\n      }\n    } else if (hideOnClick === false && !visible && event.target === triggerElement) {\n      show();\n    }\n  };\n\n  const addAriaToTrigger = () => {\n    if (aria === 'describedby' && children && children.props && !children.props['aria-describedby']) {\n      return React.cloneElement(children, {\n        'aria-describedby': id\n      });\n    } else if (aria === 'labelledby' && children.props && !children.props['aria-labelledby']) {\n      return React.cloneElement(children, {\n        'aria-labelledby': id\n      });\n    }\n\n    return children;\n  };\n\n  return React.createElement(Popper, {\n    trigger: aria !== 'none' && visible ? addAriaToTrigger() : children,\n    reference: reference,\n    popper: content,\n    popperMatchesTriggerWidth: false,\n    appendTo: appendTo,\n    isVisible: visible,\n    positionModifiers: positionModifiers,\n    distance: distance,\n    placement: position,\n    onMouseEnter: triggerOnMouseenter && show,\n    onMouseLeave: triggerOnMouseenter && hide,\n    onFocus: triggerOnFocus && show,\n    onBlur: triggerOnFocus && hide,\n    onDocumentClick: triggerOnClick && onDocumentClick,\n    onDocumentKeyDown: triggerManually ? null : onDocumentKeyDown,\n    onTriggerEnter: triggerManually ? null : onTriggerEnter,\n    enableFlip: enableFlip,\n    zIndex: zIndex,\n    flipBehavior: flipBehavior\n  });\n};\nTooltip.displayName = 'Tooltip';","map":{"version":3,"sources":["../../../../src/components/Tooltip/Tooltip.tsx"],"names":[],"mappings":";AAAA;;AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,yDAAnB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,SAAS,cAAT,QAA+B,kBAA/B;AACA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,SAAT,QAA0B,yBAA1B;AACA,OAAO,eAAP,MAAsB,sDAAtB;AAEA,SAAS,MAAT,EAAiB,oBAAjB,QAA6C,6BAA7C;AAGA,OAAA,IAAY,eAAZ;;AAAA,CAAA,UAAY,eAAZ,EAA2B;AACzB,EAAA,eAAA,CAAA,MAAA,CAAA,GAAA,MAAA;AACA,EAAA,eAAA,CAAA,KAAA,CAAA,GAAA,KAAA;AACA,EAAA,eAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACA,EAAA,eAAA,CAAA,MAAA,CAAA,GAAA,MAAA;AACA,EAAA,eAAA,CAAA,OAAA,CAAA,GAAA,OAAA;AACD,CAND,EAAY,eAAe,KAAf,eAAe,GAAA,EAAA,CAA3B,E,CAoFA;;;AACA,IAAI,kBAAkB,GAAG,CAAzB;AAEA,OAAO,MAAM,OAAO,GAA2C,EAAD,IAyB3C;MAzB4C;AAC7D,IAAA,OAAO,EAAE,WADoD;AAE7D,IAAA,QAAQ,GAAG,KAFkD;AAG7D,IAAA,OAAO,GAAG,kBAHmD;AAI7D,IAAA,SAAS,GAAG,KAJiD;AAK7D,IAAA,oBAAoB,GAAG,KALsC;AAM7D,IAAA,UAAU,GAAG,IANgD;AAO7D,IAAA,SAAS,GAAG,EAPiD;AAQ7D,IAAA,UAAU,GAAG,CARgD;AAS7D,IAAA,SAAS,GAAG,CATiD;AAU7D,IAAA,QAAQ,GAAG,MAAM,QAAQ,CAAC,IAVmC;AAW7D,IAAA,MAAM,GAAG,IAXoD;AAY7D,IAAA,QAAQ,GAAG,eAAe,CAAC,KAZkC;AAa7D,IAAA,QAAQ,GAAG,EAbkD;AAc7D,IAAA,IAAI,GAAG,aAdsD;AAe7D;AACA,IAAA,YAAY,GAAG,CAAC,KAAD,EAAQ,OAAR,EAAiB,QAAjB,EAA2B,MAA3B,EAAmC,KAAnC,EAA0C,OAA1C,EAAmD,QAAnD,CAhB8C;AAiB7D,IAAA,EAAE,GAAG,cAAc,kBAAkB,EAAE,EAjBsB;AAkB7D,IAAA,QAlB6D;AAmB7D,IAAA,iBAAiB,GAAG,GAnByC;AAoB7D,IAAA,SApB6D;AAqB7D,IAAA,QArB6D;AAsB7D,IAAA,aAtB6D;AAuB7D,IAAA;AAvB6D,MAuBnD,E;MACP,IAAI,GAAA,MAAA,CAAA,EAAA,EAxBsD,CAAA,SAAA,EAAA,UAAA,EAAA,SAAA,EAAA,WAAA,EAAA,sBAAA,EAAA,YAAA,EAAA,WAAA,EAAA,YAAA,EAAA,WAAA,EAAA,UAAA,EAAA,QAAA,EAAA,UAAA,EAAA,UAAA,EAAA,MAAA,EAAA,cAAA,EAAA,IAAA,EAAA,UAAA,EAAA,mBAAA,EAAA,WAAA,EAAA,UAAA,EAAA,eAAA,EAAA,YAAA,CAwBtD,C;;AAEP,MAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,IAAA,QAAQ,KAAK,SAAb,IACE,OAAO,CAAC,IAAR,CACE,yIADF,CADF;AAIA,IAAA,aAAa,KAAK,SAAlB,IACE,OAAO,CAAC,IAAR,CAAa,2EAAb,CADF;AAEA,IAAA,UAAU,KAAK,SAAf,IAA4B,OAAO,CAAC,IAAR,CAAa,wEAAb,CAA5B;AACD,GATgB,CAUjB;;;AACA,QAAM,WAAW,GAAG,IAApB;AACA,QAAM,mBAAmB,GAAG,OAAO,CAAC,QAAR,CAAiB,YAAjB,CAA5B;AACA,QAAM,cAAc,GAAG,OAAO,CAAC,QAAR,CAAiB,OAAjB,CAAvB;AACA,QAAM,cAAc,GAAG,OAAO,CAAC,QAAR,CAAiB,OAAjB,CAAvB;AACA,QAAM,eAAe,GAAG,OAAO,KAAK,QAApC;AACA,QAAM,CAAC,OAAD,EAAU,UAAV,IAAwB,KAAK,CAAC,QAAN,CAAe,KAAf,CAA9B;AACA,QAAM,CAAC,OAAD,EAAU,UAAV,IAAwB,KAAK,CAAC,QAAN,CAAe,CAAf,CAA9B;AACA,QAAM,kBAAkB,GAAG,KAAK,CAAC,MAAN,CAAa,IAAb,CAA3B;AACA,QAAM,YAAY,GAAG,KAAK,CAAC,MAAN,CAAa,IAAb,CAArB;AACA,QAAM,YAAY,GAAG,KAAK,CAAC,MAAN,CAAa,IAAb,CAArB;;AACA,QAAM,iBAAiB,GAAI,KAAD,IAAyB;AACjD,QAAI,CAAC,eAAL,EAAsB;AACpB,UAAI,KAAK,CAAC,OAAN,KAAkB,SAAS,CAAC,UAA5B,IAA0C,OAA9C,EAAuD;AACrD,QAAA,IAAI;AACL;AACF;AACF,GAND;;AAOA,QAAM,cAAc,GAAI,KAAD,IAAyB;AAC9C,QAAI,KAAK,CAAC,OAAN,KAAkB,SAAS,CAAC,KAAhC,EAAuC;AACrC,UAAI,CAAC,OAAL,EAAc;AACZ,QAAA,IAAI;AACL,OAFD,MAEO;AACL,QAAA,IAAI;AACL;AACF;AACF,GARD;;AASA,EAAA,KAAK,CAAC,SAAN,CAAgB,MAAK;AACnB,QAAI,SAAJ,EAAe;AACb,MAAA,IAAI;AACL,KAFD,MAEO;AACL,MAAA,IAAI;AACL;AACF,GAND,EAMG,CAAC,SAAD,CANH;;AAOA,QAAM,IAAI,GAAG,MAAK;AAChB,QAAI,kBAAkB,CAAC,OAAvB,EAAgC;AAC9B,MAAA,YAAY,CAAC,kBAAkB,CAAC,OAApB,CAAZ;AACD;;AACD,QAAI,YAAY,CAAC,OAAjB,EAA0B;AACxB,MAAA,YAAY,CAAC,YAAY,CAAC,OAAd,CAAZ;AACD;;AACD,IAAA,YAAY,CAAC,OAAb,GAAuB,UAAU,CAAC,MAAK;AACrC,MAAA,UAAU,CAAC,IAAD,CAAV;AACA,MAAA,UAAU,CAAC,CAAD,CAAV;AACD,KAHgC,EAG9B,UAH8B,CAAjC;AAID,GAXD;;AAYA,QAAM,IAAI,GAAG,MAAK;AAChB,QAAI,YAAY,CAAC,OAAjB,EAA0B;AACxB,MAAA,YAAY,CAAC,YAAY,CAAC,OAAd,CAAZ;AACD;;AACD,IAAA,YAAY,CAAC,OAAb,GAAuB,UAAU,CAAC,MAAK;AACrC,MAAA,UAAU,CAAC,CAAD,CAAV;AACA,MAAA,kBAAkB,CAAC,OAAnB,GAA6B,UAAU,CAAC,MAAM,UAAU,CAAC,KAAD,CAAjB,EAA0B,iBAA1B,CAAvC;AACD,KAHgC,EAG9B,SAH8B,CAAjC;AAID,GARD;;AASA,QAAM,iBAAiB,GAAG;AACxB,IAAA,GAAG,EAAE,MAAM,CAAC,SAAP,CAAiB,GADE;AAExB,IAAA,MAAM,EAAE,MAAM,CAAC,SAAP,CAAiB,MAFD;AAGxB,IAAA,IAAI,EAAE,MAAM,CAAC,SAAP,CAAiB,IAHC;AAIxB,IAAA,KAAK,EAAE,MAAM,CAAC,SAAP,CAAiB;AAJA,GAA1B;AAMA,QAAM,iBAAiB,GAAG,QAAQ,KAAK,eAAe,CAAC,KAAvD;AACA,QAAM,OAAO,GACX,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACE,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,OAAR,EAAiB,SAAjB,CADhB;AAEE,IAAA,IAAI,EAAC,SAFP;AAGE,IAAA,EAAE,EAAE,EAHN;AAIE,IAAA,KAAK,EAAE;AACL,MAAA,QAAQ,EAAE,iBAAiB,GAAG,QAAH,GAAc,IADpC;AAEL,MAAA,OAFK;AAGL,MAAA,UAAU,EAAE,oBAAoB,CAAC,iBAAD;AAH3B;AAJT,GAAA,EASM,IATN,CAAA,EAWE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,CAXF,EAYE,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe;AAAC,IAAA,aAAa,EAAE;AAAhB,GAAf,EAAsD,WAAtD,CAZF,CADF;;AAiBA,QAAM,eAAe,GAAG,CAAC,KAAD,EAAoB,cAApB,KAAmD;AACzE;AACA;AACA,QAAI,WAAW,KAAK,IAApB,EAA0B;AACxB;AACA,UAAI,OAAJ,EAAa;AACX,QAAA,IAAI;AACL,OAFD,MAEO,IAAI,KAAK,CAAC,MAAN,KAAiB,cAArB,EAAqC;AAC1C,QAAA,IAAI;AACL;AACF,KAPD,MAOO,IAAI,WAAW,KAAK,QAAhB,IAA4B,KAAK,CAAC,MAAN,KAAiB,cAAjD,EAAiE;AACtE;AACA,UAAI,OAAJ,EAAa;AACX,QAAA,IAAI;AACL,OAFD,MAEO;AACL,QAAA,IAAI;AACL;AACF,KAPM,MAOA,IAAI,WAAW,KAAK,KAAhB,IAAyB,CAAC,OAA1B,IAAqC,KAAK,CAAC,MAAN,KAAiB,cAA1D,EAA0E;AAC/E,MAAA,IAAI;AACL;AACF,GApBD;;AAsBA,QAAM,gBAAgB,GAAG,MAAK;AAC5B,QAAI,IAAI,KAAK,aAAT,IAA0B,QAA1B,IAAsC,QAAQ,CAAC,KAA/C,IAAwD,CAAC,QAAQ,CAAC,KAAT,CAAe,kBAAf,CAA7D,EAAiG;AAC/F,aAAO,KAAK,CAAC,YAAN,CAAmB,QAAnB,EAA6B;AAAE,4BAAoB;AAAtB,OAA7B,CAAP;AACD,KAFD,MAEO,IAAI,IAAI,KAAK,YAAT,IAAyB,QAAQ,CAAC,KAAlC,IAA2C,CAAC,QAAQ,CAAC,KAAT,CAAe,iBAAf,CAAhD,EAAmF;AACxF,aAAO,KAAK,CAAC,YAAN,CAAmB,QAAnB,EAA6B;AAAE,2BAAmB;AAArB,OAA7B,CAAP;AACD;;AACD,WAAO,QAAP;AACD,GAPD;;AASA,SACE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO;AACL,IAAA,OAAO,EAAE,IAAI,KAAK,MAAT,IAAmB,OAAnB,GAA6B,gBAAgB,EAA7C,GAAkD,QADtD;AAEL,IAAA,SAAS,EAAE,SAFN;AAGL,IAAA,MAAM,EAAE,OAHH;AAIL,IAAA,yBAAyB,EAAE,KAJtB;AAKL,IAAA,QAAQ,EAAE,QALL;AAML,IAAA,SAAS,EAAE,OANN;AAOL,IAAA,iBAAiB,EAAE,iBAPd;AAQL,IAAA,QAAQ,EAAE,QARL;AASL,IAAA,SAAS,EAAE,QATN;AAUL,IAAA,YAAY,EAAE,mBAAmB,IAAI,IAVhC;AAWL,IAAA,YAAY,EAAE,mBAAmB,IAAI,IAXhC;AAYL,IAAA,OAAO,EAAE,cAAc,IAAI,IAZtB;AAaL,IAAA,MAAM,EAAE,cAAc,IAAI,IAbrB;AAcL,IAAA,eAAe,EAAE,cAAc,IAAI,eAd9B;AAeL,IAAA,iBAAiB,EAAE,eAAe,GAAG,IAAH,GAAU,iBAfvC;AAgBL,IAAA,cAAc,EAAE,eAAe,GAAG,IAAH,GAAU,cAhBpC;AAiBL,IAAA,UAAU,EAAE,UAjBP;AAkBL,IAAA,MAAM,EAAE,MAlBH;AAmBL,IAAA,YAAY,EAAE;AAnBT,GAAP,CADF;AAuBD,CAxKM;AAyKP,OAAO,CAAC,WAAR,GAAsB,SAAtB","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\n/* eslint-disable no-console */\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Tooltip/tooltip';\nimport { css } from '@patternfly/react-styles';\nimport { TooltipContent } from './TooltipContent';\nimport { TooltipArrow } from './TooltipArrow';\nimport { KEY_CODES } from '../../helpers/constants';\nimport tooltipMaxWidth from \"@patternfly/react-tokens/dist/esm/c_tooltip_MaxWidth\";\nimport { Popper, getOpacityTransition } from '../../helpers/Popper/Popper';\nexport var TooltipPosition;\n(function (TooltipPosition) {\n    TooltipPosition[\"auto\"] = \"auto\";\n    TooltipPosition[\"top\"] = \"top\";\n    TooltipPosition[\"bottom\"] = \"bottom\";\n    TooltipPosition[\"left\"] = \"left\";\n    TooltipPosition[\"right\"] = \"right\";\n})(TooltipPosition || (TooltipPosition = {}));\n// id for associating trigger with the content aria-describedby or aria-labelledby\nlet pfTooltipIdCounter = 1;\nexport const Tooltip = (_a) => {\n    var { content: bodyContent, position = 'top', trigger = 'mouseenter focus', isVisible = false, isContentLeftAligned = false, enableFlip = true, className = '', entryDelay = 0, exitDelay = 0, appendTo = () => document.body, zIndex = 9999, maxWidth = tooltipMaxWidth.value, distance = 15, aria = 'describedby', \n    // For every initial starting position, there are 3 escape positions\n    flipBehavior = ['top', 'right', 'bottom', 'left', 'top', 'right', 'bottom'], id = `pf-tooltip-${pfTooltipIdCounter++}`, children, animationDuration = 300, reference, boundary, isAppLauncher, tippyProps } = _a, rest = __rest(_a, [\"content\", \"position\", \"trigger\", \"isVisible\", \"isContentLeftAligned\", \"enableFlip\", \"className\", \"entryDelay\", \"exitDelay\", \"appendTo\", \"zIndex\", \"maxWidth\", \"distance\", \"aria\", \"flipBehavior\", \"id\", \"children\", \"animationDuration\", \"reference\", \"boundary\", \"isAppLauncher\", \"tippyProps\"]);\n    if (process.env.NODE_ENV !== 'production') {\n        boundary !== undefined &&\n            console.warn('The Tooltip boundary prop has been deprecated. If you want to constrain the popper to a specific element use the appendTo prop instead.');\n        isAppLauncher !== undefined &&\n            console.warn('The Tooltip isAppLauncher prop has been deprecated and is no longer used.');\n        tippyProps !== undefined && console.warn('The Tooltip tippyProps prop has been deprecated and is no longer used.');\n    }\n    // could make this a prop in the future (true | false | 'toggle')\n    const hideOnClick = true;\n    const triggerOnMouseenter = trigger.includes('mouseenter');\n    const triggerOnFocus = trigger.includes('focus');\n    const triggerOnClick = trigger.includes('click');\n    const triggerManually = trigger === 'manual';\n    const [visible, setVisible] = React.useState(false);\n    const [opacity, setOpacity] = React.useState(0);\n    const transitionTimerRef = React.useRef(null);\n    const showTimerRef = React.useRef(null);\n    const hideTimerRef = React.useRef(null);\n    const onDocumentKeyDown = (event) => {\n        if (!triggerManually) {\n            if (event.keyCode === KEY_CODES.ESCAPE_KEY && visible) {\n                hide();\n            }\n        }\n    };\n    const onTriggerEnter = (event) => {\n        if (event.keyCode === KEY_CODES.ENTER) {\n            if (!visible) {\n                show();\n            }\n            else {\n                hide();\n            }\n        }\n    };\n    React.useEffect(() => {\n        if (isVisible) {\n            show();\n        }\n        else {\n            hide();\n        }\n    }, [isVisible]);\n    const show = () => {\n        if (transitionTimerRef.current) {\n            clearTimeout(transitionTimerRef.current);\n        }\n        if (hideTimerRef.current) {\n            clearTimeout(hideTimerRef.current);\n        }\n        showTimerRef.current = setTimeout(() => {\n            setVisible(true);\n            setOpacity(1);\n        }, entryDelay);\n    };\n    const hide = () => {\n        if (showTimerRef.current) {\n            clearTimeout(showTimerRef.current);\n        }\n        hideTimerRef.current = setTimeout(() => {\n            setOpacity(0);\n            transitionTimerRef.current = setTimeout(() => setVisible(false), animationDuration);\n        }, exitDelay);\n    };\n    const positionModifiers = {\n        top: styles.modifiers.top,\n        bottom: styles.modifiers.bottom,\n        left: styles.modifiers.left,\n        right: styles.modifiers.right\n    };\n    const hasCustomMaxWidth = maxWidth !== tooltipMaxWidth.value;\n    const content = (React.createElement(\"div\", Object.assign({ className: css(styles.tooltip, className), role: \"tooltip\", id: id, style: {\n            maxWidth: hasCustomMaxWidth ? maxWidth : null,\n            opacity,\n            transition: getOpacityTransition(animationDuration)\n        } }, rest),\n        React.createElement(TooltipArrow, null),\n        React.createElement(TooltipContent, { isLeftAligned: isContentLeftAligned }, bodyContent)));\n    const onDocumentClick = (event, triggerElement) => {\n        // event.currentTarget = document\n        // event.target could be triggerElement or something else\n        if (hideOnClick === true) {\n            // hide on inside the toggle as well as on outside clicks\n            if (visible) {\n                hide();\n            }\n            else if (event.target === triggerElement) {\n                show();\n            }\n        }\n        else if (hideOnClick === 'toggle' && event.target === triggerElement) {\n            // prevent outside clicks from hiding but allow it to still be toggled on toggle click\n            if (visible) {\n                hide();\n            }\n            else {\n                show();\n            }\n        }\n        else if (hideOnClick === false && !visible && event.target === triggerElement) {\n            show();\n        }\n    };\n    const addAriaToTrigger = () => {\n        if (aria === 'describedby' && children && children.props && !children.props['aria-describedby']) {\n            return React.cloneElement(children, { 'aria-describedby': id });\n        }\n        else if (aria === 'labelledby' && children.props && !children.props['aria-labelledby']) {\n            return React.cloneElement(children, { 'aria-labelledby': id });\n        }\n        return children;\n    };\n    return (React.createElement(Popper, { trigger: aria !== 'none' && visible ? addAriaToTrigger() : children, reference: reference, popper: content, popperMatchesTriggerWidth: false, appendTo: appendTo, isVisible: visible, positionModifiers: positionModifiers, distance: distance, placement: position, onMouseEnter: triggerOnMouseenter && show, onMouseLeave: triggerOnMouseenter && hide, onFocus: triggerOnFocus && show, onBlur: triggerOnFocus && hide, onDocumentClick: triggerOnClick && onDocumentClick, onDocumentKeyDown: triggerManually ? null : onDocumentKeyDown, onTriggerEnter: triggerManually ? null : onTriggerEnter, enableFlip: enableFlip, zIndex: zIndex, flipBehavior: flipBehavior }));\n};\nTooltip.displayName = 'Tooltip';\n//# sourceMappingURL=Tooltip.js.map"]},"metadata":{},"sourceType":"module"}