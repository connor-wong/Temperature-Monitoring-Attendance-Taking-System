{"ast":null,"code":"import { top, bottom, left, right } from '../enums';\nimport detectOverflow from '../utils/detectOverflow';\n/**\n * @param overflow\n * @param rect\n * @param preventedOffsets\n */\n\nfunction getSideOffsets(overflow, rect, preventedOffsets = {\n  x: 0,\n  y: 0\n}) {\n  return {\n    top: overflow.top - rect.height - preventedOffsets.y,\n    right: overflow.right - rect.width + preventedOffsets.x,\n    bottom: overflow.bottom - rect.height + preventedOffsets.y,\n    left: overflow.left - rect.width - preventedOffsets.x\n  };\n}\n/**\n * @param overflow\n */\n\n\nfunction isAnySideFullyClipped(overflow) {\n  return [top, right, bottom, left].some(side => overflow[side] >= 0);\n}\n/**\n *\n */\n\n\nfunction hide({\n  state,\n  name\n}) {\n  const referenceRect = state.rects.reference;\n  const popperRect = state.rects.popper;\n  const preventedOffsets = state.modifiersData.preventOverflow;\n  const referenceOverflow = detectOverflow(state, {\n    elementContext: 'reference'\n  });\n  const popperAltOverflow = detectOverflow(state, {\n    altBoundary: true\n  });\n  const referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);\n  const popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);\n  const isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);\n  const hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);\n  state.modifiersData[name] = {\n    referenceClippingOffsets,\n    popperEscapeOffsets,\n    isReferenceHidden,\n    hasPopperEscaped\n  };\n  state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), {\n    'data-popper-reference-hidden': isReferenceHidden,\n    'data-popper-escaped': hasPopperEscaped\n  });\n}\n\nexport default {\n  name: 'hide',\n  enabled: true,\n  phase: 'main',\n  requiresIfExists: ['preventOverflow'],\n  fn: hide\n};","map":{"version":3,"sources":["../../../../../../../src/helpers/Popper/thirdparty/popper-core/modifiers/hide.ts"],"names":[],"mappings":"AAEA,SAAS,GAAT,EAAc,MAAd,EAAsB,IAAtB,EAA4B,KAA5B,QAAyC,UAAzC;AACA,OAAO,cAAP,MAA2B,yBAA3B;AAEA;;;;AAIG;;AACH,SAAS,cAAT,CAAwB,QAAxB,EAA8C,IAA9C,EAA0D,gBAAA,GAA4B;AAAE,EAAA,CAAC,EAAE,CAAL;AAAQ,EAAA,CAAC,EAAE;AAAX,CAAtF,EAAoG;AAClG,SAAO;AACL,IAAA,GAAG,EAAE,QAAQ,CAAC,GAAT,GAAe,IAAI,CAAC,MAApB,GAA6B,gBAAgB,CAAC,CAD9C;AAEL,IAAA,KAAK,EAAE,QAAQ,CAAC,KAAT,GAAiB,IAAI,CAAC,KAAtB,GAA8B,gBAAgB,CAAC,CAFjD;AAGL,IAAA,MAAM,EAAE,QAAQ,CAAC,MAAT,GAAkB,IAAI,CAAC,MAAvB,GAAgC,gBAAgB,CAAC,CAHpD;AAIL,IAAA,IAAI,EAAE,QAAQ,CAAC,IAAT,GAAgB,IAAI,CAAC,KAArB,GAA6B,gBAAgB,CAAC;AAJ/C,GAAP;AAMD;AAED;;AAEG;;;AACH,SAAS,qBAAT,CAA+B,QAA/B,EAAmD;AACjD,SAAO,CAAC,GAAD,EAAM,KAAN,EAAa,MAAb,EAAqB,IAArB,EAA2B,IAA3B,CAAgC,IAAI,IAAI,QAAQ,CAAC,IAAD,CAAR,IAAkB,CAA1D,CAAP;AACD;AAED;;AAEG;;;AACH,SAAS,IAAT,CAAc;AAAE,EAAA,KAAF;AAAS,EAAA;AAAT,CAAd,EAAoD;AAClD,QAAM,aAAa,GAAG,KAAK,CAAC,KAAN,CAAY,SAAlC;AACA,QAAM,UAAU,GAAG,KAAK,CAAC,KAAN,CAAY,MAA/B;AACA,QAAM,gBAAgB,GAAG,KAAK,CAAC,aAAN,CAAoB,eAA7C;AAEA,QAAM,iBAAiB,GAAG,cAAc,CAAC,KAAD,EAAQ;AAC9C,IAAA,cAAc,EAAE;AAD8B,GAAR,CAAxC;AAGA,QAAM,iBAAiB,GAAG,cAAc,CAAC,KAAD,EAAQ;AAC9C,IAAA,WAAW,EAAE;AADiC,GAAR,CAAxC;AAIA,QAAM,wBAAwB,GAAG,cAAc,CAAC,iBAAD,EAAoB,aAApB,CAA/C;AACA,QAAM,mBAAmB,GAAG,cAAc,CAAC,iBAAD,EAAoB,UAApB,EAAgC,gBAAhC,CAA1C;AAEA,QAAM,iBAAiB,GAAG,qBAAqB,CAAC,wBAAD,CAA/C;AACA,QAAM,gBAAgB,GAAG,qBAAqB,CAAC,mBAAD,CAA9C;AAEA,EAAA,KAAK,CAAC,aAAN,CAAoB,IAApB,IAA4B;AAC1B,IAAA,wBAD0B;AAE1B,IAAA,mBAF0B;AAG1B,IAAA,iBAH0B;AAI1B,IAAA;AAJ0B,GAA5B;AAOA,EAAA,KAAK,CAAC,UAAN,CAAiB,MAAjB,GAAuB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAClB,KAAK,CAAC,UAAN,CAAiB,MADC,CAAA,EACK;AAC1B,oCAAgC,iBADN;AAE1B,2BAAuB;AAFG,GADL,CAAvB;AAKD;;AAID,eAAe;AACb,EAAA,IAAI,EAAE,MADO;AAEb,EAAA,OAAO,EAAE,IAFI;AAGb,EAAA,KAAK,EAAE,MAHM;AAIb,EAAA,gBAAgB,EAAE,CAAC,iBAAD,CAJL;AAKb,EAAA,EAAE,EAAE;AALS,CAAf","sourceRoot":"","sourcesContent":["import { top, bottom, left, right } from '../enums';\nimport detectOverflow from '../utils/detectOverflow';\n/**\n * @param overflow\n * @param rect\n * @param preventedOffsets\n */\nfunction getSideOffsets(overflow, rect, preventedOffsets = { x: 0, y: 0 }) {\n    return {\n        top: overflow.top - rect.height - preventedOffsets.y,\n        right: overflow.right - rect.width + preventedOffsets.x,\n        bottom: overflow.bottom - rect.height + preventedOffsets.y,\n        left: overflow.left - rect.width - preventedOffsets.x\n    };\n}\n/**\n * @param overflow\n */\nfunction isAnySideFullyClipped(overflow) {\n    return [top, right, bottom, left].some(side => overflow[side] >= 0);\n}\n/**\n *\n */\nfunction hide({ state, name }) {\n    const referenceRect = state.rects.reference;\n    const popperRect = state.rects.popper;\n    const preventedOffsets = state.modifiersData.preventOverflow;\n    const referenceOverflow = detectOverflow(state, {\n        elementContext: 'reference'\n    });\n    const popperAltOverflow = detectOverflow(state, {\n        altBoundary: true\n    });\n    const referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);\n    const popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);\n    const isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);\n    const hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);\n    state.modifiersData[name] = {\n        referenceClippingOffsets,\n        popperEscapeOffsets,\n        isReferenceHidden,\n        hasPopperEscaped\n    };\n    state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), { 'data-popper-reference-hidden': isReferenceHidden, 'data-popper-escaped': hasPopperEscaped });\n}\nexport default {\n    name: 'hide',\n    enabled: true,\n    phase: 'main',\n    requiresIfExists: ['preventOverflow'],\n    fn: hide\n};\n//# sourceMappingURL=hide.js.map"]},"metadata":{},"sourceType":"module"}