{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport AngleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-right-icon\";\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport maxLines from \"@patternfly/react-tokens/dist/esm/c_notification_drawer__group_toggle_title_max_lines\";\nimport { Badge } from '../Badge';\nimport { Tooltip } from '../Tooltip';\nexport const NotificationDrawerGroup = _a => {\n  var {\n    children,\n    className = '',\n    count,\n    isExpanded,\n    isRead = false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onExpand = (event, expanded) => undefined,\n    title,\n    truncateTitle = 0,\n    tooltipPosition\n  } = _a,\n      props = __rest(_a, [\"children\", \"className\", \"count\", \"isExpanded\", \"isRead\", \"onExpand\", \"title\", \"truncateTitle\", \"tooltipPosition\"]);\n\n  const titleRef = React.useRef(null);\n  const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n  React.useEffect(() => {\n    // Title will always truncate on overflow regardless of truncateTitle prop\n    const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;\n\n    if (isTooltipVisible !== showTooltip) {\n      setIsTooltipVisible(showTooltip);\n    }\n\n    if (!titleRef.current || !truncateTitle) {\n      return;\n    }\n\n    titleRef.current.style.setProperty(maxLines.name, truncateTitle.toString());\n  }, [titleRef, truncateTitle, isTooltipVisible]);\n  const Title = React.createElement(\"div\", Object.assign({}, isTooltipVisible && {\n    tabIndex: 0\n  }, {\n    ref: titleRef,\n    className: css(styles.notificationDrawerGroupToggleTitle)\n  }), title);\n  return React.createElement(\"section\", Object.assign({}, props, {\n    className: css(styles.notificationDrawerGroup, isExpanded && styles.modifiers.expanded, className)\n  }), React.createElement(\"h1\", null, React.createElement(\"button\", {\n    className: css(styles.notificationDrawerGroupToggle),\n    \"aria-expanded\": isExpanded,\n    onClick: e => onExpand(e, !isExpanded),\n    onKeyDown: e => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        onExpand(e, !isExpanded);\n      }\n    }\n  }, isTooltipVisible ? React.createElement(Tooltip, {\n    content: title,\n    position: tooltipPosition\n  }, Title) : Title, React.createElement(\"div\", {\n    className: css(styles.notificationDrawerGroupToggleCount)\n  }, React.createElement(Badge, {\n    isRead: isRead\n  }, count)), React.createElement(\"span\", {\n    className: \"pf-c-notification-drawer__group-toggle-icon\"\n  }, React.createElement(AngleRightIcon, null)))), children);\n};\nNotificationDrawerGroup.displayName = 'NotificationDrawerGroup';","map":{"version":3,"sources":["../../../../src/components/NotificationDrawer/NotificationDrawerGroup.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport AngleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-right-icon\";\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport maxLines from \"@patternfly/react-tokens/dist/esm/c_notification_drawer__group_toggle_title_max_lines\";\nimport { Badge } from '../Badge';\nimport { Tooltip } from '../Tooltip';\nexport const NotificationDrawerGroup = (_a) => {\n    var { children, className = '', count, isExpanded, isRead = false, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onExpand = (event, expanded) => undefined, title, truncateTitle = 0, tooltipPosition } = _a, props = __rest(_a, [\"children\", \"className\", \"count\", \"isExpanded\", \"isRead\", \"onExpand\", \"title\", \"truncateTitle\", \"tooltipPosition\"]);\n    const titleRef = React.useRef(null);\n    const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n    React.useEffect(() => {\n        // Title will always truncate on overflow regardless of truncateTitle prop\n        const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;\n        if (isTooltipVisible !== showTooltip) {\n            setIsTooltipVisible(showTooltip);\n        }\n        if (!titleRef.current || !truncateTitle) {\n            return;\n        }\n        titleRef.current.style.setProperty(maxLines.name, truncateTitle.toString());\n    }, [titleRef, truncateTitle, isTooltipVisible]);\n    const Title = (React.createElement(\"div\", Object.assign({}, (isTooltipVisible && { tabIndex: 0 }), { ref: titleRef, className: css(styles.notificationDrawerGroupToggleTitle) }), title));\n    return (React.createElement(\"section\", Object.assign({}, props, { className: css(styles.notificationDrawerGroup, isExpanded && styles.modifiers.expanded, className) }),\n        React.createElement(\"h1\", null,\n            React.createElement(\"button\", { className: css(styles.notificationDrawerGroupToggle), \"aria-expanded\": isExpanded, onClick: e => onExpand(e, !isExpanded), onKeyDown: e => {\n                    if (e.key === 'Enter' || e.key === ' ') {\n                        e.preventDefault();\n                        onExpand(e, !isExpanded);\n                    }\n                } },\n                isTooltipVisible ? (React.createElement(Tooltip, { content: title, position: tooltipPosition }, Title)) : (Title),\n                React.createElement(\"div\", { className: css(styles.notificationDrawerGroupToggleCount) },\n                    React.createElement(Badge, { isRead: isRead }, count)),\n                React.createElement(\"span\", { className: \"pf-c-notification-drawer__group-toggle-icon\" },\n                    React.createElement(AngleRightIcon, null)))),\n        children));\n};\nNotificationDrawerGroup.displayName = 'NotificationDrawerGroup';\n//# sourceMappingURL=NotificationDrawerGroup.js.map"]},"metadata":{},"sourceType":"module"}