{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ChipGroup/chip-group';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Chip } from './Chip';\nimport { Tooltip } from '../Tooltip';\nimport TimesCircleIcon from \"@patternfly/react-icons/dist/esm/icons/times-circle-icon\";\nimport { fillTemplate } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { getOUIAProps } from '../../helpers';\nexport class ChipGroup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.headingRef = React.createRef();\n\n    this.toggleCollapse = () => {\n      this.setState(prevState => ({\n        isOpen: !prevState.isOpen,\n        isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n      }));\n    };\n\n    this.state = {\n      isOpen: this.props.defaultIsOpen,\n      isTooltipVisible: false\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n    });\n  }\n\n  renderLabel(id) {\n    const {\n      categoryName,\n      tooltipPosition\n    } = this.props;\n    const {\n      isTooltipVisible\n    } = this.state;\n    return isTooltipVisible ? React.createElement(Tooltip, {\n      position: tooltipPosition,\n      content: categoryName\n    }, React.createElement(\"span\", {\n      tabIndex: 0,\n      ref: this.headingRef,\n      className: css(styles.chipGroupLabel),\n      id: id,\n      \"aria-label\": categoryName\n    }, React.createElement(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, categoryName))) : React.createElement(\"span\", {\n      ref: this.headingRef,\n      className: css(styles.chipGroupLabel),\n      \"aria-hidden\": \"true\",\n      id: id\n    }, categoryName);\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      categoryName,\n      children,\n      className,\n      isClosable,\n      closeBtnAriaLabel,\n      'aria-label': ariaLabel,\n      onClick,\n      onOverflowChipClick,\n      numChips,\n      expandedText,\n      collapsedText,\n      ouiaId,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      defaultIsOpen,\n      tooltipPosition\n    } = _a,\n\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    rest = __rest(_a, [\"categoryName\", \"children\", \"className\", \"isClosable\", \"closeBtnAriaLabel\", 'aria-label', \"onClick\", \"onOverflowChipClick\", \"numChips\", \"expandedText\", \"collapsedText\", \"ouiaId\", \"defaultIsOpen\", \"tooltipPosition\"]);\n\n    const {\n      isOpen\n    } = this.state;\n    const numChildren = React.Children.count(children);\n    const collapsedTextResult = fillTemplate(collapsedText, {\n      remaining: React.Children.count(children) - numChips\n    });\n\n    const renderChipGroup = id => {\n      const chipArray = !isOpen ? React.Children.toArray(children).slice(0, numChips) : React.Children.toArray(children);\n      return React.createElement(\"div\", Object.assign({\n        className: css(styles.chipGroup, className, categoryName && styles.modifiers.category)\n      }, getOUIAProps(ChipGroup.displayName, ouiaId)), React.createElement(\"div\", {\n        className: css(styles.chipGroupMain)\n      }, categoryName && this.renderLabel(id), React.createElement(\"ul\", Object.assign({\n        className: css(styles.chipGroupList)\n      }, categoryName && {\n        'aria-labelledby': id\n      }, !categoryName && {\n        'aria-label': ariaLabel\n      }, {\n        role: \"list\"\n      }, rest), chipArray.map((child, i) => React.createElement(\"li\", {\n        className: css(styles.chipGroupListItem),\n        key: i\n      }, child)), numChildren > numChips && React.createElement(\"li\", {\n        className: css(styles.chipGroupListItem)\n      }, React.createElement(Chip, {\n        isOverflowChip: true,\n        onClick: event => {\n          this.toggleCollapse();\n          onOverflowChipClick(event);\n        },\n        component: \"button\"\n      }, isOpen ? expandedText : collapsedTextResult)))), isClosable && React.createElement(\"div\", {\n        className: css(styles.chipGroupClose)\n      }, React.createElement(Button, {\n        variant: \"plain\",\n        \"aria-label\": closeBtnAriaLabel,\n        onClick: onClick,\n        id: `remove_group_${id}`,\n        \"aria-labelledby\": `remove_group_${id} ${id}`,\n        ouiaId: ouiaId || closeBtnAriaLabel\n      }, React.createElement(TimesCircleIcon, {\n        \"aria-hidden\": \"true\"\n      }))));\n    };\n\n    return numChildren === 0 ? null : React.createElement(GenerateId, null, randomId => renderChipGroup(this.props.id || randomId));\n  }\n\n}\nChipGroup.displayName = 'ChipGroup';\nChipGroup.defaultProps = {\n  expandedText: 'Show Less',\n  collapsedText: '${remaining} more',\n  categoryName: '',\n  defaultIsOpen: false,\n  numChips: 3,\n  isClosable: false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onClick: _e => undefined,\n  onOverflowChipClick: _e => undefined,\n  closeBtnAriaLabel: 'Close chip group',\n  tooltipPosition: 'top',\n  'aria-label': 'Chip group category'\n};","map":{"version":3,"sources":["../../../../src/components/ChipGroup/ChipGroup.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ChipGroup/chip-group';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Chip } from './Chip';\nimport { Tooltip } from '../Tooltip';\nimport TimesCircleIcon from \"@patternfly/react-icons/dist/esm/icons/times-circle-icon\";\nimport { fillTemplate } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { getOUIAProps } from '../../helpers';\nexport class ChipGroup extends React.Component {\n    constructor(props) {\n        super(props);\n        this.headingRef = React.createRef();\n        this.toggleCollapse = () => {\n            this.setState(prevState => ({\n                isOpen: !prevState.isOpen,\n                isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n            }));\n        };\n        this.state = {\n            isOpen: this.props.defaultIsOpen,\n            isTooltipVisible: false\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n        });\n    }\n    renderLabel(id) {\n        const { categoryName, tooltipPosition } = this.props;\n        const { isTooltipVisible } = this.state;\n        return isTooltipVisible ? (React.createElement(Tooltip, { position: tooltipPosition, content: categoryName },\n            React.createElement(\"span\", { tabIndex: 0, ref: this.headingRef, className: css(styles.chipGroupLabel), id: id, \"aria-label\": categoryName },\n                React.createElement(\"span\", { \"aria-hidden\": \"true\" }, categoryName)))) : (React.createElement(\"span\", { ref: this.headingRef, className: css(styles.chipGroupLabel), \"aria-hidden\": \"true\", id: id }, categoryName));\n    }\n    render() {\n        const _a = this.props, { categoryName, children, className, isClosable, closeBtnAriaLabel, 'aria-label': ariaLabel, onClick, onOverflowChipClick, numChips, expandedText, collapsedText, ouiaId, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        defaultIsOpen, tooltipPosition } = _a, \n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        rest = __rest(_a, [\"categoryName\", \"children\", \"className\", \"isClosable\", \"closeBtnAriaLabel\", 'aria-label', \"onClick\", \"onOverflowChipClick\", \"numChips\", \"expandedText\", \"collapsedText\", \"ouiaId\", \"defaultIsOpen\", \"tooltipPosition\"]);\n        const { isOpen } = this.state;\n        const numChildren = React.Children.count(children);\n        const collapsedTextResult = fillTemplate(collapsedText, {\n            remaining: React.Children.count(children) - numChips\n        });\n        const renderChipGroup = (id) => {\n            const chipArray = !isOpen\n                ? React.Children.toArray(children).slice(0, numChips)\n                : React.Children.toArray(children);\n            return (React.createElement(\"div\", Object.assign({ className: css(styles.chipGroup, className, categoryName && styles.modifiers.category) }, getOUIAProps(ChipGroup.displayName, ouiaId)),\n                React.createElement(\"div\", { className: css(styles.chipGroupMain) },\n                    categoryName && this.renderLabel(id),\n                    React.createElement(\"ul\", Object.assign({ className: css(styles.chipGroupList) }, (categoryName && { 'aria-labelledby': id }), (!categoryName && { 'aria-label': ariaLabel }), { role: \"list\" }, rest),\n                        chipArray.map((child, i) => (React.createElement(\"li\", { className: css(styles.chipGroupListItem), key: i }, child))),\n                        numChildren > numChips && (React.createElement(\"li\", { className: css(styles.chipGroupListItem) },\n                            React.createElement(Chip, { isOverflowChip: true, onClick: event => {\n                                    this.toggleCollapse();\n                                    onOverflowChipClick(event);\n                                }, component: \"button\" }, isOpen ? expandedText : collapsedTextResult))))),\n                isClosable && (React.createElement(\"div\", { className: css(styles.chipGroupClose) },\n                    React.createElement(Button, { variant: \"plain\", \"aria-label\": closeBtnAriaLabel, onClick: onClick, id: `remove_group_${id}`, \"aria-labelledby\": `remove_group_${id} ${id}`, ouiaId: ouiaId || closeBtnAriaLabel },\n                        React.createElement(TimesCircleIcon, { \"aria-hidden\": \"true\" }))))));\n        };\n        return numChildren === 0 ? null : React.createElement(GenerateId, null, randomId => renderChipGroup(this.props.id || randomId));\n    }\n}\nChipGroup.displayName = 'ChipGroup';\nChipGroup.defaultProps = {\n    expandedText: 'Show Less',\n    collapsedText: '${remaining} more',\n    categoryName: '',\n    defaultIsOpen: false,\n    numChips: 3,\n    isClosable: false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick: (_e) => undefined,\n    onOverflowChipClick: (_e) => undefined,\n    closeBtnAriaLabel: 'Close chip group',\n    tooltipPosition: 'top',\n    'aria-label': 'Chip group category'\n};\n//# sourceMappingURL=ChipGroup.js.map"]},"metadata":{},"sourceType":"module"}