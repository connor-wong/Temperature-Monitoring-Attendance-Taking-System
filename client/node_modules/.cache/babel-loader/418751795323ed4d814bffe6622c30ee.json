{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DatePicker/date-picker';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { TextInput } from '../TextInput/TextInput';\nimport { Popover } from '../Popover/Popover';\nimport { InputGroup } from '../InputGroup/InputGroup';\nimport OutlinedCalendarAltIcon from \"@patternfly/react-icons/dist/esm/icons/outlined-calendar-alt-icon\";\nimport { CalendarMonth, isValidDate } from '../CalendarMonth';\nexport const yyyyMMddFormat = date => `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\nexport const DatePicker = _a => {\n  var {\n    className,\n    locale = undefined,\n    dateFormat = yyyyMMddFormat,\n    dateParse = val => new Date(`${val}T00:00:00`),\n    isDisabled = false,\n    placeholder = 'yyyy-MM-dd',\n    value: valueProp = '',\n    'aria-label': ariaLabel = 'Date picker',\n    buttonAriaLabel = 'Toggle date picker',\n    onChange = () => undefined,\n    invalidFormatText = 'Invalid date',\n    helperText,\n    appendTo,\n    popoverProps,\n    monthFormat,\n    weekdayFormat,\n    longWeekdayFormat,\n    dayFormat,\n    weekStart,\n    validators = [],\n    rangeStart,\n    style = {}\n  } = _a,\n      props = __rest(_a, [\"className\", \"locale\", \"dateFormat\", \"dateParse\", \"isDisabled\", \"placeholder\", \"value\", 'aria-label', \"buttonAriaLabel\", \"onChange\", \"invalidFormatText\", \"helperText\", \"appendTo\", \"popoverProps\", \"monthFormat\", \"weekdayFormat\", \"longWeekdayFormat\", \"dayFormat\", \"weekStart\", \"validators\", \"rangeStart\", \"style\"]);\n\n  const [value, setValue] = React.useState(valueProp);\n  const [valueDate, setValueDate] = React.useState(dateParse(value));\n  const [errorText, setErrorText] = React.useState('');\n  const [popoverOpen, setPopoverOpen] = React.useState(false);\n  const [selectOpen, setSelectOpen] = React.useState(false);\n  const [pristine, setPristine] = React.useState(true);\n  const widthChars = React.useMemo(() => Math.max(dateFormat(new Date()).length, placeholder.length), [dateFormat]);\n  style['--pf-c-date-picker__input--c-form-control--width-chars'] = widthChars;\n  const buttonRef = React.useRef();\n  React.useEffect(() => {\n    setValue(valueProp);\n    setValueDate(dateParse(valueProp));\n  }, [valueProp]);\n\n  const setError = date => setErrorText(validators.map(validator => validator(date)).join('\\n') || '');\n\n  const onTextInput = value => {\n    setPristine(false);\n    setValue(value);\n    const newValueDate = dateParse(value);\n    setValueDate(newValueDate);\n\n    if (isValidDate(newValueDate)) {\n      onChange(value, new Date(newValueDate));\n    } else {\n      onChange(value);\n    }\n  };\n\n  const onInputBlur = () => {\n    if (pristine) {\n      return;\n    }\n\n    const newValueDate = dateParse(value);\n\n    if (isValidDate(newValueDate)) {\n      setError(newValueDate);\n    } else {\n      setErrorText(invalidFormatText);\n    }\n  };\n\n  const onDateClick = newValueDate => {\n    const newValue = dateFormat(newValueDate);\n    setValue(newValue);\n    setValueDate(newValueDate);\n    setError(newValueDate);\n    setPopoverOpen(false);\n    onChange(newValue, new Date(newValueDate));\n  };\n\n  const onKeyPress = ev => {\n    if (ev.key === 'Enter' && value) {\n      if (isValidDate(valueDate)) {\n        setError(valueDate);\n      } else {\n        setErrorText(invalidFormatText);\n      }\n    }\n  };\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.datePicker, className),\n    style: style\n  }, props), React.createElement(Popover, Object.assign({\n    position: \"bottom\",\n    bodyContent: React.createElement(CalendarMonth, {\n      date: valueDate,\n      onChange: onDateClick,\n      locale: locale,\n      // Use truthy values of strings\n      validators: validators.map(validator => date => !validator(date)),\n      onSelectToggle: open => setSelectOpen(open),\n      monthFormat: monthFormat,\n      weekdayFormat: weekdayFormat,\n      longWeekdayFormat: longWeekdayFormat,\n      dayFormat: dayFormat,\n      weekStart: weekStart,\n      rangeStart: rangeStart\n    }),\n    showClose: false,\n    isVisible: popoverOpen,\n    shouldClose: (_1, _2, event) => {\n      event = event; // Let the select menu close\n\n      if (event.keyCode && event.keyCode === 27 && selectOpen) {\n        return false;\n      } // Let our button handle toggling\n\n\n      if (buttonRef.current && buttonRef.current.contains(event.target)) {\n        return false;\n      }\n\n      setPopoverOpen(false);\n      return true;\n    },\n    withFocusTrap: true,\n    hasNoPadding: true,\n    hasAutoWidth: true,\n    appendTo: appendTo\n  }, popoverProps), React.createElement(\"div\", {\n    className: styles.datePickerInput\n  }, React.createElement(InputGroup, null, React.createElement(TextInput, {\n    isDisabled: isDisabled,\n    \"aria-label\": ariaLabel,\n    placeholder: placeholder,\n    validated: errorText ? 'error' : 'default',\n    value: value,\n    onChange: onTextInput,\n    onBlur: onInputBlur,\n    onKeyPress: onKeyPress\n  }), React.createElement(\"button\", {\n    ref: buttonRef,\n    className: css(buttonStyles.button, buttonStyles.modifiers.control),\n    \"aria-label\": buttonAriaLabel,\n    type: \"button\",\n    onClick: () => setPopoverOpen(!popoverOpen),\n    disabled: isDisabled\n  }, React.createElement(OutlinedCalendarAltIcon, null))))), helperText && React.createElement(\"div\", {\n    className: styles.datePickerHelperText\n  }, helperText), errorText.trim() && React.createElement(\"div\", {\n    className: css(styles.datePickerHelperText, styles.modifiers.error)\n  }, errorText));\n};\nDatePicker.displayName = 'DatePicker';","map":{"version":3,"sources":["../../../../src/components/DatePicker/DatePicker.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DatePicker/date-picker';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { TextInput } from '../TextInput/TextInput';\nimport { Popover } from '../Popover/Popover';\nimport { InputGroup } from '../InputGroup/InputGroup';\nimport OutlinedCalendarAltIcon from \"@patternfly/react-icons/dist/esm/icons/outlined-calendar-alt-icon\";\nimport { CalendarMonth, isValidDate } from '../CalendarMonth';\nexport const yyyyMMddFormat = (date) => `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date\n    .getDate()\n    .toString()\n    .padStart(2, '0')}`;\nexport const DatePicker = (_a) => {\n    var { className, locale = undefined, dateFormat = yyyyMMddFormat, dateParse = (val) => new Date(`${val}T00:00:00`), isDisabled = false, placeholder = 'yyyy-MM-dd', value: valueProp = '', 'aria-label': ariaLabel = 'Date picker', buttonAriaLabel = 'Toggle date picker', onChange = () => undefined, invalidFormatText = 'Invalid date', helperText, appendTo, popoverProps, monthFormat, weekdayFormat, longWeekdayFormat, dayFormat, weekStart, validators = [], rangeStart, style = {} } = _a, props = __rest(_a, [\"className\", \"locale\", \"dateFormat\", \"dateParse\", \"isDisabled\", \"placeholder\", \"value\", 'aria-label', \"buttonAriaLabel\", \"onChange\", \"invalidFormatText\", \"helperText\", \"appendTo\", \"popoverProps\", \"monthFormat\", \"weekdayFormat\", \"longWeekdayFormat\", \"dayFormat\", \"weekStart\", \"validators\", \"rangeStart\", \"style\"]);\n    const [value, setValue] = React.useState(valueProp);\n    const [valueDate, setValueDate] = React.useState(dateParse(value));\n    const [errorText, setErrorText] = React.useState('');\n    const [popoverOpen, setPopoverOpen] = React.useState(false);\n    const [selectOpen, setSelectOpen] = React.useState(false);\n    const [pristine, setPristine] = React.useState(true);\n    const widthChars = React.useMemo(() => Math.max(dateFormat(new Date()).length, placeholder.length), [dateFormat]);\n    style['--pf-c-date-picker__input--c-form-control--width-chars'] = widthChars;\n    const buttonRef = React.useRef();\n    React.useEffect(() => {\n        setValue(valueProp);\n        setValueDate(dateParse(valueProp));\n    }, [valueProp]);\n    const setError = (date) => setErrorText(validators.map(validator => validator(date)).join('\\n') || '');\n    const onTextInput = (value) => {\n        setPristine(false);\n        setValue(value);\n        const newValueDate = dateParse(value);\n        setValueDate(newValueDate);\n        if (isValidDate(newValueDate)) {\n            onChange(value, new Date(newValueDate));\n        }\n        else {\n            onChange(value);\n        }\n    };\n    const onInputBlur = () => {\n        if (pristine) {\n            return;\n        }\n        const newValueDate = dateParse(value);\n        if (isValidDate(newValueDate)) {\n            setError(newValueDate);\n        }\n        else {\n            setErrorText(invalidFormatText);\n        }\n    };\n    const onDateClick = (newValueDate) => {\n        const newValue = dateFormat(newValueDate);\n        setValue(newValue);\n        setValueDate(newValueDate);\n        setError(newValueDate);\n        setPopoverOpen(false);\n        onChange(newValue, new Date(newValueDate));\n    };\n    const onKeyPress = (ev) => {\n        if (ev.key === 'Enter' && value) {\n            if (isValidDate(valueDate)) {\n                setError(valueDate);\n            }\n            else {\n                setErrorText(invalidFormatText);\n            }\n        }\n    };\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.datePicker, className), style: style }, props),\n        React.createElement(Popover, Object.assign({ position: \"bottom\", bodyContent: React.createElement(CalendarMonth, { date: valueDate, onChange: onDateClick, locale: locale, \n                // Use truthy values of strings\n                validators: validators.map(validator => (date) => !validator(date)), onSelectToggle: open => setSelectOpen(open), monthFormat: monthFormat, weekdayFormat: weekdayFormat, longWeekdayFormat: longWeekdayFormat, dayFormat: dayFormat, weekStart: weekStart, rangeStart: rangeStart }), showClose: false, isVisible: popoverOpen, shouldClose: (_1, _2, event) => {\n                event = event;\n                // Let the select menu close\n                if (event.keyCode && event.keyCode === 27 && selectOpen) {\n                    return false;\n                }\n                // Let our button handle toggling\n                if (buttonRef.current && buttonRef.current.contains(event.target)) {\n                    return false;\n                }\n                setPopoverOpen(false);\n                return true;\n            }, withFocusTrap: true, hasNoPadding: true, hasAutoWidth: true, appendTo: appendTo }, popoverProps),\n            React.createElement(\"div\", { className: styles.datePickerInput },\n                React.createElement(InputGroup, null,\n                    React.createElement(TextInput, { isDisabled: isDisabled, \"aria-label\": ariaLabel, placeholder: placeholder, validated: errorText ? 'error' : 'default', value: value, onChange: onTextInput, onBlur: onInputBlur, onKeyPress: onKeyPress }),\n                    React.createElement(\"button\", { ref: buttonRef, className: css(buttonStyles.button, buttonStyles.modifiers.control), \"aria-label\": buttonAriaLabel, type: \"button\", onClick: () => setPopoverOpen(!popoverOpen), disabled: isDisabled },\n                        React.createElement(OutlinedCalendarAltIcon, null))))),\n        helperText && React.createElement(\"div\", { className: styles.datePickerHelperText }, helperText),\n        errorText.trim() && React.createElement(\"div\", { className: css(styles.datePickerHelperText, styles.modifiers.error) }, errorText)));\n};\nDatePicker.displayName = 'DatePicker';\n//# sourceMappingURL=DatePicker.js.map"]},"metadata":{},"sourceType":"module"}