{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Skeleton/skeleton';\nimport { css } from '@patternfly/react-styles';\nexport const Skeleton = _a => {\n  var {\n    className,\n    width,\n    height,\n    fontSize,\n    shape,\n    screenreaderText\n  } = _a,\n      props = __rest(_a, [\"className\", \"width\", \"height\", \"fontSize\", \"shape\", \"screenreaderText\"]);\n\n  const fontHeightClassName = fontSize ? Object.values(styles.modifiers).find(key => key === `pf-m-text-${fontSize}`) : undefined;\n  return React.createElement(\"div\", Object.assign({}, props, {\n    className: css(styles.skeleton, fontSize && fontHeightClassName, shape === 'circle' && styles.modifiers.circle, shape === 'square' && styles.modifiers.square, className)\n  }, (width || height) && {\n    style: Object.assign({\n      '--pf-c-skeleton--Width': width ? width : undefined,\n      '--pf-c-skeleton--Height': height ? height : undefined\n    }, props.style)\n  }), React.createElement(\"span\", {\n    className: \"pf-u-screen-reader\"\n  }, screenreaderText));\n};\nSkeleton.displayName = 'Skeleton';","map":{"version":3,"sources":["../../../../src/components/Skeleton/Skeleton.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,2DAAnB;AACA,SAAS,GAAT,QAAoB,0BAApB;AAiBA,OAAO,MAAM,QAAQ,GAA4C,EAAD,IAQ5C;MAR6C;AAC/D,IAAA,SAD+D;AAE/D,IAAA,KAF+D;AAG/D,IAAA,MAH+D;AAI/D,IAAA,QAJ+D;AAK/D,IAAA,KAL+D;AAM/D,IAAA;AAN+D,MAM/C,E;MACb,KAAK,GAAA,MAAA,CAAA,EAAA,EAPuD,CAAA,WAAA,EAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,OAAA,EAAA,kBAAA,CAOvD,C;;AAER,QAAM,mBAAmB,GAAG,QAAQ,GAChC,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,SAArB,EAAgC,IAAhC,CAAqC,GAAG,IAAI,GAAG,KAAK,aAAa,QAAQ,EAAzE,CADgC,GAEhC,SAFJ;AAIA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACM,KADN,EACW;AACT,IAAA,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,QADK,EAEZ,QAAQ,IAAI,mBAFA,EAGZ,KAAK,KAAK,QAAV,IAAsB,MAAM,CAAC,SAAP,CAAiB,MAH3B,EAIZ,KAAK,KAAK,QAAV,IAAsB,MAAM,CAAC,SAAP,CAAiB,MAJ3B,EAKZ,SALY;AADL,GADX,EASO,CAAC,KAAK,IAAI,MAAV,KAAqB;AACxB,IAAA,KAAK,EAAE,MAAA,CAAA,MAAA,CAAA;AACL,gCAA0B,KAAK,GAAG,KAAH,GAAW,SADrC;AAEL,iCAA2B,MAAM,GAAG,MAAH,GAAY;AAFxC,KAAA,EAGF,KAAK,CAAC,KAHJ;AADiB,GAT5B,CAAA,EAiBE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAC;AAAhB,GAAA,EAAsC,gBAAtC,CAjBF,CADF;AAqBD,CAlCM;AAmCP,QAAQ,CAAC,WAAT,GAAuB,UAAvB","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Skeleton/skeleton';\nimport { css } from '@patternfly/react-styles';\nexport const Skeleton = (_a) => {\n    var { className, width, height, fontSize, shape, screenreaderText } = _a, props = __rest(_a, [\"className\", \"width\", \"height\", \"fontSize\", \"shape\", \"screenreaderText\"]);\n    const fontHeightClassName = fontSize\n        ? Object.values(styles.modifiers).find(key => key === `pf-m-text-${fontSize}`)\n        : undefined;\n    return (React.createElement(\"div\", Object.assign({}, props, { className: css(styles.skeleton, fontSize && fontHeightClassName, shape === 'circle' && styles.modifiers.circle, shape === 'square' && styles.modifiers.square, className) }, ((width || height) && {\n        style: Object.assign({ '--pf-c-skeleton--Width': width ? width : undefined, '--pf-c-skeleton--Height': height ? height : undefined }, props.style)\n    })),\n        React.createElement(\"span\", { className: \"pf-u-screen-reader\" }, screenreaderText)));\n};\nSkeleton.displayName = 'Skeleton';\n//# sourceMappingURL=Skeleton.js.map"]},"metadata":{},"sourceType":"module"}