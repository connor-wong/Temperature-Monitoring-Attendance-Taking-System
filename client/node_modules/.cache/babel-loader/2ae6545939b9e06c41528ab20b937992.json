{"ast":null,"code":"import { top, left, right, bottom } from '../enums';\nimport getOffsetParent from '../dom-utils/getOffsetParent';\nimport getWindow from '../dom-utils/getWindow';\nimport getDocumentElement from '../dom-utils/getDocumentElement';\nimport getComputedStyle from '../dom-utils/getComputedStyle';\nimport getBasePlacement from '../utils/getBasePlacement';\nconst unsetSides = {\n  top: 'auto',\n  right: 'auto',\n  bottom: 'auto',\n  left: 'auto'\n}; // Round the offsets to the nearest suitable subpixel based on the DPR.\n// Zooming can change the DPR, but it seems to report a value that will\n// cleanly divide the values into the appropriate subpixels.\n\n/**\n *\n */\n\nfunction roundOffsets({\n  x,\n  y\n}) {\n  const win = window;\n  const dpr = win.devicePixelRatio || 1;\n  return {\n    x: Math.round(x * dpr) / dpr || 0,\n    y: Math.round(y * dpr) / dpr || 0\n  };\n}\n/**\n *\n */\n\n\nexport function mapToStyles({\n  popper,\n  popperRect,\n  placement,\n  offsets,\n  position,\n  gpuAcceleration,\n  adaptive\n}) {\n  let {\n    x,\n    y\n  } = roundOffsets(offsets);\n  const hasX = offsets.hasOwnProperty('x');\n  const hasY = offsets.hasOwnProperty('y');\n  let sideX = left;\n  let sideY = top;\n  const win = window;\n\n  if (adaptive) {\n    let offsetParent = getOffsetParent(popper);\n\n    if (offsetParent === getWindow(popper)) {\n      offsetParent = getDocumentElement(popper);\n    } // $FlowFixMe: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it\n\n    /* :: offsetParent = (offsetParent: Element); */\n\n\n    if (placement === top) {\n      sideY = bottom;\n      y -= offsetParent.clientHeight - popperRect.height;\n      y *= gpuAcceleration ? 1 : -1;\n    }\n\n    if (placement === left) {\n      sideX = right;\n      x -= offsetParent.clientWidth - popperRect.width;\n      x *= gpuAcceleration ? 1 : -1;\n    }\n  }\n\n  const commonStyles = Object.assign({\n    position\n  }, adaptive && unsetSides);\n\n  if (gpuAcceleration) {\n    return Object.assign(Object.assign({}, commonStyles), {\n      [sideY]: hasY ? '0' : '',\n      [sideX]: hasX ? '0' : '',\n      // Layer acceleration can disable subpixel rendering which causes slightly\n      // blurry text on low PPI displays, so we want to use 2D transforms\n      // instead\n      transform: (win.devicePixelRatio || 1) < 2 ? `translate(${x}px, ${y}px)` : `translate3d(${x}px, ${y}px, 0)`\n    });\n  }\n\n  return Object.assign(Object.assign({}, commonStyles), {\n    [sideY]: hasY ? `${y}px` : '',\n    [sideX]: hasX ? `${x}px` : '',\n    transform: ''\n  });\n}\n/**\n *\n */\n\nfunction computeStyles({\n  state,\n  options\n}) {\n  const {\n    gpuAcceleration = true,\n    adaptive = true\n  } = options;\n\n  if (false\n  /* __DEV__*/\n  ) {\n      const transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || '';\n\n      if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(property => transitionProperty.indexOf(property) >= 0)) {\n        console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: \"transform\", \"top\", \"right\", \"bottom\", \"left\".', '\\n\\n', 'Disable the \"computeStyles\" modifier\\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\\n\\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));\n      }\n    }\n\n  const commonStyles = {\n    placement: getBasePlacement(state.placement),\n    popper: state.elements.popper,\n    popperRect: state.rects.popper,\n    gpuAcceleration\n  };\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.styles.popper = Object.assign(Object.assign({}, state.styles.popper), mapToStyles(Object.assign(Object.assign({}, commonStyles), {\n      offsets: state.modifiersData.popperOffsets,\n      position: state.options.strategy,\n      adaptive\n    })));\n  }\n\n  if (state.modifiersData.arrow != null) {\n    state.styles.arrow = Object.assign(Object.assign({}, state.styles.arrow), mapToStyles(Object.assign(Object.assign({}, commonStyles), {\n      offsets: state.modifiersData.arrow,\n      position: 'absolute',\n      adaptive: false\n    })));\n  }\n\n  state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), {\n    'data-popper-placement': state.placement\n  });\n}\n\nexport default {\n  name: 'computeStyles',\n  enabled: true,\n  phase: 'beforeWrite',\n  fn: computeStyles,\n  data: {}\n};","map":{"version":3,"sources":["../../../../../../../src/helpers/Popper/thirdparty/popper-core/modifiers/computeStyles.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { top, left, right, bottom } from '../enums';\nimport getOffsetParent from '../dom-utils/getOffsetParent';\nimport getWindow from '../dom-utils/getWindow';\nimport getDocumentElement from '../dom-utils/getDocumentElement';\nimport getComputedStyle from '../dom-utils/getComputedStyle';\nimport getBasePlacement from '../utils/getBasePlacement';\nconst unsetSides = {\n    top: 'auto',\n    right: 'auto',\n    bottom: 'auto',\n    left: 'auto'\n};\n// Round the offsets to the nearest suitable subpixel based on the DPR.\n// Zooming can change the DPR, but it seems to report a value that will\n// cleanly divide the values into the appropriate subpixels.\n/**\n *\n */\nfunction roundOffsets({ x, y }) {\n    const win = window;\n    const dpr = win.devicePixelRatio || 1;\n    return {\n        x: Math.round(x * dpr) / dpr || 0,\n        y: Math.round(y * dpr) / dpr || 0\n    };\n}\n/**\n *\n */\nexport function mapToStyles({ popper, popperRect, placement, offsets, position, gpuAcceleration, adaptive }) {\n    let { x, y } = roundOffsets(offsets);\n    const hasX = offsets.hasOwnProperty('x');\n    const hasY = offsets.hasOwnProperty('y');\n    let sideX = left;\n    let sideY = top;\n    const win = window;\n    if (adaptive) {\n        let offsetParent = getOffsetParent(popper);\n        if (offsetParent === getWindow(popper)) {\n            offsetParent = getDocumentElement(popper);\n        }\n        // $FlowFixMe: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it\n        /* :: offsetParent = (offsetParent: Element); */\n        if (placement === top) {\n            sideY = bottom;\n            y -= offsetParent.clientHeight - popperRect.height;\n            y *= gpuAcceleration ? 1 : -1;\n        }\n        if (placement === left) {\n            sideX = right;\n            x -= offsetParent.clientWidth - popperRect.width;\n            x *= gpuAcceleration ? 1 : -1;\n        }\n    }\n    const commonStyles = Object.assign({ position }, (adaptive && unsetSides));\n    if (gpuAcceleration) {\n        return Object.assign(Object.assign({}, commonStyles), { [sideY]: hasY ? '0' : '', [sideX]: hasX ? '0' : '', \n            // Layer acceleration can disable subpixel rendering which causes slightly\n            // blurry text on low PPI displays, so we want to use 2D transforms\n            // instead\n            transform: (win.devicePixelRatio || 1) < 2 ? `translate(${x}px, ${y}px)` : `translate3d(${x}px, ${y}px, 0)` });\n    }\n    return Object.assign(Object.assign({}, commonStyles), { [sideY]: hasY ? `${y}px` : '', [sideX]: hasX ? `${x}px` : '', transform: '' });\n}\n/**\n *\n */\nfunction computeStyles({ state, options }) {\n    const { gpuAcceleration = true, adaptive = true } = options;\n    if (false /* __DEV__*/) {\n        const transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || '';\n        if (adaptive &&\n            ['transform', 'top', 'right', 'bottom', 'left'].some(property => transitionProperty.indexOf(property) >= 0)) {\n            console.warn([\n                'Popper: Detected CSS transitions on at least one of the following',\n                'CSS properties: \"transform\", \"top\", \"right\", \"bottom\", \"left\".',\n                '\\n\\n',\n                'Disable the \"computeStyles\" modifier\\'s `adaptive` option to allow',\n                'for smooth transitions, or remove these properties from the CSS',\n                'transition declaration on the popper element if only transitioning',\n                'opacity or background-color for example.',\n                '\\n\\n',\n                'We recommend using the popper element as a wrapper around an inner',\n                'element that can have any CSS property transitioned for animations.'\n            ].join(' '));\n        }\n    }\n    const commonStyles = {\n        placement: getBasePlacement(state.placement),\n        popper: state.elements.popper,\n        popperRect: state.rects.popper,\n        gpuAcceleration\n    };\n    if (state.modifiersData.popperOffsets != null) {\n        state.styles.popper = Object.assign(Object.assign({}, state.styles.popper), mapToStyles(Object.assign(Object.assign({}, commonStyles), { offsets: state.modifiersData.popperOffsets, position: state.options.strategy, adaptive })));\n    }\n    if (state.modifiersData.arrow != null) {\n        state.styles.arrow = Object.assign(Object.assign({}, state.styles.arrow), mapToStyles(Object.assign(Object.assign({}, commonStyles), { offsets: state.modifiersData.arrow, position: 'absolute', adaptive: false })));\n    }\n    state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), { 'data-popper-placement': state.placement });\n}\nexport default {\n    name: 'computeStyles',\n    enabled: true,\n    phase: 'beforeWrite',\n    fn: computeStyles,\n    data: {}\n};\n//# sourceMappingURL=computeStyles.js.map"]},"metadata":{},"sourceType":"module"}