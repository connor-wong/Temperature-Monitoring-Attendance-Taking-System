{"ast":null,"code":"const convertedVapidKey = urlBase64ToUint8Array(\"BDwtsxZpmUHSnFq5VViqOGkrcZLO2HxeSZPdVyA3upYBhVghSJMNkiZX5KFX5KnrheGyLCAX8-Lh1OtLaEGWNbI\");\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = \"=\".repeat((4 - base64String.length % 4) % 4); // eslint-disable-next-line\n\n  const base64 = (base64String + padding).replace(/\\-/g, \"+\").replace(/_/g, \"/\");\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n\nfunction sendSubscription(subscription) {\n  //console.log(JSON.stringify(subscription));\n  return fetch(\"/notifications/subscribe\", {\n    method: \"POST\",\n    body: JSON.stringify(subscription),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n}\n\nexport function subscribeUser() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      if (!registration.pushManager) {\n        console.log(\"Push manager unavailable.\");\n        return;\n      }\n\n      registration.pushManager.getSubscription().then(function (existedSubscription) {\n        if (existedSubscription === null) {\n          console.log(\"No subscription detected, make a request.\");\n          registration.pushManager.subscribe({\n            applicationServerKey: convertedVapidKey,\n            userVisibleOnly: true\n          }).then(function (newSubscription) {\n            //console.log(\"New subscription added.\");\n            sendSubscription(newSubscription);\n          }).catch(function (e) {\n            if (Notification.permission !== \"granted\") {\n              console.log(\"Permission was not granted.\");\n            } else {\n              console.error(\"An error ocurred during the subscription process.\", e);\n            }\n          });\n        } else {\n          //console.log(\"Existed subscription detected.\");\n          sendSubscription(existedSubscription);\n        }\n      });\n    }).catch(function (e) {\n      console.error(\"An error ocurred during Service Worker registration.\", e);\n    });\n  }\n}","map":{"version":3,"sources":["C:/School Stuff/Modules/2021 Sem One/Final Year Project/Temperature Monitoring And Attendance Taking System/Web Interface Prototype/raspitar/client/src/subscription.js"],"names":["convertedVapidKey","urlBase64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","sendSubscription","subscription","fetch","method","body","JSON","stringify","headers","subscribeUser","navigator","serviceWorker","ready","then","registration","pushManager","console","log","getSubscription","existedSubscription","subscribe","applicationServerKey","userVisibleOnly","newSubscription","catch","e","Notification","permission","error"],"mappings":"AAAA,MAAMA,iBAAiB,GAAGC,qBAAqB,CAC7C,yFAD6C,CAA/C;;AAIA,SAASA,qBAAT,CAA+BC,YAA/B,EAA6C;AAC3C,QAAMC,OAAO,GAAG,IAAIC,MAAJ,CAAW,CAAC,IAAKF,YAAY,CAACG,MAAb,GAAsB,CAA5B,IAAkC,CAA7C,CAAhB,CAD2C,CAE3C;;AACA,QAAMC,MAAM,GAAG,CAACJ,YAAY,GAAGC,OAAhB,EACZI,OADY,CACJ,KADI,EACG,GADH,EAEZA,OAFY,CAEJ,IAFI,EAEE,GAFF,CAAf;AAIA,QAAMC,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAAhB;AACA,QAAMK,WAAW,GAAG,IAAIC,UAAJ,CAAeJ,OAAO,CAACH,MAAvB,CAApB;;AAEA,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAAO,CAACH,MAA5B,EAAoC,EAAEQ,CAAtC,EAAyC;AACvCF,IAAAA,WAAW,CAACE,CAAD,CAAX,GAAiBL,OAAO,CAACM,UAAR,CAAmBD,CAAnB,CAAjB;AACD;;AACD,SAAOF,WAAP;AACD;;AAED,SAASI,gBAAT,CAA0BC,YAA1B,EAAwC;AACtC;AACA,SAAOC,KAAK,CAAC,0BAAD,EAA6B;AACvCC,IAAAA,MAAM,EAAE,MAD+B;AAEvCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,YAAf,CAFiC;AAGvCM,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAH8B,GAA7B,CAAZ;AAOD;;AAED,OAAO,SAASC,aAAT,GAAyB;AAC9B,MAAI,mBAAmBC,SAAvB,EAAkC;AAChCA,IAAAA,SAAS,CAACC,aAAV,CAAwBC,KAAxB,CACGC,IADH,CACQ,UAAUC,YAAV,EAAwB;AAC5B,UAAI,CAACA,YAAY,CAACC,WAAlB,EAA+B;AAC7BC,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA;AACD;;AAEDH,MAAAA,YAAY,CAACC,WAAb,CACGG,eADH,GAEGL,IAFH,CAEQ,UAAUM,mBAAV,EAA+B;AACnC,YAAIA,mBAAmB,KAAK,IAA5B,EAAkC;AAChCH,UAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ;AACAH,UAAAA,YAAY,CAACC,WAAb,CACGK,SADH,CACa;AACTC,YAAAA,oBAAoB,EAAEnC,iBADb;AAEToC,YAAAA,eAAe,EAAE;AAFR,WADb,EAKGT,IALH,CAKQ,UAAUU,eAAV,EAA2B;AAC/B;AACAtB,YAAAA,gBAAgB,CAACsB,eAAD,CAAhB;AACD,WARH,EASGC,KATH,CASS,UAAUC,CAAV,EAAa;AAClB,gBAAIC,YAAY,CAACC,UAAb,KAA4B,SAAhC,EAA2C;AACzCX,cAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACD,aAFD,MAEO;AACLD,cAAAA,OAAO,CAACY,KAAR,CACE,mDADF,EAEEH,CAFF;AAID;AACF,WAlBH;AAmBD,SArBD,MAqBO;AACL;AACAxB,UAAAA,gBAAgB,CAACkB,mBAAD,CAAhB;AACD;AACF,OA5BH;AA6BD,KApCH,EAqCGK,KArCH,CAqCS,UAAUC,CAAV,EAAa;AAClBT,MAAAA,OAAO,CAACY,KAAR,CACE,sDADF,EAEEH,CAFF;AAID,KA1CH;AA2CD;AACF","sourcesContent":["const convertedVapidKey = urlBase64ToUint8Array(\r\n  \"BDwtsxZpmUHSnFq5VViqOGkrcZLO2HxeSZPdVyA3upYBhVghSJMNkiZX5KFX5KnrheGyLCAX8-Lh1OtLaEGWNbI\"\r\n);\r\n\r\nfunction urlBase64ToUint8Array(base64String) {\r\n  const padding = \"=\".repeat((4 - (base64String.length % 4)) % 4);\r\n  // eslint-disable-next-line\r\n  const base64 = (base64String + padding)\r\n    .replace(/\\-/g, \"+\")\r\n    .replace(/_/g, \"/\");\r\n\r\n  const rawData = window.atob(base64);\r\n  const outputArray = new Uint8Array(rawData.length);\r\n\r\n  for (let i = 0; i < rawData.length; ++i) {\r\n    outputArray[i] = rawData.charCodeAt(i);\r\n  }\r\n  return outputArray;\r\n}\r\n\r\nfunction sendSubscription(subscription) {\r\n  //console.log(JSON.stringify(subscription));\r\n  return fetch(\"/notifications/subscribe\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify(subscription),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n}\r\n\r\nexport function subscribeUser() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(function (registration) {\r\n        if (!registration.pushManager) {\r\n          console.log(\"Push manager unavailable.\");\r\n          return;\r\n        }\r\n\r\n        registration.pushManager\r\n          .getSubscription()\r\n          .then(function (existedSubscription) {\r\n            if (existedSubscription === null) {\r\n              console.log(\"No subscription detected, make a request.\");\r\n              registration.pushManager\r\n                .subscribe({\r\n                  applicationServerKey: convertedVapidKey,\r\n                  userVisibleOnly: true,\r\n                })\r\n                .then(function (newSubscription) {\r\n                  //console.log(\"New subscription added.\");\r\n                  sendSubscription(newSubscription);\r\n                })\r\n                .catch(function (e) {\r\n                  if (Notification.permission !== \"granted\") {\r\n                    console.log(\"Permission was not granted.\");\r\n                  } else {\r\n                    console.error(\r\n                      \"An error ocurred during the subscription process.\",\r\n                      e\r\n                    );\r\n                  }\r\n                });\r\n            } else {\r\n              //console.log(\"Existed subscription detected.\");\r\n              sendSubscription(existedSubscription);\r\n            }\r\n          });\r\n      })\r\n      .catch(function (e) {\r\n        console.error(\r\n          \"An error ocurred during Service Worker registration.\",\r\n          e\r\n        );\r\n      });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}