{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nexport class TreeViewRoot extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.displayName = 'TreeViewRoot';\n    this.treeRef = React.createRef();\n\n    this.handleKeys = event => {\n      if (this.treeRef.current !== event.target.closest('.pf-c-tree-view')) {\n        return;\n      }\n\n      const activeElement = document.activeElement;\n      const key = event.key;\n      let moveFocus = false;\n      let currentIndex = -1;\n      const treeItems = Array.from(this.treeRef.current.getElementsByClassName('pf-c-tree-view__node'));\n\n      if (key === 'Space') {\n        document.activeElement.click();\n        event.preventDefault();\n      }\n\n      if (['ArrowUp', 'ArrowDown'].includes(key)) {\n        treeItems.forEach((treeItem, index) => {\n          if (activeElement === treeItem) {\n            const increment = key === 'ArrowUp' ? -1 : 1;\n            currentIndex = index + increment;\n\n            while (currentIndex < treeItems.length && currentIndex >= 0 && treeItems[currentIndex].classList.contains('pf-m-disabled')) {\n              currentIndex = currentIndex + increment;\n            }\n\n            moveFocus = true;\n            event.preventDefault();\n          }\n        });\n\n        if (moveFocus && treeItems[currentIndex]) {\n          activeElement.tabIndex = -1;\n          treeItems[currentIndex].tabIndex = 0;\n          treeItems[currentIndex].focus();\n        }\n      }\n\n      if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n        const isExpandable = activeElement.firstElementChild.classList.contains('pf-c-tree-view__node-toggle');\n        const isExpanded = activeElement.closest('li').classList.contains('pf-m-expanded');\n\n        if (key === 'ArrowLeft') {\n          if (isExpandable && isExpanded) {\n            activeElement.click();\n          } else {\n            const parentList = activeElement.closest('ul').parentElement;\n\n            if (parentList.tagName !== 'DIV') {\n              const parentButton = parentList.querySelector('button');\n              activeElement.tabIndex = -1;\n              parentButton.tabIndex = 0;\n              parentButton.focus();\n            }\n          }\n        } else {\n          if (isExpandable && !isExpanded) {\n            activeElement.tabIndex = -1;\n            activeElement.click();\n            const childElement = activeElement.closest('li').querySelector('ul > li').querySelector('button');\n            childElement.tabIndex = 0;\n            childElement.focus();\n          }\n        }\n\n        event.preventDefault();\n      }\n    };\n\n    this.handleKeysCheckbox = event => {\n      if (this.treeRef.current !== event.target.closest('.pf-c-tree-view')) {\n        return;\n      }\n\n      const activeElement = document.activeElement;\n      const key = event.key;\n      let moveFocus = false;\n      let currentIndex = -1;\n      let innerIndex = -1;\n      let previousIndex = -1;\n      const treeNodes = Array.from(this.treeRef.current.getElementsByClassName('pf-c-tree-view__node'));\n      const mappedItems = treeNodes.map(item => {\n        const itemChildren = item.childNodes;\n        const firstItem = itemChildren[0];\n\n        if (firstItem.tagName === 'SPAN') {\n          return [null, firstItem.firstChild];\n        } else {\n          return [itemChildren[0], itemChildren[1].firstChild];\n        }\n      });\n\n      if (key === 'Space') {\n        document.activeElement.click();\n        event.preventDefault();\n      }\n\n      if (['ArrowUp', 'ArrowDown'].includes(key)) {\n        mappedItems.forEach((treeItem, treeItemIndex) => {\n          treeItem.forEach((element, index) => {\n            if (activeElement === element) {\n              const increment = key === 'ArrowUp' ? -1 : 1;\n              innerIndex = index;\n              previousIndex = treeItemIndex;\n              currentIndex = treeItemIndex + increment;\n\n              while (currentIndex < mappedItems.length && currentIndex >= 0 && (!mappedItems[currentIndex][index] || mappedItems[currentIndex][index].classList.contains('pf-m-disabled'))) {\n                currentIndex = currentIndex + increment;\n              }\n\n              moveFocus = true;\n              event.preventDefault();\n            }\n          });\n        });\n\n        if (moveFocus && mappedItems[currentIndex] && mappedItems[currentIndex][innerIndex]) {\n          if (mappedItems[previousIndex][0]) {\n            mappedItems[previousIndex][0].tabIndex = -1;\n          }\n\n          mappedItems[previousIndex][1].tabIndex = -1;\n\n          if (mappedItems[currentIndex][0]) {\n            mappedItems[currentIndex][0].tabIndex = 0;\n          }\n\n          mappedItems[currentIndex][1].tabIndex = 0;\n          mappedItems[currentIndex][innerIndex].focus();\n        }\n      }\n\n      if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n        if (key === 'ArrowLeft') {\n          if (activeElement.tagName === 'INPUT') {\n            activeElement.parentElement.previousSibling && activeElement.parentElement.previousSibling.focus();\n          } else if (activeElement.previousSibling) {\n            if (activeElement.previousElementSibling.tagName === 'SPAN') {\n              activeElement.previousSibling.firstChild.focus();\n            } else {\n              activeElement.previousSibling.focus();\n            }\n          }\n        } else {\n          if (activeElement.tagName === 'INPUT') {\n            activeElement.parentElement.nextSibling && activeElement.parentElement.nextSibling.focus();\n          } else if (activeElement.nextSibling) {\n            if (activeElement.nextElementSibling.tagName === 'SPAN') {\n              activeElement.nextSibling.firstChild.focus();\n            } else {\n              activeElement.nextSibling.focus();\n            }\n          }\n        }\n\n        event.preventDefault();\n      }\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', this.props.hasChecks ? this.handleKeysCheckbox : this.handleKeys);\n\n    if (this.props.hasChecks) {\n      this.treeRef.current.getElementsByClassName('pf-c-tree-view__node-toggle')[0].tabIndex = 0;\n      this.treeRef.current.getElementsByTagName('INPUT')[0].tabIndex = 0;\n    } else {\n      this.treeRef.current.getElementsByClassName('pf-c-tree-view__node')[0].tabIndex = 0;\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.props.hasChecks ? this.handleKeysCheckbox : this.handleKeys);\n  }\n\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _a = this.props,\n          {\n      children,\n      hasChecks,\n      className\n    } = _a,\n          props = __rest(_a, [\"children\", \"hasChecks\", \"className\"]);\n\n    return React.createElement(\"div\", Object.assign({\n      className: css(styles.treeView, className),\n      ref: this.treeRef\n    }, props), children);\n  }\n\n}","map":{"version":3,"sources":["../../../../src/components/TreeView/TreeViewRoot.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nexport class TreeViewRoot extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.displayName = 'TreeViewRoot';\n        this.treeRef = React.createRef();\n        this.handleKeys = (event) => {\n            if (this.treeRef.current !== event.target.closest('.pf-c-tree-view')) {\n                return;\n            }\n            const activeElement = document.activeElement;\n            const key = event.key;\n            let moveFocus = false;\n            let currentIndex = -1;\n            const treeItems = Array.from(this.treeRef.current.getElementsByClassName('pf-c-tree-view__node'));\n            if (key === 'Space') {\n                document.activeElement.click();\n                event.preventDefault();\n            }\n            if (['ArrowUp', 'ArrowDown'].includes(key)) {\n                treeItems.forEach((treeItem, index) => {\n                    if (activeElement === treeItem) {\n                        const increment = key === 'ArrowUp' ? -1 : 1;\n                        currentIndex = index + increment;\n                        while (currentIndex < treeItems.length &&\n                            currentIndex >= 0 &&\n                            treeItems[currentIndex].classList.contains('pf-m-disabled')) {\n                            currentIndex = currentIndex + increment;\n                        }\n                        moveFocus = true;\n                        event.preventDefault();\n                    }\n                });\n                if (moveFocus && treeItems[currentIndex]) {\n                    activeElement.tabIndex = -1;\n                    treeItems[currentIndex].tabIndex = 0;\n                    treeItems[currentIndex].focus();\n                }\n            }\n            if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n                const isExpandable = activeElement.firstElementChild.classList.contains('pf-c-tree-view__node-toggle');\n                const isExpanded = activeElement.closest('li').classList.contains('pf-m-expanded');\n                if (key === 'ArrowLeft') {\n                    if (isExpandable && isExpanded) {\n                        activeElement.click();\n                    }\n                    else {\n                        const parentList = activeElement.closest('ul').parentElement;\n                        if (parentList.tagName !== 'DIV') {\n                            const parentButton = parentList.querySelector('button');\n                            activeElement.tabIndex = -1;\n                            parentButton.tabIndex = 0;\n                            parentButton.focus();\n                        }\n                    }\n                }\n                else {\n                    if (isExpandable && !isExpanded) {\n                        activeElement.tabIndex = -1;\n                        activeElement.click();\n                        const childElement = activeElement\n                            .closest('li')\n                            .querySelector('ul > li')\n                            .querySelector('button');\n                        childElement.tabIndex = 0;\n                        childElement.focus();\n                    }\n                }\n                event.preventDefault();\n            }\n        };\n        this.handleKeysCheckbox = (event) => {\n            if (this.treeRef.current !== event.target.closest('.pf-c-tree-view')) {\n                return;\n            }\n            const activeElement = document.activeElement;\n            const key = event.key;\n            let moveFocus = false;\n            let currentIndex = -1;\n            let innerIndex = -1;\n            let previousIndex = -1;\n            const treeNodes = Array.from(this.treeRef.current.getElementsByClassName('pf-c-tree-view__node'));\n            const mappedItems = treeNodes.map(item => {\n                const itemChildren = item.childNodes;\n                const firstItem = itemChildren[0];\n                if (firstItem.tagName === 'SPAN') {\n                    return [null, firstItem.firstChild];\n                }\n                else {\n                    return [itemChildren[0], itemChildren[1].firstChild];\n                }\n            });\n            if (key === 'Space') {\n                document.activeElement.click();\n                event.preventDefault();\n            }\n            if (['ArrowUp', 'ArrowDown'].includes(key)) {\n                mappedItems.forEach((treeItem, treeItemIndex) => {\n                    treeItem.forEach((element, index) => {\n                        if (activeElement === element) {\n                            const increment = key === 'ArrowUp' ? -1 : 1;\n                            innerIndex = index;\n                            previousIndex = treeItemIndex;\n                            currentIndex = treeItemIndex + increment;\n                            while (currentIndex < mappedItems.length &&\n                                currentIndex >= 0 &&\n                                (!mappedItems[currentIndex][index] ||\n                                    mappedItems[currentIndex][index].classList.contains('pf-m-disabled'))) {\n                                currentIndex = currentIndex + increment;\n                            }\n                            moveFocus = true;\n                            event.preventDefault();\n                        }\n                    });\n                });\n                if (moveFocus && mappedItems[currentIndex] && mappedItems[currentIndex][innerIndex]) {\n                    if (mappedItems[previousIndex][0]) {\n                        mappedItems[previousIndex][0].tabIndex = -1;\n                    }\n                    mappedItems[previousIndex][1].tabIndex = -1;\n                    if (mappedItems[currentIndex][0]) {\n                        mappedItems[currentIndex][0].tabIndex = 0;\n                    }\n                    mappedItems[currentIndex][1].tabIndex = 0;\n                    mappedItems[currentIndex][innerIndex].focus();\n                }\n            }\n            if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n                if (key === 'ArrowLeft') {\n                    if (activeElement.tagName === 'INPUT') {\n                        activeElement.parentElement.previousSibling &&\n                            activeElement.parentElement.previousSibling.focus();\n                    }\n                    else if (activeElement.previousSibling) {\n                        if (activeElement.previousElementSibling.tagName === 'SPAN') {\n                            activeElement.previousSibling.firstChild.focus();\n                        }\n                        else {\n                            activeElement.previousSibling.focus();\n                        }\n                    }\n                }\n                else {\n                    if (activeElement.tagName === 'INPUT') {\n                        activeElement.parentElement.nextSibling && activeElement.parentElement.nextSibling.focus();\n                    }\n                    else if (activeElement.nextSibling) {\n                        if (activeElement.nextElementSibling.tagName === 'SPAN') {\n                            activeElement.nextSibling.firstChild.focus();\n                        }\n                        else {\n                            activeElement.nextSibling.focus();\n                        }\n                    }\n                }\n                event.preventDefault();\n            }\n        };\n    }\n    componentDidMount() {\n        window.addEventListener('keydown', this.props.hasChecks ? this.handleKeysCheckbox : this.handleKeys);\n        if (this.props.hasChecks) {\n            this.treeRef.current.getElementsByClassName('pf-c-tree-view__node-toggle')[0].tabIndex = 0;\n            this.treeRef.current.getElementsByTagName('INPUT')[0].tabIndex = 0;\n        }\n        else {\n            this.treeRef.current.getElementsByClassName('pf-c-tree-view__node')[0].tabIndex = 0;\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('keydown', this.props.hasChecks ? this.handleKeysCheckbox : this.handleKeys);\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _a = this.props, { children, hasChecks, className } = _a, props = __rest(_a, [\"children\", \"hasChecks\", \"className\"]);\n        return (React.createElement(\"div\", Object.assign({ className: css(styles.treeView, className), ref: this.treeRef }, props), children));\n    }\n}\n//# sourceMappingURL=TreeViewRoot.js.map"]},"metadata":{},"sourceType":"module"}