{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { KEY_CODES } from '../../helpers/constants';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nexport const OptionsMenuToggleWithText = _a => {\n  var {\n    parentId = '',\n    toggleText,\n    toggleTextClassName = '',\n    toggleButtonContents,\n    toggleButtonContentsClassName = '',\n    onToggle = () => null,\n    isOpen = false,\n    isPlain = false,\n    isDisabled = false,\n\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    isActive = false,\n    'aria-haspopup': ariaHasPopup,\n    parentRef,\n    onEnter,\n\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    'aria-label': ariaLabel = 'Options menu'\n  } = _a,\n      props = __rest(_a, [\"parentId\", \"toggleText\", \"toggleTextClassName\", \"toggleButtonContents\", \"toggleButtonContentsClassName\", \"onToggle\", \"isOpen\", \"isPlain\", \"isDisabled\", \"isActive\", 'aria-haspopup', \"parentRef\", \"onEnter\", 'aria-label']);\n\n  const buttonRef = React.useRef();\n  React.useEffect(() => {\n    document.addEventListener('mousedown', onDocClick);\n    document.addEventListener('touchstart', onDocClick);\n    document.addEventListener('keydown', onEscPress);\n    return () => {\n      document.removeEventListener('mousedown', onDocClick);\n      document.removeEventListener('touchstart', onDocClick);\n      document.removeEventListener('keydown', onEscPress);\n    };\n  });\n\n  const onDocClick = event => {\n    if (isOpen && parentRef && parentRef.current && !parentRef.current.contains(event.target)) {\n      onToggle(false);\n      buttonRef.current.focus();\n    }\n  };\n\n  const onKeyDown = event => {\n    if (event.key === 'Tab' && !isOpen) {\n      return;\n    }\n\n    event.preventDefault();\n\n    if ((event.key === 'Enter' || event.key === ' ') && isOpen) {\n      onToggle(!isOpen);\n    } else if ((event.key === 'Enter' || event.key === ' ') && !isOpen) {\n      onToggle(!isOpen);\n      onEnter(event);\n    }\n  };\n\n  const onEscPress = event => {\n    const keyCode = event.keyCode || event.which;\n\n    if (isOpen && (keyCode === KEY_CODES.ESCAPE_KEY || event.key === 'Tab') && parentRef && parentRef.current && parentRef.current.contains(event.target)) {\n      onToggle(false);\n      buttonRef.current.focus();\n    }\n  };\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.optionsMenuToggle, styles.modifiers.text, isPlain && styles.modifiers.plain, isDisabled && styles.modifiers.disabled, isActive && styles.modifiers.active)\n  }, props), React.createElement(\"span\", {\n    className: css(styles.optionsMenuToggleText, toggleTextClassName)\n  }, toggleText), React.createElement(\"button\", {\n    className: css(styles.optionsMenuToggleButton, toggleButtonContentsClassName),\n    id: `${parentId}-toggle`,\n    \"aria-haspopup\": \"listbox\",\n    \"aria-label\": ariaLabel,\n    \"aria-expanded\": isOpen,\n    ref: buttonRef,\n    disabled: isDisabled,\n    onClick: () => onToggle(!isOpen),\n    onKeyDown: onKeyDown\n  }, React.createElement(\"span\", {\n    className: css(styles.optionsMenuToggleButtonIcon)\n  }, toggleButtonContents)));\n};\nOptionsMenuToggleWithText.displayName = 'OptionsMenuToggleWithText';","map":{"version":3,"sources":["../../../../src/components/OptionsMenu/OptionsMenuToggleWithText.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { KEY_CODES } from '../../helpers/constants';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nexport const OptionsMenuToggleWithText = (_a) => {\n    var { parentId = '', toggleText, toggleTextClassName = '', toggleButtonContents, toggleButtonContentsClassName = '', onToggle = () => null, isOpen = false, isPlain = false, isDisabled = false, \n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    isActive = false, 'aria-haspopup': ariaHasPopup, parentRef, onEnter, \n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    'aria-label': ariaLabel = 'Options menu' } = _a, props = __rest(_a, [\"parentId\", \"toggleText\", \"toggleTextClassName\", \"toggleButtonContents\", \"toggleButtonContentsClassName\", \"onToggle\", \"isOpen\", \"isPlain\", \"isDisabled\", \"isActive\", 'aria-haspopup', \"parentRef\", \"onEnter\", 'aria-label']);\n    const buttonRef = React.useRef();\n    React.useEffect(() => {\n        document.addEventListener('mousedown', onDocClick);\n        document.addEventListener('touchstart', onDocClick);\n        document.addEventListener('keydown', onEscPress);\n        return () => {\n            document.removeEventListener('mousedown', onDocClick);\n            document.removeEventListener('touchstart', onDocClick);\n            document.removeEventListener('keydown', onEscPress);\n        };\n    });\n    const onDocClick = (event) => {\n        if (isOpen && parentRef && parentRef.current && !parentRef.current.contains(event.target)) {\n            onToggle(false);\n            buttonRef.current.focus();\n        }\n    };\n    const onKeyDown = (event) => {\n        if (event.key === 'Tab' && !isOpen) {\n            return;\n        }\n        event.preventDefault();\n        if ((event.key === 'Enter' || event.key === ' ') && isOpen) {\n            onToggle(!isOpen);\n        }\n        else if ((event.key === 'Enter' || event.key === ' ') && !isOpen) {\n            onToggle(!isOpen);\n            onEnter(event);\n        }\n    };\n    const onEscPress = (event) => {\n        const keyCode = event.keyCode || event.which;\n        if (isOpen &&\n            (keyCode === KEY_CODES.ESCAPE_KEY || event.key === 'Tab') &&\n            parentRef &&\n            parentRef.current &&\n            parentRef.current.contains(event.target)) {\n            onToggle(false);\n            buttonRef.current.focus();\n        }\n    };\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.optionsMenuToggle, styles.modifiers.text, isPlain && styles.modifiers.plain, isDisabled && styles.modifiers.disabled, isActive && styles.modifiers.active) }, props),\n        React.createElement(\"span\", { className: css(styles.optionsMenuToggleText, toggleTextClassName) }, toggleText),\n        React.createElement(\"button\", { className: css(styles.optionsMenuToggleButton, toggleButtonContentsClassName), id: `${parentId}-toggle`, \"aria-haspopup\": \"listbox\", \"aria-label\": ariaLabel, \"aria-expanded\": isOpen, ref: buttonRef, disabled: isDisabled, onClick: () => onToggle(!isOpen), onKeyDown: onKeyDown },\n            React.createElement(\"span\", { className: css(styles.optionsMenuToggleButtonIcon) }, toggleButtonContents))));\n};\nOptionsMenuToggleWithText.displayName = 'OptionsMenuToggleWithText';\n//# sourceMappingURL=OptionsMenuToggleWithText.js.map"]},"metadata":{},"sourceType":"module"}