{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport TimesIcon from \"@patternfly/react-icons/dist/esm/icons/times-icon\";\nimport { Text, TextVariants } from '../Text';\nimport { Button, ButtonVariant } from '../Button';\nexport const NotificationDrawerHeader = _a => {\n  var {\n    children,\n    className = '',\n    count,\n    closeButtonAriaLabel = 'Close',\n    customText,\n    onClose,\n    title = 'Notifications',\n    unreadText = 'unread'\n  } = _a,\n      props = __rest(_a, [\"children\", \"className\", \"count\", \"closeButtonAriaLabel\", \"customText\", \"onClose\", \"title\", \"unreadText\"]);\n\n  return React.createElement(\"div\", Object.assign({}, props, {\n    className: css(styles.notificationDrawerHeader, className)\n  }), React.createElement(Text, {\n    component: TextVariants.h1,\n    className: css(styles.notificationDrawerHeaderTitle)\n  }, title), (customText !== undefined || count !== undefined) && React.createElement(\"span\", {\n    className: css(styles.notificationDrawerHeaderStatus)\n  }, customText || `${count} ${unreadText}`), children && React.createElement(\"div\", {\n    className: css(styles.notificationDrawerHeaderAction)\n  }, children, onClose && React.createElement(\"div\", null, React.createElement(Button, {\n    variant: ButtonVariant.plain,\n    \"aria-label\": closeButtonAriaLabel,\n    onClick: onClose\n  }, React.createElement(TimesIcon, {\n    \"aria-hidden\": \"true\"\n  })))));\n};\nNotificationDrawerHeader.displayName = 'NotificationDrawerHeader';","map":{"version":3,"sources":["../../../../src/components/NotificationDrawer/NotificationDrawerHeader.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,gFAAnB;AACA,OAAO,SAAP,MAAgB,mDAAhB;AAEA,SAAS,IAAT,EAAe,YAAf,QAAmC,SAAnC;AACA,SAAS,MAAT,EAAiB,aAAjB,QAAsC,WAAtC;AAqBA,OAAO,MAAM,wBAAwB,GAA4D,EAAD,IAU5D;MAV6D;AAC/F,IAAA,QAD+F;AAE/F,IAAA,SAAS,GAAG,EAFmF;AAG/F,IAAA,KAH+F;AAI/F,IAAA,oBAAoB,GAAG,OAJwE;AAK/F,IAAA,UAL+F;AAM/F,IAAA,OAN+F;AAO/F,IAAA,KAAK,GAAG,eAPuF;AAQ/F,IAAA,UAAU,GAAG;AARkF,MAQ1E,E;MAClB,KAAK,GAAA,MAAA,CAAA,EAAA,EATuF,CAAA,UAAA,EAAA,WAAA,EAAA,OAAA,EAAA,sBAAA,EAAA,YAAA,EAAA,SAAA,EAAA,OAAA,EAAA,YAAA,CASvF,C;;AAC2B,SACnC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAS,KAAT,EAAc;AAAE,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,wBAAR,EAAkC,SAAlC;AAAhB,GAAd,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK;AAAC,IAAA,SAAS,EAAE,YAAY,CAAC,EAAzB;AAA6B,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,6BAAR;AAA3C,GAAL,EACG,KADH,CADF,EAIG,CAAC,UAAU,KAAK,SAAf,IAA4B,KAAK,KAAK,SAAvC,KACC,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,8BAAR;AAApB,GAAA,EAA8D,UAAU,IAAI,GAAG,KAAK,IAAI,UAAU,EAAlG,CALJ,EAOG,QAAQ,IACP,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,8BAAR;AAAnB,GAAA,EACG,QADH,EAEG,OAAO,IACN,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO;AAAC,IAAA,OAAO,EAAE,aAAa,CAAC,KAAxB;AAA6B,kBAAc,oBAA3C;AAAiE,IAAA,OAAO,EAAE;AAA1E,GAAP,EACE,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU;AAAA,mBAAa;AAAb,GAAV,CADF,CADF,CAHJ,CARJ,CADmC;AAqBpC,CA/BM;AAgCP,wBAAwB,CAAC,WAAzB,GAAuC,0BAAvC","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport TimesIcon from \"@patternfly/react-icons/dist/esm/icons/times-icon\";\nimport { Text, TextVariants } from '../Text';\nimport { Button, ButtonVariant } from '../Button';\nexport const NotificationDrawerHeader = (_a) => {\n    var { children, className = '', count, closeButtonAriaLabel = 'Close', customText, onClose, title = 'Notifications', unreadText = 'unread' } = _a, props = __rest(_a, [\"children\", \"className\", \"count\", \"closeButtonAriaLabel\", \"customText\", \"onClose\", \"title\", \"unreadText\"]);\n    return (React.createElement(\"div\", Object.assign({}, props, { className: css(styles.notificationDrawerHeader, className) }),\n        React.createElement(Text, { component: TextVariants.h1, className: css(styles.notificationDrawerHeaderTitle) }, title),\n        (customText !== undefined || count !== undefined) && (React.createElement(\"span\", { className: css(styles.notificationDrawerHeaderStatus) }, customText || `${count} ${unreadText}`)),\n        children && (React.createElement(\"div\", { className: css(styles.notificationDrawerHeaderAction) },\n            children,\n            onClose && (React.createElement(\"div\", null,\n                React.createElement(Button, { variant: ButtonVariant.plain, \"aria-label\": closeButtonAriaLabel, onClick: onClose },\n                    React.createElement(TimesIcon, { \"aria-hidden\": \"true\" }))))))));\n};\nNotificationDrawerHeader.displayName = 'NotificationDrawerHeader';\n//# sourceMappingURL=NotificationDrawerHeader.js.map"]},"metadata":{},"sourceType":"module"}