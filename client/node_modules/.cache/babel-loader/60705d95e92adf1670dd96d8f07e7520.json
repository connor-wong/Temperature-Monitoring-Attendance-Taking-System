{"ast":null,"code":"import * as React from 'react';\nimport { ApplicationLauncherSeparator } from '../components/ApplicationLauncher/ApplicationLauncherSeparator';\nimport { Divider } from '../components/Divider/Divider';\n/**\n * This function is a helper for creating an array of renderable favorite items for the Application launcher or Select\n *\n * @param {object} items The items rendered in Select or Application aLauncher\n * @param {boolean} isGrouped Flag indicating if items are grouped\n * @param {any[]} favorites Array of ids of favorited items\n * @param {boolean} isEnterTriggersArrowDown Flag indicating if we should add isEnterTriggersArrowDown to favorited item\n */\n\nexport const createRenderableFavorites = (items, isGrouped, favorites, isEnterTriggersArrowDown) => {\n  if (isGrouped) {\n    const favoriteItems = [];\n    items.forEach(group => {\n      if (favorites.length > 0) {\n        return group.props.children && group.props.children.filter(item => favorites.includes(item.props.id)).map(item => {\n          if (isEnterTriggersArrowDown) {\n            return favoriteItems.push(React.cloneElement(item, {\n              isFavorite: true,\n              enterTriggersArrowDown: isEnterTriggersArrowDown,\n              id: `favorite-${item.props.id}`\n            }));\n          } else {\n            return favoriteItems.push(React.cloneElement(item, {\n              isFavorite: true,\n              id: `favorite-${item.props.id}`\n            }));\n          }\n        });\n      }\n    });\n    return favoriteItems;\n  }\n\n  return items.filter(item => favorites.includes(item.props.id)).map(item => React.cloneElement(item, {\n    isFavorite: true,\n    enterTriggersArrowDown: isEnterTriggersArrowDown\n  }));\n};\n/**\n * This function is a helper for extending the array of renderable favorite with the select/application launcher items to  render in the Application launcher or Select\n *\n * @param {object} items The items rendered in Select or Application aLauncher\n * @param {boolean} isGrouped Flag indicating if items are grouped\n * @param {any[]} favorites Array of ids of favorited items\n */\n\nexport const extendItemsWithFavorite = (items, isGrouped, favorites) => {\n  if (isGrouped) {\n    return items.map(group => React.cloneElement(group, {\n      children: React.Children.map(group.props.children, item => {\n        if (item.type === ApplicationLauncherSeparator || item.type === Divider) {\n          return item;\n        }\n\n        return React.cloneElement(item, {\n          isFavorite: favorites.some(favoriteId => favoriteId === item.props.id || `favorite-${favoriteId}` === item.props.id)\n        });\n      })\n    }));\n  }\n\n  return items.map(item => React.cloneElement(item, {\n    isFavorite: favorites.some(favoriteId => favoriteId === item.props.id)\n  }));\n};","map":{"version":3,"sources":["../../../src/helpers/favorites.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,4BAAT,QAA6C,gEAA7C;AACA,SAAS,OAAT,QAAwB,+BAAxB;AAEA;;;;;;;AAOG;;AACH,OAAO,MAAM,yBAAyB,GAAG,CACvC,KADuC,EAEvC,SAFuC,EAGvC,SAHuC,EAIvC,wBAJuC,KAKrC;AACF,MAAI,SAAJ,EAAe;AACb,UAAM,aAAa,GAAsB,EAAzC;AACC,IAAA,KAA8B,CAAC,OAA/B,CAAuC,KAAK,IAAG;AAC9C,UAAI,SAAS,CAAC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,eACE,KAAK,CAAC,KAAN,CAAY,QAAZ,IACC,KAAK,CAAC,KAAN,CAAY,QAAZ,CACE,MADF,CACS,IAAI,IAAI,SAAS,CAAC,QAAV,CAAmB,IAAI,CAAC,KAAL,CAAW,EAA9B,CADjB,EAEE,GAFF,CAEM,IAAI,IAAG;AACV,cAAI,wBAAJ,EAA8B;AAC5B,mBAAO,aAAa,CAAC,IAAd,CACL,KAAK,CAAC,YAAN,CAAmB,IAAnB,EAAyB;AACvB,cAAA,UAAU,EAAE,IADW;AAEvB,cAAA,sBAAsB,EAAE,wBAFD;AAGvB,cAAA,EAAE,EAAE,YAAY,IAAI,CAAC,KAAL,CAAW,EAAE;AAHN,aAAzB,CADK,CAAP;AAOD,WARD,MAQO;AACL,mBAAO,aAAa,CAAC,IAAd,CACL,KAAK,CAAC,YAAN,CAAmB,IAAnB,EAAyB;AAAE,cAAA,UAAU,EAAE,IAAd;AAAoB,cAAA,EAAE,EAAE,YAAY,IAAI,CAAC,KAAL,CAAW,EAAE;AAAjD,aAAzB,CADK,CAAP;AAGD;AACF,SAhBF,CAFH;AAoBD;AACF,KAvBA;AAwBD,WAAO,aAAP;AACD;;AACD,SAAQ,KAA8B,CACnC,MADK,CACE,IAAI,IAAI,SAAS,CAAC,QAAV,CAAmB,IAAI,CAAC,KAAL,CAAW,EAA9B,CADV,EAEL,GAFK,CAED,IAAI,IAAI,KAAK,CAAC,YAAN,CAAmB,IAAnB,EAAyB;AAAE,IAAA,UAAU,EAAE,IAAd;AAAoB,IAAA,sBAAsB,EAAE;AAA5C,GAAzB,CAFP,CAAR;AAGD,CArCM;AAuCP;;;;;;AAMG;;AACH,OAAO,MAAM,uBAAuB,GAAG,CAAC,KAAD,EAAgB,SAAhB,EAAoC,SAApC,KAAwD;AAC7F,MAAI,SAAJ,EAAe;AACb,WAAQ,KAA8B,CAAC,GAA/B,CAAmC,KAAK,IAC9C,KAAK,CAAC,YAAN,CAAmB,KAAnB,EAA0B;AACxB,MAAA,QAAQ,EAAE,KAAK,CAAC,QAAN,CAAe,GAAf,CAAmB,KAAK,CAAC,KAAN,CAAY,QAA/B,EAAiE,IAAI,IAAG;AAChF,YAAI,IAAI,CAAC,IAAL,KAAc,4BAAd,IAA8C,IAAI,CAAC,IAAL,KAAc,OAAhE,EAAyE;AACvE,iBAAO,IAAP;AACD;;AACD,eAAO,KAAK,CAAC,YAAN,CAAmB,IAAnB,EAAyB;AAC9B,UAAA,UAAU,EAAE,SAAS,CAAC,IAAV,CACV,UAAU,IAAI,UAAU,KAAK,IAAI,CAAC,KAAL,CAAW,EAA1B,IAAgC,YAAY,UAAU,EAAtB,KAA6B,IAAI,CAAC,KAAL,CAAW,EAD5E;AADkB,SAAzB,CAAP;AAKD,OATS;AADc,KAA1B,CADM,CAAR;AAcD;;AACD,SAAQ,KAA8B,CAAC,GAA/B,CAAmC,IAAI,IAC7C,KAAK,CAAC,YAAN,CAAmB,IAAnB,EAAyB;AACvB,IAAA,UAAU,EAAE,SAAS,CAAC,IAAV,CAAe,UAAU,IAAI,UAAU,KAAK,IAAI,CAAC,KAAL,CAAW,EAAvD;AADW,GAAzB,CADM,CAAR;AAKD,CAtBM","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { ApplicationLauncherSeparator } from '../components/ApplicationLauncher/ApplicationLauncherSeparator';\nimport { Divider } from '../components/Divider/Divider';\n/**\n * This function is a helper for creating an array of renderable favorite items for the Application launcher or Select\n *\n * @param {object} items The items rendered in Select or Application aLauncher\n * @param {boolean} isGrouped Flag indicating if items are grouped\n * @param {any[]} favorites Array of ids of favorited items\n * @param {boolean} isEnterTriggersArrowDown Flag indicating if we should add isEnterTriggersArrowDown to favorited item\n */\nexport const createRenderableFavorites = (items, isGrouped, favorites, isEnterTriggersArrowDown) => {\n    if (isGrouped) {\n        const favoriteItems = [];\n        items.forEach(group => {\n            if (favorites.length > 0) {\n                return (group.props.children &&\n                    group.props.children\n                        .filter(item => favorites.includes(item.props.id))\n                        .map(item => {\n                        if (isEnterTriggersArrowDown) {\n                            return favoriteItems.push(React.cloneElement(item, {\n                                isFavorite: true,\n                                enterTriggersArrowDown: isEnterTriggersArrowDown,\n                                id: `favorite-${item.props.id}`\n                            }));\n                        }\n                        else {\n                            return favoriteItems.push(React.cloneElement(item, { isFavorite: true, id: `favorite-${item.props.id}` }));\n                        }\n                    }));\n            }\n        });\n        return favoriteItems;\n    }\n    return items\n        .filter(item => favorites.includes(item.props.id))\n        .map(item => React.cloneElement(item, { isFavorite: true, enterTriggersArrowDown: isEnterTriggersArrowDown }));\n};\n/**\n * This function is a helper for extending the array of renderable favorite with the select/application launcher items to  render in the Application launcher or Select\n *\n * @param {object} items The items rendered in Select or Application aLauncher\n * @param {boolean} isGrouped Flag indicating if items are grouped\n * @param {any[]} favorites Array of ids of favorited items\n */\nexport const extendItemsWithFavorite = (items, isGrouped, favorites) => {\n    if (isGrouped) {\n        return items.map(group => React.cloneElement(group, {\n            children: React.Children.map(group.props.children, item => {\n                if (item.type === ApplicationLauncherSeparator || item.type === Divider) {\n                    return item;\n                }\n                return React.cloneElement(item, {\n                    isFavorite: favorites.some(favoriteId => favoriteId === item.props.id || `favorite-${favoriteId}` === item.props.id)\n                });\n            })\n        }));\n    }\n    return items.map(item => React.cloneElement(item, {\n        isFavorite: favorites.some(favoriteId => favoriteId === item.props.id)\n    }));\n};\n//# sourceMappingURL=favorites.js.map"]},"metadata":{},"sourceType":"module"}