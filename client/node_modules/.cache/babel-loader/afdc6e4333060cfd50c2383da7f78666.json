{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\nimport { css } from '@patternfly/react-styles';\nimport { SelectOption } from './SelectOption';\nimport { SelectConsumer, SelectVariant } from './selectConstants';\nimport { SelectGroup } from './SelectGroup';\nimport { Divider } from '../Divider/Divider';\n\nclass SelectMenuWithRef extends React.Component {\n  extendChildren(randomId) {\n    const {\n      children,\n      isGrouped\n    } = this.props;\n    const childrenArray = children;\n\n    if (isGrouped) {\n      let index = 0;\n      return React.Children.map(childrenArray, group => {\n        if (group.type === SelectGroup) {\n          return React.cloneElement(group, {\n            titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n            children: React.Children.map(group.props.children, option => this.cloneOption(option, index++, randomId))\n          });\n        } else {\n          return this.cloneOption(group, index++, randomId);\n        }\n      });\n    }\n\n    return React.Children.map(childrenArray, (child, index) => this.cloneOption(child, index, randomId));\n  }\n\n  cloneOption(child, index, randomId) {\n    const {\n      selected,\n      sendRef,\n      keyHandler\n    } = this.props;\n    const isSelected = this.checkForValue(child.props.value, selected);\n\n    if (child.type === Divider) {\n      return child;\n    }\n\n    return React.cloneElement(child, {\n      inputId: `${randomId}-${index}`,\n      isSelected,\n      sendRef,\n      keyHandler,\n      index\n    });\n  }\n\n  checkForValue(valueToCheck, options) {\n    if (!options || !valueToCheck) {\n      return false;\n    }\n\n    const isSelectOptionObject = typeof valueToCheck !== 'string' && valueToCheck.toString && valueToCheck.compareTo;\n\n    if (Array.isArray(options)) {\n      if (isSelectOptionObject) {\n        return options.some(option => option.compareTo(valueToCheck));\n      } else {\n        return options.includes(valueToCheck);\n      }\n    } else {\n      if (isSelectOptionObject) {\n        return options.compareTo(valueToCheck);\n      } else {\n        return options === valueToCheck;\n      }\n    }\n  }\n\n  extendCheckboxChildren(children) {\n    const {\n      isGrouped,\n      checked,\n      sendRef,\n      keyHandler,\n      hasInlineFilter\n    } = this.props;\n    let index = hasInlineFilter ? 1 : 0;\n\n    if (isGrouped) {\n      return React.Children.map(children, group => {\n        if (group.type === SelectOption || group.type === Divider) {\n          return group;\n        }\n\n        return React.cloneElement(group, {\n          titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n          children: React.createElement(\"fieldset\", {\n            \"aria-labelledby\": group.props.label && group.props.label.replace(/\\W/g, '-'),\n            className: css(styles.selectMenuFieldset)\n          }, React.Children.map(group.props.children, option => option.type === Divider ? option : React.cloneElement(option, {\n            isChecked: this.checkForValue(option.props.value, checked),\n            sendRef,\n            keyHandler,\n            index: index++\n          })))\n        });\n      });\n    }\n\n    return React.Children.map(children, child => child.type === Divider ? child : React.cloneElement(child, {\n      isChecked: this.checkForValue(child.props.value, checked),\n      sendRef,\n      keyHandler,\n      index: index++\n    }));\n  }\n\n  render() {\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    const _a = this.props,\n          {\n      children,\n      isCustomContent,\n      className,\n      isExpanded,\n      openedOnEnter,\n      selected,\n      checked,\n      isGrouped,\n      sendRef,\n      keyHandler,\n      maxHeight,\n      noResultsFoundText,\n      createText,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      hasInlineFilter,\n      innerRef\n    } = _a,\n          props = __rest(_a, [\"children\", \"isCustomContent\", \"className\", \"isExpanded\", \"openedOnEnter\", \"selected\", \"checked\", \"isGrouped\", \"sendRef\", \"keyHandler\", \"maxHeight\", \"noResultsFoundText\", \"createText\", 'aria-label', 'aria-labelledby', \"hasInlineFilter\", \"innerRef\"]);\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n\n\n    return React.createElement(SelectConsumer, null, ({\n      variant,\n      inputIdPrefix\n    }) => React.createElement(React.Fragment, null, isCustomContent && React.createElement(\"div\", Object.assign({\n      ref: innerRef,\n      className: css(styles.selectMenu, className)\n    }, maxHeight && {\n      style: {\n        maxHeight,\n        overflow: 'auto'\n      }\n    }, props), children), variant !== SelectVariant.checkbox && !isCustomContent && (!isGrouped ? React.createElement(\"ul\", Object.assign({\n      ref: innerRef,\n      className: css(styles.selectMenu, className),\n      role: \"listbox\",\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": !ariaLabel && ariaLabelledBy || null\n    }, maxHeight && {\n      style: {\n        maxHeight,\n        overflow: 'auto'\n      }\n    }, props), this.extendChildren(inputIdPrefix)) : React.createElement(\"div\", Object.assign({\n      ref: innerRef,\n      className: css(styles.selectMenu, className)\n    }, maxHeight && {\n      style: {\n        maxHeight,\n        overflow: 'auto'\n      }\n    }, props), this.extendChildren(inputIdPrefix))), variant === SelectVariant.checkbox && !isCustomContent && React.Children.count(children) > 0 && React.createElement(\"div\", Object.assign({\n      ref: innerRef,\n      className: css(styles.selectMenu, className)\n    }, maxHeight && {\n      style: {\n        maxHeight,\n        overflow: 'auto'\n      }\n    }), React.createElement(\"fieldset\", Object.assign({}, props, {\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": !ariaLabel && ariaLabelledBy || null,\n      className: css(formStyles.formFieldset)\n    }), hasInlineFilter && [children.shift(), ...this.extendCheckboxChildren(children)], !hasInlineFilter && this.extendCheckboxChildren(children))), variant === SelectVariant.checkbox && !isCustomContent && React.Children.count(children) === 0 && React.createElement(\"div\", Object.assign({\n      ref: innerRef,\n      className: css(styles.selectMenu, className)\n    }, maxHeight && {\n      style: {\n        maxHeight,\n        overflow: 'auto'\n      }\n    }), React.createElement(\"fieldset\", {\n      className: css(styles.selectMenuFieldset)\n    }))));\n  }\n\n}\n\nSelectMenuWithRef.displayName = 'SelectMenu';\nSelectMenuWithRef.defaultProps = {\n  className: '',\n  isExpanded: false,\n  isGrouped: false,\n  openedOnEnter: false,\n  selected: '',\n  maxHeight: '',\n  sendRef: () => {},\n  keyHandler: () => {},\n  isCustomContent: false,\n  hasInlineFilter: false\n};\nexport const SelectMenu = React.forwardRef((props, ref) => React.createElement(SelectMenuWithRef, Object.assign({\n  innerRef: ref\n}, props), props.children));","map":{"version":3,"sources":["../../../../src/components/Select/SelectMenu.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\nimport { css } from '@patternfly/react-styles';\nimport { SelectOption } from './SelectOption';\nimport { SelectConsumer, SelectVariant } from './selectConstants';\nimport { SelectGroup } from './SelectGroup';\nimport { Divider } from '../Divider/Divider';\nclass SelectMenuWithRef extends React.Component {\n    extendChildren(randomId) {\n        const { children, isGrouped } = this.props;\n        const childrenArray = children;\n        if (isGrouped) {\n            let index = 0;\n            return React.Children.map(childrenArray, (group) => {\n                if (group.type === SelectGroup) {\n                    return React.cloneElement(group, {\n                        titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n                        children: React.Children.map(group.props.children, (option) => this.cloneOption(option, index++, randomId))\n                    });\n                }\n                else {\n                    return this.cloneOption(group, index++, randomId);\n                }\n            });\n        }\n        return React.Children.map(childrenArray, (child, index) => this.cloneOption(child, index, randomId));\n    }\n    cloneOption(child, index, randomId) {\n        const { selected, sendRef, keyHandler } = this.props;\n        const isSelected = this.checkForValue(child.props.value, selected);\n        if (child.type === Divider) {\n            return child;\n        }\n        return React.cloneElement(child, {\n            inputId: `${randomId}-${index}`,\n            isSelected,\n            sendRef,\n            keyHandler,\n            index\n        });\n    }\n    checkForValue(valueToCheck, options) {\n        if (!options || !valueToCheck) {\n            return false;\n        }\n        const isSelectOptionObject = typeof valueToCheck !== 'string' &&\n            valueToCheck.toString &&\n            valueToCheck.compareTo;\n        if (Array.isArray(options)) {\n            if (isSelectOptionObject) {\n                return options.some(option => option.compareTo(valueToCheck));\n            }\n            else {\n                return options.includes(valueToCheck);\n            }\n        }\n        else {\n            if (isSelectOptionObject) {\n                return options.compareTo(valueToCheck);\n            }\n            else {\n                return options === valueToCheck;\n            }\n        }\n    }\n    extendCheckboxChildren(children) {\n        const { isGrouped, checked, sendRef, keyHandler, hasInlineFilter } = this.props;\n        let index = hasInlineFilter ? 1 : 0;\n        if (isGrouped) {\n            return React.Children.map(children, (group) => {\n                if (group.type === SelectOption || group.type === Divider) {\n                    return group;\n                }\n                return React.cloneElement(group, {\n                    titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n                    children: (React.createElement(\"fieldset\", { \"aria-labelledby\": group.props.label && group.props.label.replace(/\\W/g, '-'), className: css(styles.selectMenuFieldset) }, React.Children.map(group.props.children, (option) => option.type === Divider\n                        ? option\n                        : React.cloneElement(option, {\n                            isChecked: this.checkForValue(option.props.value, checked),\n                            sendRef,\n                            keyHandler,\n                            index: index++\n                        }))))\n                });\n            });\n        }\n        return React.Children.map(children, (child) => child.type === Divider\n            ? child\n            : React.cloneElement(child, {\n                isChecked: this.checkForValue(child.props.value, checked),\n                sendRef,\n                keyHandler,\n                index: index++\n            }));\n    }\n    render() {\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        const _a = this.props, { children, isCustomContent, className, isExpanded, openedOnEnter, selected, checked, isGrouped, sendRef, keyHandler, maxHeight, noResultsFoundText, createText, 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledBy, hasInlineFilter, innerRef } = _a, props = __rest(_a, [\"children\", \"isCustomContent\", \"className\", \"isExpanded\", \"openedOnEnter\", \"selected\", \"checked\", \"isGrouped\", \"sendRef\", \"keyHandler\", \"maxHeight\", \"noResultsFoundText\", \"createText\", 'aria-label', 'aria-labelledby', \"hasInlineFilter\", \"innerRef\"]);\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        return (React.createElement(SelectConsumer, null, ({ variant, inputIdPrefix }) => (React.createElement(React.Fragment, null,\n            isCustomContent && (React.createElement(\"div\", Object.assign({ ref: innerRef, className: css(styles.selectMenu, className) }, (maxHeight && { style: { maxHeight, overflow: 'auto' } }), props), children)),\n            variant !== SelectVariant.checkbox &&\n                !isCustomContent &&\n                (!isGrouped ? (React.createElement(\"ul\", Object.assign({ ref: innerRef, className: css(styles.selectMenu, className), role: \"listbox\", \"aria-label\": ariaLabel, \"aria-labelledby\": (!ariaLabel && ariaLabelledBy) || null }, (maxHeight && { style: { maxHeight, overflow: 'auto' } }), props), this.extendChildren(inputIdPrefix))) : (React.createElement(\"div\", Object.assign({ ref: innerRef, className: css(styles.selectMenu, className) }, (maxHeight && { style: { maxHeight, overflow: 'auto' } }), props), this.extendChildren(inputIdPrefix)))),\n            variant === SelectVariant.checkbox && !isCustomContent && React.Children.count(children) > 0 && (React.createElement(\"div\", Object.assign({ ref: innerRef, className: css(styles.selectMenu, className) }, (maxHeight && { style: { maxHeight, overflow: 'auto' } })),\n                React.createElement(\"fieldset\", Object.assign({}, props, { \"aria-label\": ariaLabel, \"aria-labelledby\": (!ariaLabel && ariaLabelledBy) || null, className: css(formStyles.formFieldset) }),\n                    hasInlineFilter && [\n                        children.shift(),\n                        ...this.extendCheckboxChildren(children)\n                    ],\n                    !hasInlineFilter && this.extendCheckboxChildren(children)))),\n            variant === SelectVariant.checkbox && !isCustomContent && React.Children.count(children) === 0 && (React.createElement(\"div\", Object.assign({ ref: innerRef, className: css(styles.selectMenu, className) }, (maxHeight && { style: { maxHeight, overflow: 'auto' } })),\n                React.createElement(\"fieldset\", { className: css(styles.selectMenuFieldset) })))))));\n    }\n}\nSelectMenuWithRef.displayName = 'SelectMenu';\nSelectMenuWithRef.defaultProps = {\n    className: '',\n    isExpanded: false,\n    isGrouped: false,\n    openedOnEnter: false,\n    selected: '',\n    maxHeight: '',\n    sendRef: () => { },\n    keyHandler: () => { },\n    isCustomContent: false,\n    hasInlineFilter: false\n};\nexport const SelectMenu = React.forwardRef((props, ref) => (React.createElement(SelectMenuWithRef, Object.assign({ innerRef: ref }, props), props.children)));\n//# sourceMappingURL=SelectMenu.js.map"]},"metadata":{},"sourceType":"module"}